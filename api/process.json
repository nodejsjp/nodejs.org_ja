{
  "source": "doc/api/process.markdown",
  "globals": [
    {
      "textRaw": "process",
      "name": "process",
      "type": "global",
      "desc": "<!--\nThe `process` object is a global object and can be accessed from anywhere.\nIt is an instance of [EventEmitter][].\n-->\n\n<p><code>process</code> はグローバルオブジェクトで、どこからでもアクセスすることができます。\nそれは [EventEmitter][] のインスタンスです。\n\n\n</p>\n",
      "events": [
        {
          "textRaw": "Event: 'exit'",
          "type": "event",
          "name": "exit",
          "desc": "<!--\nEmitted when the process is about to exit.  This is a good hook to perform\nconstant time checks of the module's state (like for unit tests).  The main\nevent loop will no longer be run after the 'exit' callback finishes, so\ntimers may not be scheduled.\n-->\n\n<p>プロセスが終了しようとしている時に生成されます。\nこれは (ユニットテストのように) モジュールの状態を一定の時間でチェックするのに適したフックとなります。\nメインのイベントループは &#39;exit&#39; コールバックが終了するともはや動作しないので、\nタイマーはスケジュールされないかもしれません。\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>exit</code> を監視する例:\n\n</p>\n<pre><code>process.on(&#39;exit&#39;, function() {\n  setTimeout(function() {\n    console.log(&#39;This will not run&#39;);\n  }, 0);\n  console.log(&#39;About to exit.&#39;);\n});</code></pre>\n",
          "params": []
        },
        {
          "textRaw": "Event: 'uncaughtException'",
          "type": "event",
          "name": "uncaughtException",
          "desc": "<!--\nEmitted when an exception bubbles all the way back to the event loop. If a\nlistener is added for this exception, the default action (which is to print\na stack trace and exit) will not occur.\n-->\n\n<p>発生した例外がイベントループまでたどり着いた場合に生成されます。\nもしこの例外に対するリスナーが加えられていれば、\nデフォルトの動作 (それはスタックトレースをプリントして終了します) は起こりません。\n\n</p>\n<!--\nExample of listening for `uncaughtException`:\n-->\n\n<p><code>uncaughtException</code> を監視する例:\n\n</p>\n<pre><code>process.on(&#39;uncaughtException&#39;, function(err) {\n  console.log(&#39;Caught exception: &#39; + err);\n});\n\nsetTimeout(function() {\n  console.log(&#39;This will still run.&#39;);\n}, 500);\n\n// Intentionally cause an exception, but don&#39;t catch it.\nnonexistentFunc();\nconsole.log(&#39;This will not run.&#39;);</code></pre>\n<!--\nNote that `uncaughtException` is a very crude mechanism for exception\nhandling.\n-->\n\n<p><code>uncaughtException</code> は例外を扱うとても荒削りなメカニズムであることに\n注意してください。\n\n</p>\n<!--\nDon't use it, use [domains](domain.html) instead. If you do use it, restart\nyour application after every unhandled exception!\n-->\n\n<p>これを使う代わりに、<a href=\"domain.html\">ドメイン</a> を使ってください。\nそれを使えば、捕まえられない例外が発生した後でもアプリケーションを\n再開することができます！\n\n</p>\n<!--\nDo *not* use it as the node.js equivalent of `On Error Resume Next`. An\nunhandled exception means your application - and by extension node.js itself -\nis in an undefined state. Blindly resuming means *anything* could happen.\n-->\n\n<p>これを Node.js における <code>On Error Resume Next</code> として <em>使わないで</em> ください。\n捕まえられなかった例外は、アプリケーション\n- および Node.js 自身の拡張 - が未定義の状態となることを意味します。\nやみくもな再開は <em>どんなことでも</em> 起こることを意味します。\n\n</p>\n<!--\nThink of resuming as pulling the power cord when you are upgrading your system.\nNine out of ten times nothing happens - but the 10th time, your system is bust.\n-->\n\n<p>電源を引き抜きながらアプリケーションをアップグレードすることを\n想像してください。\n10 回中 9 回は何も起こりません\n- しかし 10 回目にはそのシステムは使えなくなるかもしれません。\n\n</p>\n<!--\nYou have been warned.\n-->\n\n<p>これは警告です。\n\n</p>\n",
          "params": []
        },
        {
          "textRaw": "Signal Events",
          "name": "SIGINT, SIGUSR1, etc.",
          "type": "event",
          "desc": "<!--\nEmitted when the processes receives a signal. See sigaction(2) for a list of\nstandard POSIX signal names such as SIGINT, SIGUSR1, etc.\n-->\n\n<p>プロセスがシグナルを受信した場合に生成されます。\nSIGINT、SIGUSR1、その他の POSIX 標準シグナル名の一覧について は sigaction(2) を参照してください。\n\n</p>\n<!--\nExample of listening for `SIGINT`:\n-->\n\n<p><code>SIGINT</code>を監視する例:\n\n</p>\n<pre><code>// Start reading from stdin so we don&#39;t exit.\nprocess.stdin.resume();\n\nprocess.on(&#39;SIGINT&#39;, function() {\n  console.log(&#39;Got SIGINT.  Press Control-D to exit.&#39;);\n});</code></pre>\n<!--\nAn easy way to send the `SIGINT` signal is with `Control-C` in most terminal\nprograms.\n-->\n\n<p>多くの端末プログラムで簡単に <code>SIGINT</code> を送る方法は <code>Control-C</code> を押すことです。\n\n\n</p>\n",
          "params": []
        }
      ],
      "properties": [
        {
          "textRaw": "process.stdout",
          "name": "stdout",
          "desc": "<!--\nA `Writable Stream` to `stdout`.\n-->\n\n<p><code>stdout</code> に対する <code>Writable Stream</code> です。\n\n</p>\n<!--\nExample: the definition of `console.log`\n-->\n\n<p>例: <code>console.log</code> の定義\n\n</p>\n<pre><code>console.log = function(d) {\n  process.stdout.write(d + &#39;\\n&#39;);\n};</code></pre>\n<!--\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.  They are blocking in the case\nthat they refer to regular files or TTY file descriptors. In the case they\nrefer to pipes, they are non-blocking like other streams.\n-->\n\n<p><code>process.stderr</code> と <code>process.stdout</code> は他のストリームと異なり、\n書き込みは通常ブロックします。\nそれらが通常ファイルや TTY のファイル記述子を参照しているケースでは、\nそれらはブロックします。\nパイプを参照しているケースでは、他のストリームと同様にブロックしません。\n\n</p>\n<!--\nTo check if Node is being run in a TTY context, read the `isTTY` property\non `process.stderr`, `process.stdout`, or `process.stdin`:\n-->\n\n<p>Node が TTY のコンテキストで実行されているかチェックするには、\n<code>process.stderr</code>, <code>process.stdout</code>, または <code>process.stdin</code> の\n<code>isTTY</code> プロパティを参照します。\n\n</p>\n<pre><code>$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse</code></pre>\n<!--\nSee [the tty docs](tty.html#tty_tty) for more information.\n-->\n\n<p>より詳細は <a href=\"tty.html#tty_tty\">the tty docs</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "process.stderr",
          "name": "stderr",
          "desc": "<!--\nA writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.  They are blocking in the case\nthat they refer to regular files or TTY file descriptors. In the case they\nrefer to pipes, they are non-blocking like other streams.\n-->\n\n<p><code>stderr</code> に対する <code>Writable Stream</code> です。\n\n</p>\n<p><code>process.stderr</code> と <code>process.stdout</code> は他のストリームと異なり、\n書き込みは通常ブロックします。\nそれらが通常ファイルや TTY のファイル記述子を参照しているケースでは、\nそれらはブロックします。\nパイプを参照しているケースでは、他のストリームと同様にブロックしません。\n\n\n</p>\n"
        },
        {
          "textRaw": "process.stdin",
          "name": "stdin",
          "desc": "<!--\nA `Readable Stream` for stdin. The stdin stream is paused by default, so one\nmust call `process.stdin.resume()` to read from it.\n-->\n\n<p>標準入力に対する <code>Readable Stream</code> です。\nデフォルトでは、標準入力に対するストリームは中断されているため、\n読み込みのためには <code>process.stdin.resume()</code> を呼び出さなければなりません。\n\n</p>\n<!--\nExample of opening standard input and listening for both events:\n-->\n\n<p>標準入力をオープンして二つのイベントを監視する例:\n\n</p>\n<pre><code>process.stdin.resume();\nprocess.stdin.setEncoding(&#39;utf8&#39;);\n\nprocess.stdin.on(&#39;data&#39;, function(chunk) {\n  process.stdout.write(&#39;data: &#39; + chunk);\n});\n\nprocess.stdin.on(&#39;end&#39;, function() {\n  process.stdout.write(&#39;end&#39;);\n});</code></pre>\n"
        },
        {
          "textRaw": "process.argv",
          "name": "argv",
          "desc": "<!--\nAn array containing the command line arguments.  The first element will be\n'node', the second element will be the name of the JavaScript file.  The\nnext elements will be any additional command line arguments.\n-->\n\n<p>コマンドライン引数を含む配列です。\n最初の要素は &#39;node&#39;、2 番目の要素は JavaScript ファイルの名前になります。\nその後の要素はコマンドラインの追加の引数になります。\n\n</p>\n<pre><code>// print process.argv\nprocess.argv.forEach(function(val, index, array) {\n  console.log(index + &#39;: &#39; + val);\n});</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>このように出力されます:\n\n</p>\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four</code></pre>\n"
        },
        {
          "textRaw": "process.execPath",
          "name": "execPath",
          "desc": "<!--\nThis is the absolute pathname of the executable that started the process.\n-->\n\n<p>プロセスによって開始された実行可能ファイルの絶対パスです。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>/usr/local/bin/node</code></pre>\n"
        },
        {
          "textRaw": "process.env",
          "name": "env",
          "desc": "<!--\nAn object containing the user environment. See environ(7).\n-->\n\n<p>ユーザの環境を含むオブジェクトです。environ(7) を参照してください。\n\n\n</p>\n"
        },
        {
          "textRaw": "process.version",
          "name": "version",
          "desc": "<!--\nA compiled-in property that exposes `NODE_VERSION`.\n-->\n\n<p><code>NODE_VERSION</code> を提示するコンパイル済みプロパティです。\n\n</p>\n<pre><code>console.log(&#39;Version: &#39; + process.version);</code></pre>\n"
        },
        {
          "textRaw": "process.versions",
          "name": "versions",
          "desc": "<!--\nA property exposing version strings of node and its dependencies.\n-->\n\n<p>node と依存ライブラリのバージョン文字列を提示します。\n\n</p>\n<pre><code>console.log(process.versions);</code></pre>\n<!--\nWill print something like:\n-->\n\n<p>は以下のように出力します。\n\n</p>\n<pre><code>{ http_parser: &#39;1.0&#39;,\n  node: &#39;0.10.4&#39;,\n  v8: &#39;3.14.5.8&#39;,\n  ares: &#39;1.9.0-DEV&#39;,\n  uv: &#39;0.10.3&#39;,\n  zlib: &#39;1.2.3&#39;,\n  modules: &#39;11&#39;,\n  openssl: &#39;1.0.1e&#39; }</code></pre>\n"
        },
        {
          "textRaw": "process.config",
          "name": "config",
          "desc": "<!--\nAn Object containing the JavaScript representation of the configure options\nthat were used to compile the current node executable. This is the same as\nthe \"config.gypi\" file that was produced when running the `./configure` script.\n\nAn example of the possible output looks like:\n-->\n\n<p>現在のnode実行ファイルをコンパイルした際に使われた configure のオプションを\nJavaScript で表現したオブジェクトを保持します。\nこれは <code>./configure</code> スクリプトを実行した際に生成された &quot;cofnig.gypi&quot;\nファイルと同じです。\n\n</p>\n<p>実際の出力の例です:\n\n</p>\n<pre><code>{ target_defaults:\n   { cflags: [],\n     default_configuration: &#39;Release&#39;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   { host_arch: &#39;x64&#39;,\n     node_install_npm: &#39;true&#39;,\n     node_prefix: &#39;&#39;,\n     node_shared_cares: &#39;false&#39;,\n     node_shared_http_parser: &#39;false&#39;,\n     node_shared_libuv: &#39;false&#39;,\n     node_shared_v8: &#39;false&#39;,\n     node_shared_zlib: &#39;false&#39;,\n     node_use_dtrace: &#39;false&#39;,\n     node_use_openssl: &#39;true&#39;,\n     node_shared_openssl: &#39;false&#39;,\n     strict_aliasing: &#39;true&#39;,\n     target_arch: &#39;x64&#39;,\n     v8_use_snapshot: &#39;true&#39; } }</code></pre>\n"
        },
        {
          "textRaw": "process.pid",
          "name": "pid",
          "desc": "<!--\nThe PID of the process.\n-->\n\n<p>このプロセスの PID です。\n\n</p>\n<pre><code>console.log(&#39;This process is pid &#39; + process.pid);</code></pre>\n"
        },
        {
          "textRaw": "process.title",
          "name": "title",
          "desc": "<!--\nGetter/setter to set what is displayed in 'ps'.\n-->\n\n<p>&#39;ps&#39; でどのよう表示されるかを設定するための getter/setter です。\n\n</p>\n<!--\nWhen used as a setter, the maximum length is platform-specific and probably\nshort.\n-->\n\n<p>setter が使われる場合、その最大長はプラットフォーム依存で、おそらく短いです。\n\n</p>\n<!--\nOn Linux and OS X, it's limited to the size of the binary name plus the\nlength of the command line arguments because it overwrites the argv memory.\n-->\n\n<p>Linux と OS X では、それは argv のメモリを上書きするため、\nバイナリ名にコマンドライン引数を加えたものに制限されます。\n\n</p>\n<!--\nv0.8 allowed for longer process title strings by also overwriting the environ\nmemory but that was potentially insecure/confusing in some (rather obscure)\ncases.\n-->\n\n<p>v0.8 はより長いプロセスタイトル文字列で環境を上書きしていましたが、\nそれはいくつかの (はっきりしない) ケースにおいて、\n潜在的に危険で混乱していました。\n\n\n</p>\n"
        },
        {
          "textRaw": "process.arch",
          "name": "arch",
          "desc": "<!--\nWhat processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n-->\n\n<p>実行しているプロセッサのアーキテクチャ: <code>&#39;arm&#39;</code>、<code>&#39;ia32&#39;</code>、または\n<code>&#39;x64&#39;</code>。\n\n</p>\n<pre><code>console.log(&#39;This processor architecture is &#39; + process.arch);</code></pre>\n"
        },
        {
          "textRaw": "process.platform",
          "name": "platform",
          "desc": "<!--\nWhat platform you're running on:\n`'darwin'`, `'freebsd'`, `'linux'`, `'sunos'` or `'win32'`\n-->\n\n<p>どのプラットフォームで動いているかを示します:\n<code>&#39;darwin&#39;</code>、<code>&#39;freebsd&#39;</code>、<code>&#39;linux&#39;</code>、<code>&#39;sunos&#39;</code>、または <code>&#39;win32&#39;</code>\n\n</p>\n<pre><code>console.log(&#39;This platform is &#39; + process.platform);</code></pre>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "process.abort()",
          "type": "method",
          "name": "abort",
          "desc": "<!--\nThis causes node to emit an abort. This will cause node to exit and\ngenerate a core file.\n-->\n\n<p>これは node をアボートさせます。\nこれは node が終了してコアファイルを生成する原因となります。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.chdir(directory)",
          "type": "method",
          "name": "chdir",
          "desc": "<!--\nChanges the current working directory of the process or throws an exception if that fails.\n-->\n\n<p>プロセスのカレントワーキングディレクトリを変更します。\nもし失敗した場合は例外をスローします。\n\n</p>\n<pre><code>console.log(&#39;Starting directory: &#39; + process.cwd());\ntry {\n  process.chdir(&#39;/tmp&#39;);\n  console.log(&#39;New directory: &#39; + process.cwd());\n}\ncatch (err) {\n  console.log(&#39;chdir: &#39; + err);\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "directory"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.cwd()",
          "type": "method",
          "name": "cwd",
          "desc": "<!--\nReturns the current working directory of the process.\n-->\n\n<p>プロセスのカレントワーキングディレクトリを返します。\n\n</p>\n<pre><code>console.log(&#39;Current directory: &#39; + process.cwd());</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.exit([code])",
          "type": "method",
          "name": "exit",
          "desc": "<!--\nEnds the process with the specified `code`.  If omitted, exit uses the\n'success' code `0`.\n-->\n\n<p>指定の <code>code</code> でプロセスを終了します。\nもし省略されると、「成功」を示すコード <code>0</code> を使って終了します。\n\n</p>\n<!--\nTo exit with a 'failure' code:\n-->\n\n<p>「失敗」を示すコードで終了する例:\n\n</p>\n<pre><code>process.exit(1);</code></pre>\n<!--\nThe shell that executed node should see the exit code as 1.\n-->\n\n<p>node を実行したシェルで終了コードが 1 であることを見ることができるでしょう。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "code",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.getgid()",
          "type": "method",
          "name": "getgid",
          "desc": "<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows,\nAndroid)\n-->\n\n<p>注意: この関数は POSIX プラットフォーム (すなわち、Windows と Android 以外)\nでのみ利用可能です。\n\n</p>\n<!--\nGets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n-->\n\n<p>プロセスのグループ識別子を取得します (getgid(2) 参照)。\nこれは数値によるグループ ID で、グループ名ではありません。\n\n</p>\n<pre><code>if (process.getgid) {\n  console.log(&#39;Current gid: &#39; + process.getgid());\n}</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.setgid(id)",
          "type": "method",
          "name": "setgid",
          "desc": "<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows,\nAndroid)\n-->\n\n<p>注意: この関数は POSIX プラットフォーム (すなわち、Windows と Android 以外)\nでのみ利用可能です。\n\n</p>\n<!--\nSets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>プロセスのグループ識別子を設定します (setgid(2) 参照)。\nこれは数値による ID もグループ名の文字列のどちらも受け入れます。\nもしグループ名が指定されると、数値による ID が解決できるまでこのメソッドはブロックします。\n\n</p>\n<pre><code>if (process.getgid &amp;&amp; process.setgid) {\n  console.log(&#39;Current gid: &#39; + process.getgid());\n  try {\n    process.setgid(501);\n    console.log(&#39;New gid: &#39; + process.getgid());\n  }\n  catch (err) {\n    console.log(&#39;Failed to set gid: &#39; + err);\n  }\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.getuid()",
          "type": "method",
          "name": "getuid",
          "desc": "<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows,\nAndroid)\n-->\n\n<p>注意: この関数は POSIX プラットフォーム (すなわち、Windows と Android 以外)\nでのみ利用可能です。\n\n</p>\n<!--\nGets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n-->\n\n<p>プロセスのユーザ識別子を取得します (getuid(2) 参照)。\nこれは数値によるユーザ ID で、ユーザ名ではありません。\n\n</p>\n<pre><code>if (process.getuid) {\n  console.log(&#39;Current uid: &#39; + process.getuid());\n}</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.setuid(id)",
          "type": "method",
          "name": "setuid",
          "desc": "<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows,\nAndroid)\n-->\n\n<p>注意: この関数は POSIX プラットフォーム (すなわち、Windows と Android 以外)\nでのみ利用可能です。\n\n</p>\n<!--\nSets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>プロセスのユーザ識別子を設定します (setuid(2) 参照)。\nこれは数値による ID もユーザ名の文字列のどちらも受け入れます。\nもしユーザ名が指定されると、数値による ID が解決できるまでこのメソッドはブロックします。\n\n</p>\n<pre><code>if (process.getuid &amp;&amp; process.setuid) {\n  console.log(&#39;Current uid: &#39; + process.getuid());\n  try {\n    process.setuid(501);\n    console.log(&#39;New uid: &#39; + process.getuid());\n  }\n  catch (err) {\n    console.log(&#39;Failed to set uid: &#39; + err);\n  }\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.getgroups()",
          "type": "method",
          "name": "getgroups",
          "desc": "<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows,\nAndroid)\n-->\n\n<p>注意: この関数は POSIX プラットフォーム (すなわち、Windows と Android 以外)\nでのみ利用可能です。\n\n</p>\n<!--\nReturns an array with the supplementary group IDs. POSIX leaves it unspecified\nif the effective group ID is included but node.js ensures it always is.\n-->\n\n<p>補助グループ ID の配列を返します。\nPOSIX は実効グループ ID が含まれることを明示していませんが、\nNode.js では常にそれが含まれることを保証します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.setgroups(groups)",
          "type": "method",
          "name": "setgroups",
          "desc": "<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows,\nAndroid)\n-->\n\n<p>注意: この関数は POSIX プラットフォーム (すなわち、Windows と Android 以外)\nでのみ利用可能です。\n\n</p>\n<!--\nSets the supplementary group IDs. This is a privileged operation, meaning you\nneed to be root or have the CAP_SETGID capability.\n-->\n\n<p>補助グループ ID を設定します。\nこれは特権オペレーションであり、ルートであるか、または CAP_SETGID ケーパビリティを持つ必要があります。\n\n</p>\n<!--\nThe list can contain group IDs, group names or both.\n-->\n\n<p>リストはグループ ID、グループ名、または両方を含むことができます。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "groups"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.initgroups(user, extra_group)",
          "type": "method",
          "name": "initgroups",
          "desc": "<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows,\nAndroid)\n-->\n\n<p>注意: この関数は POSIX プラットフォーム (すなわち、Windows と Android 以外)\nでのみ利用可能です。\n\n</p>\n<!--\nReads /etc/group and initializes the group access list, using all groups of\nwhich the user is a member. This is a privileged operation, meaning you need\nto be root or have the CAP_SETGID capability.\n-->\n\n<p><code>/etc/group</code> を読み込んでグループアクセスリストを初期化し、\nuser がメンバーである全てのグループを使用します。\nこれは特権オペレーションであり、ルートであるか、または CAP_SETGID ケーパビリティを持つ必要があります。\n\n</p>\n<!--\n`user` is a user name or user ID. `extra_group` is a group name or group ID.\n-->\n\n<p><code>user</code> はユーザ名またはユーザ ID、\n<code>extra_group</code> はグループ名またはグループ ID です。\n\n</p>\n<!--\nSome care needs to be taken when dropping privileges. Example:\n-->\n\n<p>特権を落とす際は、いくつか注意すべき事があります。例:\n\n</p>\n<pre><code>console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "user"
                },
                {
                  "name": "extra_group"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.kill(pid, [signal])",
          "type": "method",
          "name": "kill",
          "desc": "<!--\nSend a signal to a process. `pid` is the process id and `signal` is the\nstring describing the signal to send.  Signal names are strings like\n'SIGINT' or 'SIGUSR1'.  If omitted, the signal will be 'SIGTERM'.\nSee kill(2) for more information.\n-->\n\n<p>プロセスにシグナルを送ります。\n<code>pid</code> はプロセス ID で <code>signal</code> は送信されるシグナルを文字列で記述したものです。\nシグナルの名前は &#39;SIGINT&#39; や &#39;SIGUSR1&#39; のような文字列です。\n省略すると、シグナルは &#39;SIGTERM&#39; となります。\n詳細は kill(2) を参照してください。\n\n</p>\n<!--\nNote that just because the name of this function is `process.kill`, it is\nreally just a signal sender, like the `kill` system call.  The signal sent\nmay do something other than kill the target process.\n-->\n\n<p>この関数の名前が <code>process.kill</code> であるとおり、\nこれは <code>kill</code> システムコールのように本当にシグナルを送信することに注意してください。\n対象のプロセスを殺すだけでなく、他のシグナルも送信されます。\n\n</p>\n<!--\nExample of sending a signal to yourself:\n-->\n\n<p>自身にシグナルを送信する例:\n\n</p>\n<pre><code>process.on(&#39;SIGHUP&#39;, function() {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(function() {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "pid"
                },
                {
                  "name": "signal",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.memoryUsage()",
          "type": "method",
          "name": "memoryUsage",
          "desc": "<!--\nReturns an object describing the memory usage of the Node process\nmeasured in bytes.\n-->\n\n<p>Node プロセスのメモリ使用状況をバイト単位で記述したオブジェクトを返します。\n\n</p>\n<pre><code>var util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(process.memoryUsage()));</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>このように生成されます:\n\n</p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }</code></pre>\n<!--\n`heapTotal` and `heapUsed` refer to V8's memory usage.\n-->\n\n<p><code>heapTotal</code> と <code>heapUsed</code> は V8 のメモリ使用状況を参照します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.nextTick(callback)",
          "type": "method",
          "name": "nextTick",
          "desc": "<!--\nOn the next loop around the event loop call this callback.\nThis is *not* a simple alias to `setTimeout(fn, 0)`, it's much more\nefficient.  It typically runs before any other I/O events fire, but there\nare some exceptions.\n-->\n\n<p>イベントループの次以降のループでコールバックを呼び出します。\nこれは <code>setTimeout(fn, 0)</code> の単純なエイリアス<em>ではなく</em>、\nはるかに効率的です。\nこれは通常他の I/O イベントが発生するよりも前に実行されますが、\nいくつかの例外があります。\n\n</p>\n<pre><code>process.nextTick(function() {\n  console.log(&#39;nextTick callback&#39;);\n});</code></pre>\n<!--\nThis is important in developing APIs where you want to give the user the\nchance to assign event handlers after an object has been constructed,\nbut before any I/O has occurred.\n-->\n\n<p>これは API の開発において、オブジェクトが構築された後で\nどんな I/O イベントが発生するよりも前に、\nイベントハンドラを割り当てるチャンスをユーザに与えたい場合に重要になります。\n\n</p>\n<pre><code>function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(function() {\n    this.startDoingStuff();\n  }.bind(this));\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.</code></pre>\n<!--\nIt is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:\n-->\n\n<p>API は 100% 同期的か、100% 非同期的かのどちらかであることがとても重要です。\nこの例を考えてみてください:\n\n</p>\n<pre><code>// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}</code></pre>\n<!--\nThis API is hazardous.  If you do this:\n-->\n\n<p>この API は危険です。こうすると:\n\n</p>\n<pre><code>maybeSync(true, function() {\n  foo();\n});\nbar();</code></pre>\n<!--\nthen it's not clear whether `foo()` or `bar()` will be called first.\n-->\n\n<p><code>foo()</code> と <code>bar()</code> のどちらが先に呼び出されるか不明瞭になります。\n\n</p>\n<!--\nThis approach is much better:\n-->\n\n<p>以下のアプローチはずっと優れています:\n\n</p>\n<pre><code>function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.umask([mask])",
          "type": "method",
          "name": "umask",
          "desc": "<!--\nSets or reads the process's file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if `mask` argument is\ngiven, otherwise returns the current mask.\n-->\n\n<p>プロセスのファイルモード作成マスクを設定または読み込みます。\n子プロセスは親プロセスからマスクを継承します。\n<code>mask</code> 引数が与えられると元のマスクが返され、そうでなければ現在のマスクが返されます。\n\n</p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&#39;Changed umask from: &#39; + oldmask.toString(8) +\n            &#39; to &#39; + newmask.toString(8));</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "mask",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.uptime()",
          "type": "method",
          "name": "uptime",
          "desc": "<!--\nNumber of seconds Node has been running.\n-->\n\n<p>Node が実行されてからの秒数です。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.hrtime()",
          "type": "method",
          "name": "hrtime",
          "desc": "<!--\nReturns the current high-resolution real time in a `[seconds, nanoseconds]`\ntuple Array. It is relative to an arbitrary time in the past. It is not\nrelated to the time of day and therefore not subject to clock drift. The\nprimary use is for measuring performance between intervals.\n\nYou may pass in the result of a previous call to `process.hrtime()` to get\na diff reading, useful for benchmarks and measuring intervals:\n-->\n\n<p>高分解能な現在時刻を <code>[seconds, nanoseconds]</code> の配列で返します。\n過去の任意の時間との比較することができます。\nそれは一日における時刻には関連が無いため、クロックドリフトに影響されません。\n主な用途はベンチマークやインターバルの測定です。\n\n</p>\n<p>以前に <code>process.hrtime()</code> を呼び出した結果を渡すことにより、\n差分を得ることができます。これはベンチマークやインターバルの測定に便利です。\n\n</p>\n<pre><code>var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(function() {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(&#39;benchmark took %d nanoseconds&#39;, diff[0] * 1e9 + diff[1]);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ]
    }
  ]
}
