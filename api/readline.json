{
  "source": "doc/api/readline.markdown",
  "modules": [
    {
      "textRaw": "Readline",
      "name": "readline",
      "desc": "<!--\nTo use this module, do `require('readline')`. Readline allows reading of a\nstream (such as STDIN) on a line-by-line basis.\n-->\n\n<p>このモジュールを使用するには、<code>require(&apos;readline&apos;)</code> をします。\nReadline はストリーム (たとえば標準入力) を行ごとに読み込むことを可能にします。\n\n</p>\n<!--\nNote that once you've invoked this module, your node program will not\nterminate until you've closed the interface, and the STDIN stream. Here's how\nto allow your program to gracefully terminate:\n-->\n\n<p>このモジュールを一度起動すると、このインタフェースと \n(標準入力などの) ストリームをクローズするまで node\nプログラムは終了しないことに注意してください。\nきれいに終了する方法を以下に示します:\n\n</p>\n<pre><code>var rl = require(&apos;readline&apos;);\n\nvar i = rl.createInterface(process.stdin, process.stdout, null);\ni.question(&quot;What do you think of node.js?&quot;, function(answer) {\n  // TODO: Log the answer in a database\n  console.log(&quot;Thank you for your valuable feedback.&quot;);\n\n  // These two lines together allow the program to terminate. Without\n  // them, it would run forever.\n  i.close();\n  process.stdin.destroy();\n});</code></pre>\n",
      "methods": [
        {
          "textRaw": "rl.createInterface(input, output, completer)",
          "type": "method",
          "name": "createInterface",
          "desc": "<!--\nTakes two streams and creates a readline interface. The `completer` function\nis used for autocompletion. When given a substring, it returns `[[substr1,\nsubstr2, ...], originalsubstring]`.\n-->\n\n<p>二つのストリームを受け取り、readline のインタフェースを作成します。\n<code>completer</code> 関数は補完のために使われます。\nそれは部分文字列を与えられると、<code>[[substr1, substr2, ...], originalsubstring]</code>\nを返します。\n\n</p>\n<!--\nAlso `completer` can be run in async mode if it accepts two arguments:\n-->\n\n<p><code>completer</code> が二つの引数を持つなら、それは非同期モードで実行されます。\n\n</p>\n<p>  function completer(linePartial, callback) {\n    callback(null, [[&apos;123&apos;], linePartial]);\n  }\n\n</p>\n<!--\n`createInterface` is commonly used with `process.stdin` and\n`process.stdout` in order to accept user input:\n-->\n\n<p><code>createInterface</code> には通常、ユーザからの入力を受け取るために <code>process.stdin</code> と\n<code>process.stdout</code> が使用されます。\n\n</p>\n<pre><code>var readline = require(&apos;readline&apos;),\n  rl = readline.createInterface(process.stdin, process.stdout);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "input"
                },
                {
                  "name": "output"
                },
                {
                  "name": "completer"
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Interface",
          "type": "class",
          "name": "Interface",
          "desc": "<!--\nThe class that represents a readline interface with a stdin and stdout\nstream.\n-->\n\n<p>標準入力と標準出力を持つ readline インタフェースを表現するクラス。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "rl.setPrompt(prompt, length)",
              "type": "method",
              "name": "setPrompt",
              "desc": "<!--\nSets the prompt, for example when you run `node` on the command line, you see\n`> `, which is node's prompt.\n-->\n\n<p>プロンプトを設定します。\nたとえば、コマンドプロンプトで <code>node</code> コマンドを実行すると、\n<code>&gt; </code> を見ることができます。これが Node のプロンプトです。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "prompt"
                    },
                    {
                      "name": "length"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rl.prompt()",
              "type": "method",
              "name": "prompt",
              "desc": "<!--\nReadies readline for input from the user, putting the current `setPrompt`\noptions on a new line, giving the user a new spot to write.\n-->\n\n<p>ユーザからの入力を 1 行読み込みます。\n現在の <code>setPrompt()</code> の値を新しい行に出力し、\nユーザに新しい入力エリアを与えます。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.question(query, callback)",
              "type": "method",
              "name": "question",
              "desc": "<!--\nPrepends the prompt with `query` and invokes `callback` with the user's\nresponse. Displays the query to the user, and then invokes `callback` with the\nuser's response after it has been typed.\n-->\n\n<p><code>query</code> をプロンプトとして、ユーザが応答すると <code>callback</code> を起動します。\nユーザに質問を表示し、ユーザが応答をタイプすると、<code>callback</code> が起動されます。\n\n</p>\n<!--\nExample usage:\n-->\n\n<p>使用例:\n\n</p>\n<pre><code>interface.question(&apos;What is your favorite food?&apos;, function(answer) {\n  console.log(&apos;Oh, so your favorite food is &apos; + answer);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "query"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rl.close()",
              "type": "method",
              "name": "close",
              "desc": "<!--\n  Closes tty.\n-->\n\n<p>tty をクローズします。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.pause()",
              "type": "method",
              "name": "pause",
              "desc": "<!--\n  Pauses tty.\n-->\n\n<p>tty からの入力を中断します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.resume()",
              "type": "method",
              "name": "resume",
              "desc": "<!--\n  Resumes tty.\n-->\n\n<p>tty からの入力を再開します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.write()",
              "type": "method",
              "name": "write",
              "desc": "<!--\n  Writes to tty.\n-->\n\n<p>tty へ出力します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "events": [
            {
              "textRaw": "Event: 'line'",
              "type": "event",
              "name": "line",
              "desc": "<p><code>function (line) {}</code>\n\n</p>\n<!--\nEmitted whenever the `in` stream receives a `\\n`, usually received when the\nuser hits enter, or return. This is a good hook to listen for user input.\n-->\n\n<p><code>in</code> ストリームから <code>\\n</code> を読み込むごとに生成されます。\n通常、ユーザがエンターまたはリターンを打つごとに受信します。\nこれはユーザ入浴のよいフックとなります。\n\n</p>\n<!--\nExample of listening for `line`:\n-->\n\n<p><code>line</code> を監視する例:\n\n</p>\n<pre><code>rl.on(&apos;line&apos;, function (cmd) {\n  console.log(&apos;You just typed: &apos;+cmd);\n});</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted whenever the `in` stream receives a `^C` or `^D`, respectively known\nas `SIGINT` and `EOT`. This is a good way to know the user is finished using\nyour program.\n-->\n\n<p><code>in</code> ストリームから <code>^C</code> または <code>^D</code> を受信すると生成されます。\nそれぞれ <code>SIGINT</code> および <code>EOT</code> として知られています。\nこれはユーザがプログラムの使用を終わらせようとしていることを知るよい方法です。\n\n</p>\n<!--\nExample of listening for `close`, and exiting the program afterward:\n-->\n\n<p><code>close</code> を監視し、その後プログラムを終了する例:\n\n</p>\n<pre><code>rl.on(&apos;close&apos;, function() {\n  console.log(&apos;goodbye!&apos;);\n  process.exit(0);\n});</code></pre>\n<!--\nHere's an example of how to use all these together to craft a tiny command\nline interface:\n-->\n\n<p>全てを一緒に使う、小さなコマンドラインインタフェースの例:\n\n</p>\n<pre><code>var readline = require(&apos;readline&apos;),\n  rl = readline.createInterface(process.stdin, process.stdout),\n  prefix = &apos;OHAI&gt; &apos;;\n\nrl.on(&apos;line&apos;, function(line) {\n  switch(line.trim()) {\n    case &apos;hello&apos;:\n      console.log(&apos;world!&apos;);\n  break;\n    default:\n      console.log(&apos;Say what? I might have heard `&apos; + line.trim() + &apos;`&apos;);\n      break;\n  }\n  rl.setPrompt(prefix, prefix.length);\n  rl.prompt();\n}).on(&apos;close&apos;, function() {\n  console.log(&apos;Have a great day!&apos;);\n  process.exit(0);\n});\nconsole.log(prefix + &apos;Good to see you. Try typing stuff.&apos;);\nrl.setPrompt(prefix, prefix.length);\nrl.prompt();</code></pre>\n<!--\nTake a look at this slightly more complicated\n[example](https://gist.github.com/901104), and\n[http-console](https://github.com/cloudhead/http-console) for a real-life use\ncase.\n-->\n\n<p>より複雑な <a href=\"https://gist.github.com/901104\">例</a> や、実践的なユースケースとして\n<a href=\"https://github.com/cloudhead/http-console\">http-console</a>\nを見ることが出来ます。\n</p>\n",
              "params": []
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Readline"
    }
  ]
}
