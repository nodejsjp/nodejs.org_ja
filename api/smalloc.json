{
  "source": "doc/api/smalloc.markdown",
  "modules": [
    {
      "textRaw": "Smalloc",
      "name": "smalloc",
      "stability": 1,
      "stabilityText": "Experimental",
      "methods": [
        {
          "textRaw": "smalloc.alloc(length[, receiver][, type])",
          "type": "method",
          "name": "alloc",
          "* `length` {Number} `<": "smalloc.kMaxLength`\n* `receiver` {Object}, Optional, Default: `new Object`\n* `type` {Enum}, Optional, Default: `Uint8`",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`length` {Number} `<= smalloc.kMaxLength` ",
                  "name": "length",
                  "type": "Number",
                  "desc": "`<= smalloc.kMaxLength`"
                },
                {
                  "textRaw": "`receiver` {Object} オプション、デフォルトは `new Object` ",
                  "name": "receiver",
                  "type": "Object",
                  "desc": "オプション、デフォルトは `new Object`"
                },
                {
                  "textRaw": "`type` {Enum} オプション、デフォルトは `Uint8` ",
                  "name": "type",
                  "type": "Enum",
                  "desc": "オプション、デフォルトは `Uint8`"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "length["
                },
                {
                  "name": "receiver["
                },
                {
                  "name": "type"
                }
              ]
            }
          ],
          "desc": "<!--\nReturns `receiver` with allocated external array data. If no `receiver` is\npassed then a new Object will be created and returned.\n-->\n\n<p>外部の配列データが割り当てられた <code>receiver</code> を返します。\n<code>receiver</code> が渡されなかった場合は新しいオブジェクトが作成されて返されます。\n\n</p>\n<!--\nBuffers are backed by a simple allocator that only handles the assignation of\nexternal raw memory. Smalloc exposes that functionality.\n-->\n\n<p>バッファは、外部の生のメモリを割り当てるだけの単純なアロケータに\n支えられています。Smallocはその機能を公開します。\n\n</p>\n<!--\nThis can be used to create your own Buffer-like classes. No other properties are\nset, so the user will need to keep track of other necessary information (e.g.\n`length` of the allocation).\n-->\n\n<p>これはバッファのような独自クラスの作成に用いることができます。\n他のどんなプロパティも設定されないので、利用者は必要な情報\n(例えば割り当てた長さの <code>length</code>) を追跡できるようにする必要があります。\n\n</p>\n<pre><code>function SimpleData(n) {\n  this.length = n;\n  smalloc.alloc(this.length, this);\n}\n\nSimpleData.prototype = { /* ... */ };</code></pre>\n<!--\nIt only checks if the `receiver` is an Object, and also not an Array. Because of\nthis it is possible to allocate external array data to more than a plain Object.\n-->\n\n<p><code>receiver</code> は配列以外のオブジェクトであることがチェックされるだけです。\nこのため、外部の配列データをプレーンなオブジェクト以上のものに\n割り当てることができます。\n\n</p>\n<pre><code>function allocMe() { }\nsmalloc.alloc(3, allocMe);\n\n// { [Function allocMe] &#39;0&#39;: 0, &#39;1&#39;: 0, &#39;2&#39;: 0 }</code></pre>\n<!--\nv8 does not support allocating external array data to an Array, and if passed\nwill throw.\n-->\n\n<p>v8は外部の配列データを Array オブジェクトに割り当てることを\nサポートしていないため、もし渡すと例外がスローされます。\n\n</p>\n<!--\nIt's possible is to specify the type of external array data you would like. All\npossible options are listed in `smalloc.Types`. Example usage:\n-->\n\n<p>外部の配列データの型を指定することができます。\n全ての可能なオプションは <code>smalloc.Types</code> に列挙されています。使用例:\n\n</p>\n<pre><code>var doubleArr = smalloc.alloc(3, smalloc.Types.Double);\n\nfor (var i = 0; i &lt; 3; i++)\n  doubleArr = i / 10;\n\n// { &#39;0&#39;: 0, &#39;1&#39;: 0.1, &#39;2&#39;: 0.2 }</code></pre>\n"
        },
        {
          "textRaw": "smalloc.dispose(obj)",
          "type": "method",
          "name": "dispose",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`obj` Object ",
                  "name": "obj",
                  "desc": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "obj"
                }
              ]
            }
          ],
          "desc": "<!--\nFree memory that has been allocated to an object via `smalloc.alloc`.\n-->\n\n<p><code>smalloc.alloc()</code> によってオブジェクトに割り当てられたメモリを解放します。\n\n</p>\n<pre><code>var a = {};\nsmalloc.alloc(3, a);\n\n// { &#39;0&#39;: 0, &#39;1&#39;: 0, &#39;2&#39;: 0 }\n\nsmalloc.dispose(a);\n\n// {}</code></pre>\n<!--\nThis is useful to reduce strain on the garbage collector, but developers must be\ncareful. Cryptic errors may arise in applications that are difficult to trace.\n-->\n\n<p>これはガーベッジコレクションの負荷を軽減しますが、開発者は注意が必要です。\n不可解なエラーが追跡の難しいアプリケーションで発生するかもしれません。\n\n</p>\n<pre><code>var a = smalloc.alloc(4);\nvar b = smalloc.alloc(4);\n\n// perform this somewhere along the line\nsmalloc.dispose(b);\n\n// now trying to copy some data out\nsmalloc.copyOnto(b, 2, a, 0, 2);\n\n// now results in:\n// Error: source has no external array data</code></pre>\n<!--\n`dispose()` does not support Buffers, and will throw if passed.\n-->\n\n<p><code>dispose()</code> は <code>Buffer</code> をサポートしません。もし渡されると例外をスローします。\n\n</p>\n"
        }
      ],
      "modules": [
        {
          "textRaw": "smalloc.copyOnto(source, sourceStart, dest, destStart, copyLength);",
          "name": "smalloc.copyonto(source,_sourcestart,_dest,_deststart,_copylength);",
          "desc": "<!--\n* `source` Object with external array allocation\n* `sourceStart` Position to begin copying from\n* `dest` Object with external array allocation\n* `destStart` Position to begin copying onto\n* `copyLength` Length of copy\n-->\n\n<ul>\n<li><code>source</code> 外部の配列が割り当てられたオブジェクト</li>\n<li><code>sourceStart</code> コピーを開始する位置</li>\n<li><code>dest</code> 外部の配列が割り当てられたオブジェクト</li>\n<li><code>destStart</code> コピーを開始する位置</li>\n<li><code>copyLength</code> コピーする長さ</li>\n</ul>\n<!--\nCopy memory from one external array allocation to another. No arguments are\noptional, and any violation will throw.\n-->\n\n<p>外部の配列に割り当てられたメモリの一つから別のメモリへコピーします。\n全ての引数は必須で、どんな違反でも例外がスローされます。\n\n</p>\n<pre><code>var a = smalloc.alloc(4);\nvar b = smalloc.alloc(4);\n\nfor (var i = 0; i &lt; 4; i++) {\n  a[i] = i;\n  b[i] = i * 2;\n}\n\n// { &#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3 }\n// { &#39;0&#39;: 0, &#39;1&#39;: 2, &#39;2&#39;: 4, &#39;3&#39;: 6 }\n\nsmalloc.copyOnto(b, 2, a, 0, 2);\n\n// { &#39;0&#39;: 4, &#39;1&#39;: 6, &#39;2&#39;: 2, &#39;3&#39;: 3 }</code></pre>\n<!--\n`copyOnto` automatically detects the length of the allocation internally, so no\nneed to set any additional properties for this to work.\n-->\n\n<p><code>copyOnto()</code> は内部で割り当てられた長さを自動的に検出するので、\nこれが動作するために追加のプロパティを設定する必要はありません。\n\n</p>\n",
          "type": "module",
          "displayName": "smalloc.copyOnto(source, sourceStart, dest, destStart, copyLength);"
        }
      ],
      "properties": [
        {
          "textRaw": "smalloc.kMaxLength",
          "name": "kMaxLength",
          "desc": "<!--\nSize of maximum allocation. This is also applicable to Buffer creation.\n-->\n\n<p>割り当てられる最大長です。\nこれは <code>Buffer</code> を作成する際にも適用されます。\n\n</p>\n"
        },
        {
          "textRaw": "smalloc.Types",
          "name": "Types",
          "desc": "<!--\nEnum of possible external array types. Contains:\n-->\n\n<p>外部の配列で可能な型の列挙です。以下を含みます:\n\n</p>\n<ul>\n<li><code>Int8</code></li>\n<li><code>Uint8</code></li>\n<li><code>Int16</code></li>\n<li><code>Uint16</code></li>\n<li><code>Int32</code></li>\n<li><code>Uint32</code></li>\n<li><code>Float</code></li>\n<li><code>Double</code></li>\n<li><code>Uint8Clamped</code></li>\n</ul>\n"
        }
      ],
      "type": "module",
      "displayName": "Smalloc"
    }
  ]
}
