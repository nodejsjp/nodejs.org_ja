{
  "source": "doc/api/dns.markdown",
  "modules": [
    {
      "textRaw": "DNS",
      "name": "dns",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nUse `require('dns')` to access this module. All methods in the dns module\nuse C-Ares except for `dns.lookup` which uses `getaddrinfo(3)` in a thread\npool. C-Ares is much faster than `getaddrinfo` but the system resolver is\nmore constant with how other programs operate. When a user does\n`net.connect(80, 'google.com')` or `http.get({ host: 'google.com' })` the\n`dns.lookup` method is used. Users who need to do a large number of look ups\nquickly should use the methods that go through C-Ares.\n-->\n\n<p>このモジュールにアクセスするには <code>require(&apos;dns&apos;)</code> を使用します。\ndns モジュールの全てのメソッドは C-Ares を使用します。\nただし、<code>dns.lookup</code> はスレッドプール上で <code>getaddrinfo(3)</code> を使用します。\nC-Ares は <code>getaddrinfo</code> よりずっと速いものの、\n他のシステムと連携するにはシステムリゾルバの方が安定しています。\nユーザが <code>net.connect(80, &apos;google.com&apos;)</code> または\n<code>http.get({ host: &apos;google.com&apos; })</code> を行った時、<code>dns.lookup</code>\nメソッドが使われます。\n多数のルックアップを素早く実行したいユーザは、\nC-Ares を呼び出すメソッドを使用すべきです。\n\n</p>\n<!--\nHere is an example which resolves `'www.google.com'` then reverse\nresolves the IP addresses which are returned.\n-->\n\n<p>これは <code>&apos;www.google.com&apos;</code> を解決して、返された IP アドレスを逆引きで解決する例です。\n\n</p>\n<pre><code>var dns = require(&apos;dns&apos;);\n\ndns.resolve4(&apos;www.google.com&apos;, function (err, addresses) {\n  if (err) throw err;\n\n  console.log(&apos;addresses: &apos; + JSON.stringify(addresses));\n\n  addresses.forEach(function (a) {\n    dns.reverse(a, function (err, domains) {\n      if (err) {\n        console.log(&apos;reverse for &apos; + a + &apos; failed: &apos; +\n          err.message);\n      } else {\n        console.log(&apos;reverse for &apos; + a + &apos;: &apos; +\n          JSON.stringify(domains));\n      }\n    });\n  });\n});</code></pre>\n",
      "methods": [
        {
          "textRaw": "dns.lookup(domain, [family], callback)",
          "type": "method",
          "name": "lookup",
          "desc": "<!--\nResolves a domain (e.g. `'google.com'`) into the first found A (IPv4) or\nAAAA (IPv6) record.\nThe `family` can be the integer `4` or `6`. Defaults to `null` that indicates\nboth Ip v4 and v6 address family.\n-->\n\n<p>ドメイン (例 <code>&apos;google.com&apos;</code>) を解決して最初に見つかった\nA (IPv4) または AAAA (IPv6) レコードにします。\n<code>family</code> は整数の <code>4</code> または <code>6</code> を指定することができます。\nデフォルトは <code>null</code> で、IP v4 と v6 の両方をアドレスファミリーを意味します。\n\n</p>\n<!--\nThe callback has arguments `(err, address, family)`.  The `address` argument\nis a string representation of a IP v4 or v6 address. The `family` argument\nis either the integer 4 or 6 and denotes the family of `address` (not\nnecessarily the value initially passed to `lookup`).\n-->\n\n<p>コールバックは引数 <code>(err, address, family)</code> を持ちます。\n<code>address</code> 引数は IP v4 または v6 アドレスを表現する文字列です。\n<code>family</code> 引数は整数の 4 または 6 で、<code>address</code> のファミリーを意味します\n(この値は必ずしも最初に <code>lookup</code> に渡す必要はありません)。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "family",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolve(domain, [rrtype], callback)",
          "type": "method",
          "name": "resolve",
          "desc": "<!--\nResolves a domain (e.g. `'google.com'`) into an array of the record types\nspecified by rrtype. Valid rrtypes are `'A'` (IPV4 addresses, default),\n`'AAAA'` (IPV6 addresses), `'MX'` (mail exchange records), `'TXT'` (text\nrecords), `'SRV'` (SRV records), `'PTR'` (used for reverse IP lookups),\n`'NS'` (name server records) and `'CNAME'` (canonical name records).\n-->\n\n<p>ドメイン (例 <code>&apos;google.com&apos;</code>) を解決して <code>rrtype</code> で指定されたレコードタイプの配列にします。\n妥当な <code>rrtype</code> は <code>&apos;A&apos;</code> (IPV4アドレス)、<code>&apos;AAAA&apos;</code> (IPV6アドレス)、\n<code>&apos;MX&apos;</code> (mail exchangeレコード), <code>&apos;TXT&apos;</code> (テキストレコード)、\n<code>&apos;SRV&apos;</code> (SRVレコード)、<code>&apos;PTR&apos;</code> (IP を逆引きでルックアップするために使われる)、\n<code>&apos;NS&apos;</code> (ネームサーバレコード)、そして <code>&apos;CNAME&apos;</code> (別名レコード) です。\n\n</p>\n<!--\nThe callback has arguments `(err, addresses)`.  The type of each item\nin `addresses` is determined by the record type, and described in the\ndocumentation for the corresponding lookup methods below.\n-->\n\n<p>コールバックは引数 <code>(err, addresses)</code> を持ちます。\n<code>addresses</code> の各要素の種類はレコードの種類によって決まり、\n対応する後述のルックアップメソッドで記述されます。\n\n</p>\n<!--\nOn error, `err` would be an instanceof `Error` object, where `err.errno` is\none of the error codes listed below and `err.message` is a string describing\nthe error in English.\n-->\n\n<p>エラー発生時、<code>err</code> は <code>Error</code> オブジェクトのインスタンスであり、\n<code>err.errno</code> は後述するエラーコードのいずれか、\n<code>err.message</code> はエラーを英語で説明する文字列となります。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "rrtype",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolve4(domain, callback)",
          "type": "method",
          "name": "resolve4",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for IPv4 queries (`A` records).\n`addresses` is an array of IPv4 addresses (e.g.\n`['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、IPv4 アドレス (<code>A</code> レコード) だけを問い合わせます。\n<code>addresses</code> は IPv4 アドレスの配列です (例<br />\n<code>[&apos;74.125.79.104&apos;, &apos;74.125.79.105&apos;, &apos;74.125.79.106&apos;]</code>)\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolve6(domain, callback)",
          "type": "method",
          "name": "resolve6",
          "desc": "<!--\nThe same as `dns.resolve4()` except for IPv6 queries (an `AAAA` query).\n-->\n\n<p>IPv6 (<code>AAAA</code> レコード) を問い合わせることを除いて <code>dns.resolve4()</code> と同じです。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveMx(domain, callback)",
          "type": "method",
          "name": "resolveMx",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for mail exchange queries (`MX` records).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、mail exchange (<code>MX</code> レコード) だけを問い合わせます。\n\n</p>\n<!--\n`addresses` is an array of MX records, each with a priority and an exchange\nattribute (e.g. `[{'priority': 10, 'exchange': 'mx.example.com'},...]`).\n-->\n\n<p><code>addresses</code> は MX レコードの配列で、それぞれは priority と exchange の属性を持ちます\n(例 <code>[{&apos;priority&apos;: 10, &apos;exchange&apos;: &apos;mx.example.com&apos;},...]</code>)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveTxt(domain, callback)",
          "type": "method",
          "name": "resolveTxt",
          "The same as `dns.resolve()`, but only for text queries (`TXT` records).\n`addresses` is an array of the text records available for `domain` (e.g.,\n`['v": "spf1 ip4:0.0.0.0 ~all']`).",
          "desc": "<p><code>dns.resolve()</code> と同じですが、テキスト (<code>TXT</code> レコード) だけを問い合わせます。\n<code>addresses</code> は <code>domain</code> で利用可能なテキストレコードの配列です。\n(例、<code>[&apos;v=spf1 ip4:0.0.0.0 ~all&apos;]</code>)\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveSrv(domain, callback)",
          "type": "method",
          "name": "resolveSrv",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for service records (`SRV` records).\n`addresses` is an array of the SRV records available for `domain`. Properties\nof SRV records are priority, weight, port, and name (e.g.,\n`[{'priority': 10, {'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、サービスレコード (<code>SRV</code> レコード) だけを問い合わせます。\n<code>addresses</code> は <code>domain</code> で利用可能な SRV レコードの配列です。\nSRV レコードのプロパティは priority、weight、port、そして name です\n(例 <code>[{&apos;priority&apos;: 10, {&apos;weight&apos;: 5, &apos;port&apos;: 21223, &apos;name&apos;: &apos;service.example.com&apos;}, ...]</code>)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.reverse(ip, callback)",
          "type": "method",
          "name": "reverse",
          "desc": "<!--\nReverse resolves an ip address to an array of domain names.\n-->\n\n<p>IP アドレスからドメイン名の配列へ逆引きで解決します。\n\n</p>\n<!--\nThe callback has arguments `(err, domains)`.\n-->\n\n<p>コールバックは引数 <code>(err, domains)</code> を持ちます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "ip"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveNs(domain, callback)",
          "type": "method",
          "name": "resolveNs",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for name server records (`NS` records).\n`addresses` is an array of the name server records available for `domain`\n(e.g., `['ns1.example.com', 'ns2.example.com']`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、ネームサーバレコード (<code>NS</code> レコード) \nだけを問い合わせます。\n<code>address</code> は <code>domain</code> で利用可能なネームサーバレコードの配列です\n(例 <code>[&apos;ns1.example.com&apos;, &apos;ns2.example.com&apos;]</code>)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveCname(domain, callback)",
          "type": "method",
          "name": "resolveCname",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for canonical name records (`CNAME`\nrecords). `addresses` is an array of the canonical name records available for\n`domain` (e.g., `['bar.example.com']`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、別名レコード (<code>CNAME</code> レコード) \nだけを問い合わせます。\n<code>address</code> は <code>domain</code> で利用可能な別名レコードの配列です\n<code>domain</code> (e.g., <code>[&apos;bar.example.com&apos;]</code>)。\n\n</p>\n<!--\nIf there an an error, `err` will be non-null and an instanceof the Error\nobject.\n-->\n\n<p>エラーがあった場合、<code>err</code> は非 null で Error オブジェクトのインスタンスとなります。\n\n</p>\n<!--\nEach DNS query can return an error code.\n-->\n\n<p>どの DNS 問い合わせもエラーコードを返せます。\n\n</p>\n<!--\n- `dns.TEMPFAIL`: timeout, SERVFAIL or similar.\n- `dns.PROTOCOL`: got garbled reply.\n- `dns.NXDOMAIN`: domain does not exists.\n- `dns.NODATA`: domain exists but no data of reqd type.\n- `dns.NOMEM`: out of memory while processing.\n- `dns.BADQUERY`: the query is malformed.\n-->\n\n<ul>\n<li><code>dns.TEMPFAIL</code>: タイムアウト、SERVFAIL あるいは同様のもの。</li>\n<li><code>dns.PROTOCOL</code>: 応答が不正。</li>\n<li><code>dns.NXDOMAIN</code>: ドメインが存在しない。</li>\n<li><code>dns.NODATA</code>: ドメインは存在するが、要求された種類のデータがない。</li>\n<li><code>dns.NOMEM</code>: 処理中にメモリが不足。</li>\n<li><code>dns.BADQUERY</code>: 問い合わせが不正な形式。</li>\n</ul>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "DNS"
    }
  ]
}
