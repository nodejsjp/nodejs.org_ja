{
  "source": "doc/api/zlib.markdown",
  "modules": [
    {
      "textRaw": "Zlib",
      "name": "zlib",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nYou can access this module with:\n-->\n\n<p>このモジュールは次のようにアクセスできます。\n\n</p>\n<pre><code>var zlib = require(&apos;zlib&apos;);</code></pre>\n<!--\nThis provides bindings to Gzip/Gunzip, Deflate/Inflate, and\nDeflateRaw/InflateRaw classes.  Each class takes the same options, and\nis a readable/writable Stream.\n-->\n\n<p>これは Gzip/Gunzip、Deflate/Inflate、そして DeflateRaw/InflateRaw\nへバインディングするクラスを提供します。\nどのクラスも同じオプションを持つ、読み込みと書き込みが可能なストリームです。\n\n</p>\n<h2>Examples</h2>\n<!--\nCompressing or decompressing a file can be done by piping an\nfs.ReadStream into a zlib stream, then into an fs.WriteStream.\n-->\n\n<p>ファイルを圧縮および解凍するには、fs.ReadStream から zlib へ、\nそして fs.WriteStream へパイプをつなぐだけです。\n\n</p>\n<pre><code>var gzip = zlib.createGzip();\nvar fs = require(&apos;fs&apos;);\nvar inp = fs.createReadStream(&apos;input.txt&apos;);\nvar out = fs.createWriteStream(&apos;input.txt.gz&apos;);\n\ninp.pipe(gzip).pipe(out);</code></pre>\n<!--\nCompressing or decompressing data in one step can be done by using\nthe convenience methods.\n-->\n\n<p>データの圧縮または解凍は <a href=\"#convenience_Methods\">簡易メソッド</a>\nを使うことにより、ワンステップで行うことができます。\n\n</p>\n<pre><code>var input = &apos;.................................&apos;;\nzlib.deflate(input, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString(&apos;base64&apos;));\n  }\n});\n\nvar buffer = new Buffer(&apos;eJzT0yMAAGTvBe8=&apos;, &apos;base64&apos;);\nzlib.unzip(buffer, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString());\n  }\n});</code></pre>\n<!--\nTo use this module in an HTTP client or server, use the\n[accept-encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3)\non requests, and the\n[content-encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11)\nheader on responses.\n\n**Note: these examples are drastically simplified to show\nthe basic concept.**  Zlib encoding can be expensive, and the results\nought to be cached.  See [Memory Usage Tuning](#memory_Usage_Tuning)\nbelow for more information on the speed/memory/compression\ntradeoffs involved in zlib usage.\n-->\n\n<p>このモジュールを HTTP クライアントとサーバで使うには、リクエストに\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\">accept-encoding</a>\nヘッダを、レスポンスに\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">content-encoding</a>\nヘッダを使用します。\n\n</p>\n<p><strong>注意:\nこれらのサンプルは基本コンセプトを見せるためにとても単純化されています。</strong>\nZlib エンコーディングは高価なので、結果はキャッシュされるべきです。\nzlibの使い方に関する速度／メモリ／圧縮率のトレードオフについてより詳しくは、\n後述の <a href=\"#memory_Usage_Tuning\">Memory Usage Tuning</a> を参照してください。\n\n</p>\n<pre><code>// client request example\nvar zlib = require(&apos;zlib&apos;);\nvar http = require(&apos;http&apos;);\nvar fs = require(&apos;fs&apos;);\nvar request = http.get({ host: &apos;izs.me&apos;,\n                         path: &apos;/&apos;,\n                         port: 80,\n                         headers: { &apos;accept-encoding&apos;: &apos;gzip,deflate&apos; } });\nrequest.on(&apos;response&apos;, function(response) {\n  var output = fs.createWriteStream(&apos;izs.me_index.html&apos;);\n\n  switch (response.headers[&apos;content-encoding&apos;]) {\n    // or, just use zlib.createUnzip() to handle both cases\n    case &apos;gzip&apos;:\n      response.pipe(zlib.createGunzip()).pipe(output);\n      break;\n    case &apos;deflate&apos;:\n      response.pipe(zlib.createInflate()).pipe(output);\n      break;\n    default:\n      response.pipe(output);\n      break;\n  }\n});\n\n// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nvar zlib = require(&apos;zlib&apos;);\nvar http = require(&apos;http&apos;);\nvar fs = require(&apos;fs&apos;);\nhttp.createServer(function(request, response) {\n  var raw = fs.createReadStream(&apos;index.html&apos;);\n  var acceptEncoding = request.headers[&apos;accept-encoding&apos;];\n  if (!acceptEncoding) {\n    acceptEncoding = &apos;&apos;;\n  }\n\n  // Note: this is not a conformant accept-encoding parser.\n  // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (acceptEncoding.match(/\\bdeflate\\b/)) {\n    response.writeHead(200, { &apos;content-encoding&apos;: &apos;deflate&apos; });\n    raw.pipe(zlib.createDeflate()).pipe(response);\n  } else if (acceptEncoding.match(/\\bgzip\\b/)) {\n    response.writeHead(200, { &apos;content-encoding&apos;: &apos;gzip&apos; });\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    response.writeHead(200, {});\n    raw.pipe(response);\n  }\n}).listen(1337);</code></pre>\n",
      "miscs": [
        {
          "textRaw": "Constants",
          "name": "Constants",
          "type": "misc",
          "desc": "<!--\nAll of the constants defined in zlib.h are also defined on\n`require('zlib')`.  They are described in more detail in the zlib\ndocumentation.  See <http://zlib.net/manual.html#Constants>\nfor more details.\n-->\n\n<p>zlib.h に定義された定数は <code>require(&apos;zlib&apos;)</code> でも定義されます。\nそれらは zlib のドキュメントでより詳しく説明されます。\n詳細は <a href=\"http://zlib.net/manual.html#Constants\">http://zlib.net/manual.html#Constants</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Convenience Methods",
          "name": "Convenience Methods",
          "type": "misc",
          "desc": "<!--\nAll of these take a string or buffer as the first argument, and call the\nsupplied callback with `callback(error, result)`.  The\ncompression/decompression engine is created using the default settings\nin all convenience methods.  To supply different options, use the\nzlib classes directly.\n-->\n\n<p>これらは全て第 1 引数として文字列またはバッファを受け取り、\n与えられたコールバック <code>callback(error, result)</code> を呼び出します。\n全ての簡易メソッドで、圧縮・解凍エンジンはデフォルトの設定で作成されます。\n異なったオプションを与えるには、zlib のクラスを直接使用してください。\n\n</p>\n"
        },
        {
          "textRaw": "Options",
          "name": "Options",
          "type": "misc",
          "desc": "<!--\nEach class takes an options object.  All options are optional.  (The\nconvenience methods use the default settings for all options.)\n\nNote that some options are only\nrelevant when compressing, and are ignored by the decompression classes.\n\n* chunkSize (default: 16*1024)\n* windowBits\n* level (compression only)\n* memLevel (compression only)\n* strategy (compression only)\n* dictionary (deflate/inflate only, empty dictionary by default)\n\nSee the description of `deflateInit2` and `inflateInit2` at\n<http://zlib.net/manual.html#Advanced> for more information on these.\n-->\n\n<p>どのクラスもオプションオブジェクトを受け取ります。\n全てのオプションは任意です\n(簡易メソッドは全てのオプションでデフォルト値を使用します)。\n\n</p>\n<p>いくつかのオプションは圧縮にだけ関連し、\n解凍するクラスでは無視されることに注意してください。\n\n</p>\n<ul>\n<li>chunkSize (デフォルト: 16*1024)</li>\n<li>windowBits</li>\n<li>level (圧縮のみ)</li>\n<li>memLevel (圧縮のみ)</li>\n<li>strategy (圧縮のみ)</li>\n<li>dictionary (deflate/inflate のみ、デフォルトは空の辞書です)</li>\n</ul>\n<p>これらの詳細は <a href=\"http://zlib.net/manual.html#Advanced\">http://zlib.net/manual.html#Advanced</a> の\n<code>deflateInit2</code> および <code>inflateInit2</code> の説明を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Memory Usage Tuning",
          "name": "Memory Usage Tuning",
          "type": "misc",
          "desc": "<!--\nFrom `zlib/zconf.h`, modified to node's usage:\n\nThe memory requirements for deflate are (in bytes):\n-->\n\n<p>node は <code>zlib/zconf.h</code> を変更して使っています:\n\n</p>\n<pre><code>(1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))</code></pre>\n<p>すなわち: windowBits = 15 の場合 128K + \nmemLevel = 8 の場合 128K (デフォルト値) に加えて数キロバイトが\n小さなオブジェクトのために使われます。\n\n</p>\n<p>たとえば、デフォルトで要求されるメモリを 256K から 128K へ縮小したければ、\n次のオプションを設定します:\n\n</p>\n<pre><code>{ windowBits: 14, memLevel: 7 }</code></pre>\n<!--\nOf course this will generally degrade compression (there's no free lunch).\n\nThe memory requirements for inflate are (in bytes)\n-->\n\n<p>もちろん、これは圧縮率を悪化します (ただ飯ははありません)。\n\n\n</p>\n<pre><code>1 &lt;&lt; windowBits</code></pre>\n<p>この場合、windowBits=15 (デフォルト値) の場合 32K に加えて数キロバイトが\n小さなオブジェクトのために使われます。\n\n</p>\n<p>これは、デフォルト値 16K の <code>chunkSize</code> で指定されたサイズの内部バッファに加えられます。\n\n</p>\n<p>zlib の圧縮速度は <code>level</code> の設定で劇的に変化します\n高レベルにするとより圧縮できますが、完了までの時間が長くなります。\n低レベルにするとあまり圧縮されませんが、高速になります。\n\n</p>\n<p>一般的に、メモリをより多く使うオプションにすると node が zlib を呼び出す回数が\n少なくなることを意味し、\n一回の <code>write</code> 操作でより多くのデータを処理できることになります。\nこれはあスピードに影響するもう一つのファクタで、メモリ使用量を犠牲にします。\n</p>\n",
          "that is: 128K for windowBits": "15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.\n\nFor example, if you want to reduce\nthe default memory requirements from 256K to 128K, set the options to:",
          "that is, 32K for windowBits": "15 (default value) plus a few kilobytes\nfor small objects.\n\nThis is in addition to a single internal output slab buffer of size\n`chunkSize`, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the\n`level` setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.\n\nIn general, greater memory usage options will mean that node has to make\nfewer calls to zlib, since it'll be able to process more data in a\nsingle `write` operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage."
        }
      ],
      "methods": [
        {
          "textRaw": "zlib.createGzip([options])",
          "type": "method",
          "name": "createGzip",
          "desc": "<!--\nReturns a new [Gzip](#zlib.Gzip) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Gzip\">Gzip</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createGunzip([options])",
          "type": "method",
          "name": "createGunzip",
          "desc": "<!--\nReturns a new [Gunzip](#zlib.Gunzip) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Gunzip\">Gunzip</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createDeflate([options])",
          "type": "method",
          "name": "createDeflate",
          "desc": "<!--\nReturns a new [Deflate](#zlib.Deflate) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Deflate\">Deflate</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createInflate([options])",
          "type": "method",
          "name": "createInflate",
          "desc": "<!--\nReturns a new [Inflate](#zlib.Inflate) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Inflate\">Inflate</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createDeflateRaw([options])",
          "type": "method",
          "name": "createDeflateRaw",
          "desc": "<!--\nReturns a new [DeflateRaw](#zlib.DeflateRaw) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.DeflateRaw\">DeflateRaw</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createInflateRaw([options])",
          "type": "method",
          "name": "createInflateRaw",
          "desc": "<!--\nReturns a new [InflateRaw](#zlib.InflateRaw) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.InflateRaw\">InflateRaw</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createUnzip([options])",
          "type": "method",
          "name": "createUnzip",
          "desc": "<!--\nReturns a new [Unzip](#zlib.Unzip) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Unzip\">Unzip</a>\nオブジェクトを返します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.deflate(buf, callback)",
          "type": "method",
          "name": "deflate",
          "desc": "<!--\nCompress a string with Deflate.\n-->\n\n<p>Deflate で文字列を圧縮します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.deflateRaw(buf, callback)",
          "type": "method",
          "name": "deflateRaw",
          "desc": "<!--\nCompress a string with DeflateRaw.\n-->\n\n<p>DeflateRaw で文字列を圧縮します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.gzip(buf, callback)",
          "type": "method",
          "name": "gzip",
          "desc": "<!--\nCompress a string with Gzip.\n-->\n\n<p>Gzip で文字列を圧縮します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.gunzip(buf, callback)",
          "type": "method",
          "name": "gunzip",
          "desc": "<!--\nDecompress a raw Buffer with Gunzip.\n-->\n\n<p>Gunzip で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.inflate(buf, callback)",
          "type": "method",
          "name": "inflate",
          "desc": "<!--\nDecompress a raw Buffer with Inflate.\n-->\n\n<p>Infrate で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.inflateRaw(buf, callback)",
          "type": "method",
          "name": "inflateRaw",
          "desc": "<!--\nDecompress a raw Buffer with InflateRaw.\n-->\n\n<p>InflateRaw で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.unzip(buf, callback)",
          "type": "method",
          "name": "unzip",
          "desc": "<!--\nDecompress a raw Buffer with Unzip.\n-->\n\n<p>Unzip で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: zlib.Gzip",
          "type": "class",
          "name": "zlib.Gzip",
          "desc": "<!--\nCompress data using gzip.\n-->\n\n<p>gzip を使ってデータを圧縮します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Gunzip",
          "type": "class",
          "name": "zlib.Gunzip",
          "desc": "<!--\nDecompress a gzip stream.\n-->\n\n<p>gzip ストリームを解凍します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Deflate",
          "type": "class",
          "name": "zlib.Deflate",
          "desc": "<!--\nCompress data using deflate.\n-->\n\n<p>deflate を使ってデータを圧縮します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Inflate",
          "type": "class",
          "name": "zlib.Inflate",
          "desc": "<!--\nDecompress a deflate stream.\n-->\n\n<p>deflate ストリームを解凍します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.DeflateRaw",
          "type": "class",
          "name": "zlib.DeflateRaw",
          "desc": "<!--\nCompress data using deflate, and do not append a zlib header.\n-->\n\n<p>deflate を使ってデータを圧縮しますが、zlib ヘッダを付加しません。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.InflateRaw",
          "type": "class",
          "name": "zlib.InflateRaw",
          "desc": "<!--\nDecompress a raw deflate stream.\n-->\n\n<p>生の deflate ストリームを解凍します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Unzip",
          "type": "class",
          "name": "zlib.Unzip",
          "desc": "<!--\nDecompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.\n-->\n\n<p>Gzip または Deflate で圧縮されたストリームをヘッダで自動判別して解凍します。\n\n</p>\n"
        }
      ],
      "that is: 128K for windowBits": "15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.\n\nFor example, if you want to reduce\nthe default memory requirements from 256K to 128K, set the options to:",
      "that is, 32K for windowBits": "15 (default value) plus a few kilobytes\nfor small objects.\n\nThis is in addition to a single internal output slab buffer of size\n`chunkSize`, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the\n`level` setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.\n\nIn general, greater memory usage options will mean that node has to make\nfewer calls to zlib, since it'll be able to process more data in a\nsingle `write` operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage.",
      "type": "module",
      "displayName": "Zlib"
    }
  ]
}
