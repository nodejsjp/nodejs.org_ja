{
  "source": "doc/api/cluster.markdown",
  "modules": [
    {
      "textRaw": "Cluster",
      "name": "cluster",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<!--\nA single instance of Node runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node\nprocesses to handle the load.\n-->\n\n<p>一つの Node インスタンスは一つのスレッドで実行されます。\nマルチコアシステムのメリットを生かすために、\nユーザは時々 Node プロセスのクラスを起動して負荷を分散したくなります。\n\n</p>\n<!--\nThe cluster module allows you to easily create a network of processes that\nall share server ports.\n-->\n\n<p>クラスタモジュールは、サーバポートを共有するプロセスのネットワークを\n簡単に構築することを可能にします。\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\nvar numCPUs = require(&apos;os&apos;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&apos;death&apos;, function(worker) {\n    console.log(&apos;worker &apos; + worker.pid + &apos; died&apos;);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case its a HTTP server\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n  }).listen(8000);\n}</code></pre>\n<!--\nRunning node will now share port 8000 between the workers:\n-->\n\n<p>node は 8000 番ポートをワーカ間で共有します。\n\n</p>\n<pre><code>% node server.js\nWorker 2438 online\nWorker 2437 online</code></pre>\n<!--\nThis feature was introduced recently, and may change in future versions.\nPlease try it out and provide feedback.\n-->\n\n<p>この機能は最近導入されたばかりであり、\n将来のバージョンで変更される可能性があります。\nこれを試して、フィードバックを行ってください。\n\n</p>\n",
      "properties": [
        {
          "textRaw": "`settings` {Object} ",
          "name": "settings",
          "* {Object}\n  * `exec` {String} file path to worker file.  (Default": "`__filename`)\n  * `args` {Array} string arguments passed to worker.\n    (Default=`process.argv.slice(2)`)\n  * `silent` {Boolean} whether or not to send output to parent's stdio.\n    (Default=`false`)",
          "options": [
            {
              "textRaw": "`exec` {String} ワーカで実行するファイルへのパス. (デフォルトは `__filename`) ",
              "name": "exec",
              "type": "String",
              "desc": "ワーカで実行するファイルへのパス. (デフォルトは `__filename`)"
            },
            {
              "textRaw": "`args` {Array} ワーカに渡される引数となる文字列。 (デフォルトは `process.argv.slice(2)`) ",
              "name": "args",
              "type": "Array",
              "desc": "ワーカに渡される引数となる文字列。 (デフォルトは `process.argv.slice(2)`)"
            },
            {
              "textRaw": "`silent` {Boolean} 出力を親プロセスに送るかどうか。 (デフォルトは `false`) ",
              "name": "silent",
              "type": "Boolean",
              "desc": "出力を親プロセスに送るかどうか。 (デフォルトは `false`)"
            }
          ],
          "desc": "<!--\nAll settings set by the `.setupMaster` is stored in this settings object.\nThis object is not supposed to be change or set manually, by you.\n-->\n\n<p><code>cluster.setupMaster()</code> によってセットされた全ての情報は設定オブジェクトに\n保存されます。\nこのオブジェクトはあなたによって変更されることを想定していません。\n\n</p>\n"
        },
        {
          "textRaw": "`isMaster` {Boolean} ",
          "name": "isMaster",
          "desc": "<!--\nTrue if the process is a master. This is determined\nby the `process.env.NODE_UNIQUE_ID`. If `process.env.NODE_UNIQUE_ID` is\nundefined, then `isMaster` is `true`.\n-->\n\n<p>現在のプロセスがマスタの場合は <code>true</code> です。\nこれは <code>process.env.NODE_UNIQUE_ID</code> から決定されます。\n<code>process.env.NODE_UNIQUE_ID</code> が未定義だと <code>isMaster</code> は <code>true</code> になります。\n\n</p>\n"
        },
        {
          "textRaw": "`isWorker` {Boolean} ",
          "name": "isWorker",
          "desc": "<!--\nThis boolean flag is true if the process is a worker forked from a master.\nIf the `process.env.NODE_UNIQUE_ID` is set to a value, then\n`isWorker` is `true`.\n-->\n\n<p>現在のプロセスがマスタからフォークされたワーカの場合、\nこの論理値型のフラグは <code>true</code> です。\n<code>process.env.NODE_UNIQUE_ID</code> に値が設定されていると、\n<code>isWorker</code> は <code>true</code> になります。\n\n</p>\n"
        },
        {
          "textRaw": "`settings` {Object} ",
          "name": "settings",
          "* {Object}\n  * `exec` {String} file path to worker file.  Default: `__filename`\n  * `args` {Array} string arguments passed to worker.\n    (Default": "`process.argv.slice(2)`)\n  * `silent` {Boolean} whether or not to send output to parent's stdio.\n    (Default=`false`)",
          "options": [
            {
              "textRaw": "`exec` {String} ワーカで実行するファイルへのパス. (デフォルトは `__filename`) ",
              "name": "exec",
              "type": "String",
              "desc": "ワーカで実行するファイルへのパス. (デフォルトは `__filename`)"
            },
            {
              "textRaw": "`args` {Array} ワーカに渡される引数となる文字列。 (デフォルトは `process.argv.slice(2)`) ",
              "name": "args",
              "type": "Array",
              "desc": "ワーカに渡される引数となる文字列。 (デフォルトは `process.argv.slice(2)`)"
            },
            {
              "textRaw": "`silent` {Boolean} 出力を親プロセスに送るかどうか。 (デフォルトは `false`) ",
              "name": "silent",
              "type": "Boolean",
              "desc": "出力を親プロセスに送るかどうか。 (デフォルトは `false`)"
            }
          ],
          "desc": "<!--\nAll settings set by the `.setupMaster` is stored in this settings object.\nThis object is not supposed to be change or set manually.\n-->\n\n<p><code>setupMaster()</code> の設定はこのオブジェクトに保存されます。\nこのオブジェクトは変更されることを想定していません。\n\n</p>\n"
        },
        {
          "textRaw": "`workers` {Object} ",
          "name": "workers",
          "desc": "<!--\nIn the cluster all living worker objects are stored in this object by there\n`uniqueID` as the key. This makes it easy to loop through all living workers.\n-->\n\n<p>このクラスタで生きている全てのワーカオブジェクトを、その <code>uniqueID</code>\nをキーとして保存しているオブジェクトです。\nこれは全ての生きているワーカに対して繰り返しを行うことを容易にします。\n\n</p>\n<pre><code>// Go through all workers\nfunction eachWorker(callback) {\n  for (var uniqueID in cluster.workers) {\n    callback(cluster.workers[uniqueID]);\n  }\n}\neachWorker(function (worker) {\n  worker.send(&apos;big announcement to all workers&apos;);\n});</code></pre>\n<!--\nShould you wish to reference a worker over a communication channel, using\nthe worker's uniqueID is the easiest way to find the worker.\n-->\n\n<p>通信チャネルを越えてワーカの参照を渡す場合は、\nワーカのユニーク ID を使ってワーカを探すのが簡単です。\n\n</p>\n<pre><code>socket.on(&apos;data&apos;, function (uniqueID) {\n  var worker = cluster.workers[uniqueID];\n});</code></pre>\n"
        }
      ],
      "events": [
        {
          "textRaw": "Event: 'fork'",
          "type": "event",
          "name": "fork",
          "params": [],
          "desc": "<!--\nWhen a new worker is forked the cluster module will emit a 'fork' event.\nThis can be used to log worker activity, and create you own timeout.\n-->\n\n<p>新しいワーカがフォークされると、クラスタモジュールは <code>&apos;fork&apos;</code> イベントを\n生成します。\nこれはワーカの活動をロギングしたり、タイムアウトのために使うことができます。\n\n</p>\n<pre><code>var timeouts = [];\nvar errorMsg = function () {\n  console.error(&quot;Something must be wrong with the connection ...&quot;);\n});\n\ncluster.on(&apos;fork&apos;, function (worker) {\n  timeouts[worker.uniqueID] = setTimeout(errorMsg, 2000);\n});\ncluster.on(&apos;listening&apos;, function (worker) {\n  clearTimeout(timeouts[worker.uniqueID]);\n});\ncluster.on(&apos;death&apos;, function (worker) {\n  clearTimeout(timeouts[worker.uniqueID]);\n  errorMsg();\n});</code></pre>\n"
        },
        {
          "textRaw": "Event: 'online'",
          "type": "event",
          "name": "online",
          "params": [],
          "desc": "<!--\nAfter forking a new worker, the worker should respond with a online message.\nWhen the master receives a online message it will emit such event.\nThe difference between 'fork' and 'online' is that fork is emitted when the\nmaster tries to fork a worker, and 'online' is emitted when the worker is\nbeing executed.\n-->\n\n<p>新しいワーカをフォークした後、ワーカはオンラインメッセージを応答します。\nマスタがオンラインメッセージを受信すると、このイベントが生成されます。\n<code>&apos;fork&apos;</code> と <code>&apos;online&apos;</code> の違いは、<code>&apos;fork&apos;</code> はマスタがワーカのフォークを\n試みた時点で生成されるのに対し、<code>&apos;online&apos;</code> はワーカの実行が開始されてから\n生成される点です。\n\n</p>\n<pre><code>cluster.on(&apos;online&apos;, function (worker) {\n  console.log(&quot;Yay, the worker responded after it was forked&quot;);\n});</code></pre>\n"
        },
        {
          "textRaw": "Event: 'listening'",
          "type": "event",
          "name": "listening",
          "params": [],
          "desc": "<!--\nWhen calling `listen()` from a worker, a 'listening' event is automatically assigned\nto the server instance. When the server is listening a message is send to the master\nwhere the 'listening' event is emitted.\n-->\n\n<p>ワーカが <code>net.Server.listen()</code> を呼び出すと、<code>&apos;listening&apos;</code> イベントは自動的に\n<code>net.Server</code> インスタンスに割り当てられます。\n<code>net.Server</code> が <code>&apos;listening&apos;</code> メッセージをマスタに送信すると、\n<code>&apos;listening&apos;</code> イベントが生成されます。\n\n</p>\n<pre><code>cluster.on(&apos;listening&apos;, function (worker) {\n  console.log(&quot;We are now connected&quot;);\n});</code></pre>\n"
        },
        {
          "textRaw": "Event: 'disconnect'",
          "type": "event",
          "name": "disconnect",
          "params": [],
          "desc": "<!--\nWhen a workers IPC channel has disconnected this event is emitted. This will happen\nwhen the worker dies, usually after calling `.destroy()`.\n-->\n\n<p>ワーカの IPC チャネルが切断された場合に生成されます。\nそれはワーカが終了した場合や、<code>.destroy()</code> を呼び出した後に発生します。\n\n</p>\n<!--\nWhen calling `.disconnect()`, there may be a delay between the\n`disconnect` and `death` events.  This event can be used to detect if\nthe process is stuck in a cleanup or if there are long-living\nconnections.\n-->\n\n<p><code>.disconnect()</code> を呼び出した後、<code>&apos;disconnect&apos;</code> と <code>&apos;death&apos;</code> の間には\n遅延があるかもしれません。このイベントはプロセスがクリーンナップで\n行き詰まったり、長時間生きている接続がないかを検出することに\n使用できます。\n\n</p>\n<pre><code>cluster.on(&apos;disconnect&apos;, function(worker) {\n  console.log(&apos;The worker #&apos; + worker.uniqueID + &apos; has disconnected&apos;);\n});</code></pre>\n"
        },
        {
          "textRaw": "Event: 'death'",
          "type": "event",
          "name": "death",
          "params": [],
          "desc": "<!--\nWhen any of the workers die the cluster module will emit the 'death' event.\nThis can be used to restart the worker by calling `fork()` again.\n-->\n\n<p>どのワーカが死んだ場合でも、クラスタモジュールは <code>&apos;death&apos;</code> イベントを\n生成します。\nこれは <code>fork()</code> を呼び出してワーカを再開する場合に使用することができます。\n\n</p>\n<pre><code>cluster.on(&apos;death&apos;, function(worker) {\n  console.log(&apos;worker &apos; + worker.pid + &apos; died. restart...&apos;);\n  cluster.fork();\n});</code></pre>\n"
        },
        {
          "textRaw": "Event: 'setup'",
          "type": "event",
          "name": "setup",
          "params": [],
          "desc": "<!--\nWhen the `.setupMaster()` function has been executed this event emits.\nIf `.setupMaster()` was not executed before `fork()` this function will\ncall `.setupMaster()` with no arguments.\n-->\n\n<p><code>setupMaster()</code> が実行された時、このイベントが生成されます。\n<code>fork()</code> の前に<code>setupMaster()</code> が呼ばれなかった場合、\nこの関数は引数無しで <code>setupMaster()</code> を呼び出します。\n\n</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "cluster.setupMaster([settings])",
          "type": "method",
          "name": "setupMaster",
          "* `settings` {Object}\n  * `exec` {String} file path to worker file.  (Default": "`__filename`)\n  * `args` {Array} string arguments passed to worker.\n    (Default=`process.argv.slice(2)`)\n  * `silent` {Boolean} whether or not to send output to parent's stdio.\n    (Default=`false`)",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`settings` {Object} ",
                  "options": [
                    {
                      "textRaw": "`exec` {String} ワーカで実行するファイルへのパス. (デフォルトは `__filename`) ",
                      "name": "exec",
                      "type": "String",
                      "desc": "ワーカで実行するファイルへのパス. (デフォルトは `__filename`)"
                    },
                    {
                      "textRaw": "`args` {Array} ワーカに渡される引数となる文字列。 (デフォルトは `process.argv.slice(2)`) ",
                      "name": "args",
                      "type": "Array",
                      "desc": "ワーカに渡される引数となる文字列。 (デフォルトは `process.argv.slice(2)`)"
                    },
                    {
                      "textRaw": "`silent` {Boolean} 出力を親プロセスに送るかどうか。 (デフォルトは `false`) ",
                      "name": "silent",
                      "type": "Boolean",
                      "desc": "出力を親プロセスに送るかどうか。 (デフォルトは `false`)"
                    }
                  ],
                  "name": "settings",
                  "type": "Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "settings",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<!--\nThe `setupMaster` is used to change the default 'fork' behavior. It takes\none option object argument.\n\nExample:\n-->\n\n<p><code>setupMaster()</code> は &apos;fork&apos; のデフォルト動作を変更するために使われます。\n引数として一つのオプションオブジェクトを受け取ります。\n\n</p>\n<p>例:\n\n</p>\n<pre><code>var cluster = require(&quot;cluster&quot;);\ncluster.setupMaster({\n  exec : &quot;worker.js&quot;,\n  args : [&quot;--use&quot;, &quot;https&quot;],\n  silent : true\n});\ncluster.autoFork();</code></pre>\n"
        },
        {
          "textRaw": "cluster.fork([env])",
          "type": "method",
          "name": "fork",
          "desc": "<!--\n* `env` {Object} Key/value pairs to add to child process environment.\n* return {Worker object}\n-->\n\n<ul>\n<li><code>env</code> {Object} 子プロセスの環境に加えられるキーと値のペア。</li>\n<li>return {Worker object}</li>\n</ul>\n<!--\nSpawn a new worker process. This can only be called from the master process.\n-->\n\n<p>新しいワーカプロセスを起動します。\nこれはマスタプロセスからのみ呼び出すことができます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "env",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "cluster.disconnect([callback])",
          "type": "method",
          "name": "disconnect",
          "desc": "<!--\n* `callback` {Function} called when all workers are disconnected and handlers are closed\n-->\n\n<ul>\n<li><code>callback</code> {Function} 全てのワーカが切断し、ハンドルがクローズされると\n呼び出されます。</li>\n</ul>\n<!--\nWhen calling this method, all workers will commit a graceful suicide. When they are\ndisconnected all internal handlers will be closed, allowing the master process to\ndie graceful if no other event is waiting.\n-->\n\n<p>このメソッドを呼び出すと、全てのワーカは強制的でない終了に向かいます。\nそれらの内部的なハンドルが全てクローズされると、\n他に待機しているイベントがなければ、\nマスタプロセスを非強制的に終了することができます。\n\n</p>\n<!--\nThe method takes an optional callback argument which will be called when finished.\n-->\n\n<p>このメソッドはオプションの引数としてコールバックを受け取ります。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Worker.disconnect()",
          "type": "method",
          "name": "disconnect",
          "desc": "<!--\nWhen calling this function the worker will no longer accept new connections, but\nthey will be handled by any other listening worker. Existing connection will be\nallowed to exit as usual. When no more connections exist, the IPC channel to the worker\nwill close allowing it to die graceful. When the IPC channel is closed the `disconnect`\nevent will emit, this is then followed by the `death` event, there is emitted when\nthe worker finally die.\n-->\n\n<p>この関数を呼び出すと、そのワーカはそれ以上新しい接続\n(それらは他のワーカによって扱われます) を受け付けなくなります。\n既存の接続は通常通りに\nコネクションが無くなると、ワーカを正常に終了するために IPC チャネルは\n閉じられます。\nIPC チャネルが閉じられると <code>&apos;disconnect&apos;</code> イベントが生成され、\nその後ワーカが終了すると <code>&apos;death&apos;</code> イベントが生成されます。\n\n</p>\n<!--\nBecause there might be long living connections, it is useful to implement a timeout.\nThis example ask the worker to disconnect and after 2 seconds it will destroy the\nserver. An alternative wound be to execute `worker.destroy()` after 2 seconds, but\nthat would normally not allow the worker to do any cleanup if needed.\n-->\n\n<p>長時間にわたる接続があるかもしれないため、これはタイムアウトを実装するために\n有益です。\nこの例はワーカが IPC チャネルを閉じた後、2 秒でサーバから終了されます。\n他の方法として <code>worker.destroy()</code> を呼び出してから\n2 秒後とすることもできますが、その場合はワーカが必要なクリーンナップを\n行えないかもしれません。\n\n</p>\n<pre><code>if (cluster.isMaster) {\n  var worker = cluser.fork();\n  var timeout;\n\n  worker.on(&apos;listening&apos;, function () {\n    worker.disconnect();\n    timeout = setTimeout(function () {\n      worker.send(&apos;force kill&apos;);\n    }, 2000);\n  });\n\n  worker.on(&apos;disconnect&apos;, function () {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  var net = require(&apos;net&apos;);\n  var server = net.createServer(function (socket) {\n    // connection never end\n  });\n\n  server.listen(8000);\n\n  server.on(&apos;close&apos;, function () {\n    // cleanup\n  });\n\n  process.on(&apos;message&apos;, function (msg) {\n    if (msg === &apos;force kill&apos;) {\n      server.destroy();\n    }\n  });\n}</code></pre>\n",
          "events": [
            {
              "textRaw": "Event: 'message'",
              "type": "event",
              "name": "message",
              "params": [],
              "desc": "<!--\nThis event is the same as the one provided by `child_process.fork()`.\nIn the master you should use this event, however in a worker you can also use\n`process.on('message')`\n\nAs an example, here is a cluster that keeps count of the number of requests\nin the master process using the message system:\n-->\n\n<p>このイベントは <code>child_process.fork()</code> が提供するものと同じです。\nマスタではこのイベントを使うべきですが、ワーカでは <code>process.on(&apos;message&apos;)</code>\nを使うこともできます。\n\n</p>\n<p>メッセージシステムを使用してクラスタ全体のリクエスト数を\nマスタプロセスで保持する例です:\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  var numReqs = 0;\n  setInterval(function() {\n    console.log(&quot;numReqs =&quot;, numReqs);\n  }, 1000);\n\n  // Count requestes\n  var messageHandler = function (msg) {\n    if (msg.cmd &amp;&amp; msg.cmd == &apos;notifyRequest&apos;) {\n      numReqs += 1;\n    }\n  };\n\n  // Start workers and listen for messages containing notifyRequest\n  cluster.autoFork();\n  Object.keys(cluster.workers).forEach(function (uniqueID) {\n    cluster.workers[uniqueID].on(&apos;message&apos;, messageHandler);\n  });\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n\n    // notify master about the request\n    process.send({ cmd: &apos;notifyRequest&apos; });\n  }).listen(8000);\n}</code></pre>\n"
            },
            {
              "textRaw": "Event: 'online'",
              "type": "event",
              "name": "online",
              "params": [],
              "desc": "<!--\nSame as the `cluster.on('online')` event, but emits only when the state change\non the specified worker.\n-->\n\n<p><code>cluster.on(&apos;online&apos;)</code> と同様ですが，特定のワーカの状態が変化した場合のみ\nイベントを生成します。\n\n</p>\n<pre><code>cluster.fork().on(&apos;online&apos;, function (worker) {\n  // Worker is online\n};</code></pre>\n"
            },
            {
              "textRaw": "Event: 'listening'",
              "type": "event",
              "name": "listening",
              "params": [],
              "desc": "<!--\nSame as the `cluster.on('listening')` event, but emits only when the state change\non the specified worker.\n-->\n\n<p><code>cluster.on(&apos;listening&apos;)</code> と同様ですが、特定のワーカの状態が変化した場合のみ\nイベントを生成します。\n\n</p>\n<pre><code>cluster.fork().on(&apos;listening&apos;, function (worker) {\n  // Worker is listening\n};</code></pre>\n"
            },
            {
              "textRaw": "Event: 'disconnect'",
              "type": "event",
              "name": "disconnect",
              "params": [],
              "desc": "<!--\nSame as the `cluster.on('disconnect')` event, but emits only when the state change\non the specified worker.\n-->\n<code>cluster.on(&apos;disconnect&apos;)</code> と同じですが、指定されたワーカの状態が\n変更された場合のみ生成されます。\n\n    cluster.fork().on(&apos;disconnect&apos;, function (worker) {\n      // Worker has disconnected\n    };\n\n### Event: &apos;death&apos;\n\n* <code>worker</code> {Worker object}\n\n<!--\nSame as the `cluster.on('death')` event, but emits only when the state change\non the specified worker.\n-->\n\n<p><code>cluster.on(&apos;death&apos;)</code> と同様ですが、特定のワーカの状態が変化した場合のみ\nイベントを生成します。\n\n</p>\n<pre><code>cluster.fork().on(&apos;death&apos;, function (worker) {\n  // Worker has died\n};</code></pre>\n"
            }
          ],
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Worker",
          "type": "class",
          "name": "Worker",
          "desc": "<!--\nA Worker object contains all public information and method about a worker.\nIn the master it can be obtained using `cluster.workers`. In a worker\nit can be obtained using `cluster.worker`.\n-->\n\n<p>ワーカに関する全ての公開された情報やメソッドを持つオブジェクトです。\nマスタでは <code>cluster.wrokers</code> から取得することができます。\nワーカでは <code>cluster.worker</code> から取得することができます。\n\n</p>\n",
          "properties": [
            {
              "textRaw": "`uniqueID` {String} ",
              "name": "uniqueID",
              "desc": "<!--\nEach new worker is given its own unique id, this id is stored in the\n`uniqueID`.\n\nWhile a worker is alive, this is the key that indexes it in\ncluster.workers\n-->\n\n<p>新しいワーカはいずれもユニークな ID を与えられます。\nこの ID は <code>uniqueID</code> に保存されます。.\n\n</p>\n<p>ワーカが生きている間、これは <code>cluseter.workers</code> のキーとなります。\n\n</p>\n"
            },
            {
              "textRaw": "`process` {ChildProcess object} ",
              "name": "process",
              "desc": "<!--\nAll workers are created using `child_process.fork()`, the returned object\nfrom this function is stored in process.\n\nSee: [Child Process module](child_process.html)\n-->\n\n<p>全てのワーカは <code>child_process.fork()</code> によって作成されます。\nその戻り値が <code>process</code> に設定されます。\n\n</p>\n<p>参照: <a href=\"child_process.html\">Child Process module</a>\n\n</p>\n"
            },
            {
              "textRaw": "`suicide` {Boolean} ",
              "name": "suicide",
              "desc": "<!--\nThis property is a boolean. It is set when a worker dies after calling `.destroy()`\nor immediately after calling the `.disconnect()` method. Until then it is `undefined`.\n-->\n\n<p>このプロパティは論理値型です。\nこれはワーカが <code>.destroy()</code> を呼び出して終了するか、\n<code>.disconnect()</code> メソッドを呼び出した後に設定されます。\nそれまでは <code>undefined</code> です。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "worker.send(message, [sendHandle])",
              "type": "method",
              "name": "send",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`message` {Object} ",
                      "name": "message",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`sendHandle` {Handle object} ",
                      "name": "sendHandle",
                      "type": "Handle object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "message"
                    },
                    {
                      "name": "sendHandle",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nThis function is equal to the send methods provided by\n`child_process.fork()`.  In the master you should use this function to\nsend a message to a specific worker.  However in a worker you can also use\n`process.send(message)`, since this is the same function.\n\nThis example will echo back all messages from the master:\n-->\n\n<p>この関数は <code>child_process.fork()</code> が返すオブジェクトの <code>send()</code>\nメソッドと同じです．\nマスタは特定のワーカにメッセージを送信するためにこの関数を\n使用することができます。\nしかし、ワーカでは <code>process.send(message)</code> を使うこともできます。\n\n</p>\n<p>この例はマスタからのメッセージをエコーバックします。\n\n</p>\n<pre><code>if (cluster.isMaster) {\n  var worker = cluster.fork();\n  worker.send(&apos;hi there&apos;);\n\n} else if (cluster.isWorker) {\n  process.on(&apos;message&apos;, function (msg) {\n    process.send(msg);\n  });\n}</code></pre>\n"
            },
            {
              "textRaw": "worker.destroy()",
              "type": "method",
              "name": "destroy",
              "desc": "<!--\nThis function will kill the worker, and inform the master to not spawn a\nnew worker.  To know the difference between suicide and accidentally death\na suicide boolean is set to true.\n-->\n\n<p>この関数はワーカを終了し、マスタに新しいワーカを起動しないように伝えます。\n意図しない終了と区別するために <code>suicide</code> プロパティに <code>true</code>\nが設定されることを知っておいてください。\n\n</p>\n<pre><code>cluster.on(&apos;death&apos;, function (worker) {\n  if (worker.suicide === true) {\n    console.log(&apos;Oh, it was just suicide\\&apos; – no need to worry&apos;).\n  }\n});\n\n// destroy worker\nworker.destroy();</code></pre>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Cluster"
    }
  ]
}
