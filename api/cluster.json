{
  "source": "doc/api/cluster.markdown",
  "modules": [
    {
      "textRaw": "Cluster",
      "name": "cluster",
      "desc": "<!--\nA single instance of Node runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node\nprocesses to handle the load.\n-->\n\n<p>一つの Node インスタンスは一つのスレッドで実行されます。\nマルチコアシステムのメリットを生かすために、\nユーザは時々 Node プロセスのクラスを起動して負荷を分散したくなります。\n\n</p>\n<!--\nThe cluster module allows you to easily create a network of processes that\nall share server ports.\n-->\n\n<p>クラスタモジュールは、サーバポートを共有するプロセスのネットワークを\n簡単に構築することを可能にします。\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\nvar numCPUs = require(&apos;os&apos;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&apos;death&apos;, function(worker) {\n    console.log(&apos;worker &apos; + worker.pid + &apos; died&apos;);\n  });\n} else {\n  // Worker processes have a http server.\n  http.Server(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n  }).listen(8000);\n}</code></pre>\n<!--\nRunning node will now share port 8000 between the workers:\n-->\n\n<p>Node は 8000 番ポートをワーカ間で共有します。\n\n</p>\n<pre><code>% node server.js\nWorker 2438 online\nWorker 2437 online</code></pre>\n<!--\nThe difference between `cluster.fork()` and `child_process.fork()` is simply\nthat cluster allows TCP servers to be shared between workers. `cluster.fork`\nis implemented on top of `child_process.fork`. The message passing API that\nis available with `child_process.fork` is available with `cluster` as well.\nAs an example, here is a cluster which keeps count of the number of requests\nin the master process via message passing:\n-->\n\n<p><code>cluster.fork()</code> と <code>child_process.fork()</code> の違いは単純で、\nクラスタはワーカ間で共有する TCP サーバを実現できることです。\n<code>cluster.fork()</code> は <code>child_process.fork()</code> 上に実装されています。\n<code>child_process.fork()</code> によって実現されるメッセージパッシング API は\n<code>cluseter</code> でも同様に利用できます。\n以下のクラスタの例は、メッセージパッシングを通じてマスタプロセスで\nリクエスト数をカウントします。\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\nvar numReqs = 0;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; 2; i++) {\n    var worker = cluster.fork();\n\n    worker.on(&apos;message&apos;, function(msg) {\n      if (msg.cmd &amp;&amp; msg.cmd == &apos;notifyRequest&apos;) {\n        numReqs++;\n      }\n    });\n  }\n\n  setInterval(function() {\n    console.log(&quot;numReqs =&quot;, numReqs);\n  }, 1000);\n} else {\n  // Worker processes have a http server.\n  http.Server(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n    // Send message to master process\n    process.send({ cmd: &apos;notifyRequest&apos; });\n  }).listen(8000);\n}</code></pre>\n",
      "methods": [
        {
          "textRaw": "cluster.fork()",
          "type": "method",
          "name": "fork",
          "desc": "<!--\nSpawn a new worker process. This can only be called from the master process.\n-->\n\n<p>新しいワーカプロセスを起動します。\nマスタプロセスから飲み呼び出すことができます。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "cluster.isMaster",
          "name": "isMaster",
          "desc": "<!--\nBoolean flags to determine if the current process is a master or a worker\nprocess in a cluster. A process `isMaster` if `process.env.NODE_WORKER_ID`\nis undefined.\n-->\n\n<p>現在のプロセスがクラスタ内でマスタかワーカかを決定することができる\nBoolean 値です。\n<code>isMaster</code> は <code>process.env.NODE_WORKER_ID</code> が未定義かどうかです。\n\n\n</p>\n"
        },
        {
          "textRaw": "cluster.isWorker",
          "name": "isWorker",
          "desc": "<!--\nBoolean flags to determine if the current process is a master or a worker\nprocess in a cluster. A process `isMaster` if `process.env.NODE_WORKER_ID`\nis undefined.\n-->\n\n<p>現在のプロセスがクラスタ内でマスタかワーカかを決定することができる\nBoolean 値です。\n<code>isMaster</code> は <code>process.env.NODE_WORKER_ID</code> が未定義かどうかです。\n\n\n</p>\n"
        }
      ],
      "events": [
        {
          "textRaw": "Event: 'death'",
          "type": "event",
          "name": "death",
          "desc": "<!--\nWhen any of the workers die the cluster module will emit the 'death' event.\nThis can be used to restart the worker by calling `fork()` again.\n-->\n\n<p>ワーカが死ぬとクラスタモジュールは <code>&apos;deth&apos;</code> イベントを生成します。\nこれはワーカを再起動するために再び <code>fork()</code>\nを呼び出すことに使うことができます。\n\n</p>\n<pre><code>cluster.on(&apos;death&apos;, function(worker) {\n  console.log(&apos;worker &apos; + worker.pid + &apos; died. restart...&apos;);\n  cluster.fork();\n});</code></pre>\n<!--\nDifferent techniques can be used to restart the worker depending on the\napplication.\n-->\n\n<p>アプリケーションによっては、ワーカを再起動するために\n別のテクニックを使うこともできます。\n</p>\n",
          "params": []
        }
      ],
      "type": "module",
      "displayName": "Cluster"
    }
  ]
}
