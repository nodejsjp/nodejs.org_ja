{
  "source": "doc/api/globals.markdown",
  "globals": [
    {
      "textRaw": "global",
      "name": "global",
      "type": "global",
      "desc": "<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} グローバルなネームスペースのオブジェクト</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>ブラウザでは、トップレベルのスコープはグローバルスコープです。\nこれは、ブラウザではグローバルスコープで <code>var something</code> と定義するとグローバル変数になることを意味します。\nNode では異なります。\nトップレベルのスコープはグローバルスコープではありません;\nNode のモジュール内での <code>var something</code> はそのモジュールでローカルになります。\n\n</p>\n"
    },
    {
      "textRaw": "process",
      "name": "process",
      "type": "global",
      "desc": "<!--\nThe process object. See the [process object](process.html#process) section.\n-->\n\n<p>プロセスオブジェクトです。<a href=\"process.html#process\">process object</a> の節を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "console",
      "name": "console",
      "type": "global",
      "desc": "<!--\nUsed to print to stdout and stderr. See the [stdio](stdio.html) section.\n-->\n\n<p>標準出力および標準エラー出力へのプリントに使われます。\n<a href=\"stdio.html\">標準入出力</a> を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "Class: Buffer",
      "type": "global",
      "name": "Buffer",
      "desc": "<!--\nUsed to handle binary data. See the [buffer section](buffer.html).\n-->\n\n<p>バイナリデータを扱うために使われます。\n<a href=\"buffers.html\">buffer セクション</a> を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "clearInterval(t)",
      "type": "global",
      "name": "clearInterval",
      "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n</p>\n"
    }
  ],
  "vars": [
    {
      "textRaw": "require()",
      "type": "var",
      "name": "require",
      "desc": "<!--\nTo require modules. See the [Modules](modules.html#modules) section.\n`require` isn't actually a global but rather local to each module.\n-->\n\n<p>require モジュールを指します。<a href=\"modules.html#modules\">モジュール</a> の節を参照してください。\n<code>require</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "require.resolve()",
          "type": "method",
          "name": "resolve",
          "desc": "<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> の内部でモジュールの位置を検索するために使われます。\nモジュールのロードは行わず、ファイル名を解決して返すだけです。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "`cache` {Object} ",
          "name": "cache",
          "desc": "<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>モジュールが要求されると、このオブジェクトの中にキャッシュされます。\nこのオブジェクトからキーと値を削除すると、次にそのモジュールが\n<code>require</code> されたときにリロードされます。\n\n</p>\n"
        },
        {
          "textRaw": "`extensions` {Array} ",
          "name": "extensions",
          "desc": "<!--\nInstruct `require` on how to handle certain file extensions.\n\nProcess files with the extension `.sjs` as `.js`:\n-->\n\n<p><code>require</code> にファイル拡張子を扱う方法を教えます。\n\n</p>\n<p>拡張子が <code>.sjs</code> であるファイルの処理を <code>.js</code> と同じにするには:\n\n</p>\n<pre><code>require.extensions[&apos;.sjs&apos;] = require.extensions[&apos;.js&apos;];</code></pre>\n<!--\nWrite your own extension handler:\n-->\n\n<p>独自の拡張子ハンドラを記述するには:\n\n</p>\n<pre><code>require.extensions[&apos;.sjs&apos;] = function(module, filename) {\n  var content = fs.readFileSync(filename, &apos;utf8&apos;);\n  // Parse the file content and give to module.exports\n  module.exports = content;\n};</code></pre>\n"
        }
      ]
    },
    {
      "textRaw": "__filename",
      "name": "__filename",
      "type": "var",
      "desc": "<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>実行されているコードのファイル名です。これは解決された絶対パスです。\nメインプログラムでは、必ずしもコマンドライン引数で使われたファイル名と\n同じではありません。\nモジュールの中では、この値はそのモジュールファイルのパスとなります。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
    },
    {
      "textRaw": "__dirname",
      "name": "__dirname",
      "type": "var",
      "desc": "<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>現在実行されているスクリプトが存在するディレクトリの名前です。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n\n</p>\n"
    },
    {
      "textRaw": "module",
      "name": "module",
      "type": "var",
      "desc": "<!--\nA reference to the current module. In particular\n`module.exports` is the same as the `exports` object.\n`module` isn't actually a global but rather local to each module.\n\nSee the [module system documentation](modules.html) for more\ninformation.\n-->\n\n<p>現在のモジュールへの参照です。\n特に <code>module.exports</code> は <code>exports</code> オブジェクトと同じです。\n<code>module</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<p>より詳しくは <a href=\"modules.html\">モジュールシステムのドキュメント</a>\nを参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "exports",
      "name": "exports",
      "type": "var",
      "desc": "<!--\nAn object which is shared between all instances of the current module and\nmade accessible through `require()`.\n`exports` is the same as the `module.exports` object.\n`exports` isn't actually a global but rather local to each module.\n\nSee the [module system documentation](modules.html) for more\ninformation.\n-->\n\n<p>現在のモジュールの全てのインスタンス間で共有されるオブジェクトで、\n<code>require</code> を通じてアクセス可能になります。\n<code>exports</code> は <code>module.exports</code> と同じオブジェクトです。\n<code>exports</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<p>より詳しくは <a href=\"modules.html\">モジュールシステムのドキュメント</a>\nを参照してください。\n\n</p>\n"
    }
  ],
  "methods": [
    {
      "textRaw": "setInterval(cb, ms)",
      "type": "method",
      "name": "setInterval",
      "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n</p>\n",
      "signatures": [
        {
          "params": [
            {
              "name": "cb"
            },
            {
              "name": "ms"
            }
          ]
        }
      ]
    }
  ],
  "miscs": [
    {
      "textRaw": "Global Objects",
      "name": "Global Objects",
      "type": "misc",
      "desc": "<!--\nThese objects are available in all modules. Some of these objects aren't\nactually in the global scope but in the module scope - this will be noted.\n-->\n\n<p>これらのオブジェクトは全てのモジュールで有効です。\nこれらのオブジェクトのいくつかは実際はグローバルスコープではなくモジュールスコープです - 注意してください。\n\n</p>\n",
      "globals": [
        {
          "textRaw": "global",
          "name": "global",
          "type": "global",
          "desc": "<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} グローバルなネームスペースのオブジェクト</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>ブラウザでは、トップレベルのスコープはグローバルスコープです。\nこれは、ブラウザではグローバルスコープで <code>var something</code> と定義するとグローバル変数になることを意味します。\nNode では異なります。\nトップレベルのスコープはグローバルスコープではありません;\nNode のモジュール内での <code>var something</code> はそのモジュールでローカルになります。\n\n</p>\n"
        },
        {
          "textRaw": "process",
          "name": "process",
          "type": "global",
          "desc": "<!--\nThe process object. See the [process object](process.html#process) section.\n-->\n\n<p>プロセスオブジェクトです。<a href=\"process.html#process\">process object</a> の節を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "console",
          "name": "console",
          "type": "global",
          "desc": "<!--\nUsed to print to stdout and stderr. See the [stdio](stdio.html) section.\n-->\n\n<p>標準出力および標準エラー出力へのプリントに使われます。\n<a href=\"stdio.html\">標準入出力</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Class: Buffer",
          "type": "global",
          "name": "Buffer",
          "desc": "<!--\nUsed to handle binary data. See the [buffer section](buffer.html).\n-->\n\n<p>バイナリデータを扱うために使われます。\n<a href=\"buffers.html\">buffer セクション</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "clearInterval(t)",
          "type": "global",
          "name": "clearInterval",
          "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n</p>\n"
        }
      ],
      "vars": [
        {
          "textRaw": "require()",
          "type": "var",
          "name": "require",
          "desc": "<!--\nTo require modules. See the [Modules](modules.html#modules) section.\n`require` isn't actually a global but rather local to each module.\n-->\n\n<p>require モジュールを指します。<a href=\"modules.html#modules\">モジュール</a> の節を参照してください。\n<code>require</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "require.resolve()",
              "type": "method",
              "name": "resolve",
              "desc": "<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> の内部でモジュールの位置を検索するために使われます。\nモジュールのロードは行わず、ファイル名を解決して返すだけです。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "`cache` {Object} ",
              "name": "cache",
              "desc": "<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>モジュールが要求されると、このオブジェクトの中にキャッシュされます。\nこのオブジェクトからキーと値を削除すると、次にそのモジュールが\n<code>require</code> されたときにリロードされます。\n\n</p>\n"
            },
            {
              "textRaw": "`extensions` {Array} ",
              "name": "extensions",
              "desc": "<!--\nInstruct `require` on how to handle certain file extensions.\n\nProcess files with the extension `.sjs` as `.js`:\n-->\n\n<p><code>require</code> にファイル拡張子を扱う方法を教えます。\n\n</p>\n<p>拡張子が <code>.sjs</code> であるファイルの処理を <code>.js</code> と同じにするには:\n\n</p>\n<pre><code>require.extensions[&apos;.sjs&apos;] = require.extensions[&apos;.js&apos;];</code></pre>\n<!--\nWrite your own extension handler:\n-->\n\n<p>独自の拡張子ハンドラを記述するには:\n\n</p>\n<pre><code>require.extensions[&apos;.sjs&apos;] = function(module, filename) {\n  var content = fs.readFileSync(filename, &apos;utf8&apos;);\n  // Parse the file content and give to module.exports\n  module.exports = content;\n};</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "__filename",
          "name": "__filename",
          "type": "var",
          "desc": "<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>実行されているコードのファイル名です。これは解決された絶対パスです。\nメインプログラムでは、必ずしもコマンドライン引数で使われたファイル名と\n同じではありません。\nモジュールの中では、この値はそのモジュールファイルのパスとなります。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
        },
        {
          "textRaw": "__dirname",
          "name": "__dirname",
          "type": "var",
          "desc": "<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>現在実行されているスクリプトが存在するディレクトリの名前です。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n\n</p>\n"
        },
        {
          "textRaw": "module",
          "name": "module",
          "type": "var",
          "desc": "<!--\nA reference to the current module. In particular\n`module.exports` is the same as the `exports` object.\n`module` isn't actually a global but rather local to each module.\n\nSee the [module system documentation](modules.html) for more\ninformation.\n-->\n\n<p>現在のモジュールへの参照です。\n特に <code>module.exports</code> は <code>exports</code> オブジェクトと同じです。\n<code>module</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<p>より詳しくは <a href=\"modules.html\">モジュールシステムのドキュメント</a>\nを参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "exports",
          "name": "exports",
          "type": "var",
          "desc": "<!--\nAn object which is shared between all instances of the current module and\nmade accessible through `require()`.\n`exports` is the same as the `module.exports` object.\n`exports` isn't actually a global but rather local to each module.\n\nSee the [module system documentation](modules.html) for more\ninformation.\n-->\n\n<p>現在のモジュールの全てのインスタンス間で共有されるオブジェクトで、\n<code>require</code> を通じてアクセス可能になります。\n<code>exports</code> は <code>module.exports</code> と同じオブジェクトです。\n<code>exports</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<p>より詳しくは <a href=\"modules.html\">モジュールシステムのドキュメント</a>\nを参照してください。\n\n</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "setInterval(cb, ms)",
          "type": "method",
          "name": "setInterval",
          "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "cb"
                },
                {
                  "name": "ms"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
