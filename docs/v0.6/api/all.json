{
  "source": "doc/api/all.markdown",
  "miscs": [
    {
      "textRaw": "About this Documentation",
      "name": "About this Documentation",
      "type": "misc",
      "desc": "<!--\nThe goal of this documentation is to comprehensively explain the Node.js\nAPI, both from a reference as well as a conceptual point of view.  Each\nsection describes a built-in module or high-level concept.\n\nWhere appropriate, property types, method arguments, and the arguments\nprovided to event handlers are detailed in a list underneath the topic\nheading.\n\nEvery `.html` document has a corresponding `.json` document presenting\nthe same information in a structured manner.  This feature is\nexperimental, and added for the benefit of IDEs and other utilities that\nwish to do programmatic things with the documentation.\n\nEvery `.html` and `.json` file is generated based on the corresponding\n`.markdown` file in the `doc/api/` folder in node's source tree.  The\ndocumentation is generated using the `tools/doc/generate.js` program.\nThe HTML template is located at `doc/template.html`.\n-->\n\n<p>このドキュメントのゴールは、Node.js の API についてリファレンスとしても，\n概念的な視点としても，包括的な説明をすることです。\nそれぞれのセクションは組込のモジュールまたは高水準の概念について記述します。\n\n</p>\n<p>必要に応じて、プロパティの型やメソッドの引数、そしてイベントハンドラに\n与えられる引数などの詳細は見出し直後のリストで与えられます。\n\n</p>\n<p>すべての <code>.html</code> ドキュメントは、対応する <code>.json</code> ドキュメントを持ちます。\nそれは同じ情報を同様の構造で表現します。\nこれは実験的で、ドキュメントをプログラム的に扱いたい IDE や他の\nユーティリティのために加えられました。\n\n</p>\n<p>すべての <code>.html</code> と <code>.json</code> ファイルは、node ソースツリーの <code>doc/api/</code>\nフォルダにある、対応する <code>.markdown</code> ファイルを基に生成されます。\nドキュメントの生成には <code>tools/doc/generate.js</code> が使われます。\nHTML のテンプレートは <code>doc/template.html</code> にあります。\n\n</p>\n",
      "miscs": [
        {
          "textRaw": "Stability Index",
          "name": "Stability Index",
          "type": "misc",
          "desc": "<!--\nThroughout the documentation, you will see indications of a section's\nstability.  The Node.js API is still somewhat changing, and as it\nmatures, certain parts are more reliable than others.  Some are so\nproven, and so relied upon, that they are unlikely to ever change at\nall.  Others are brand new and experimental, or known to be hazardous\nand in the process of being redesigned.\n\nThe notices look like this:\n-->\n\n<p>ドキュメント全体を通して、セクションの安定度に関する目安を見ることが\nできるでしょう。\nNode.js の API はまだ少し変更されます。\nそれが成熟することにより、ある部分は他よりも信頼できるようになります。\nいくつかはそのように証明され、したがって信頼され、それらはおそらく\n変更されそうもありません。\nその他は新しくて実験的か、危険が知られていたり、再実装が始まっていたりします。\n\n</p>\n<p>通知は次のようです:\n\n</p>\n<pre><code>Stability: 1 Experimental</code></pre>\n<!--\nThe stability indices are as follows:\n-->\n\n<p>安定度は以下を示します:\n\n</p>\n<!--\n* **0 - Deprecated**  This feature is known to be problematic, and changes are\nplanned.  Do not rely on it.  Use of the feature may cause warnings.  Backwards\ncompatibility should not be expected.\n\n* **1 - Experimental**  This feature was introduced recently, and may change\nor be removed in future versions.  Please try it out and provide feedback.\nIf it addresses a use-case that is important to you, tell the node core team.\n\n* **2 - Unstable**  The API is in the process of settling, but has not yet had\nsufficient real-world testing to be considered stable. Backwards-compatibility\nwill be maintained if reasonable.\n\n* **3 - Stable**  The API has proven satisfactory, but cleanup in the underlying\ncode may cause minor changes.  Backwards-compatibility is guaranteed.\n\n* **4 - API Frozen**  This API has been tested extensively in production and is\nunlikely to ever have to change.\n\n* **5 - Locked**  Unless serious bugs are found, this code will not ever\nchange.  Please do not suggest changes in this area; they will be refused.\n-->\n\n<ul>\n<li><strong>0 - 廃止予定</strong>  この機能には問題があることが知られていて、\n変更が計画されています。これに依存しないでください。\nこの機能を使用すると警告が出されるでしょう。\n後方互換性を期待すべきではありません。</li>\n</ul>\n<ul>\n<li><strong>1 - 実験的 </strong>  この機能は最近導入され、将来のバージョンで変更されるか\n削除されるかもしれません。それを試してフィードバックをしてください。\n重要なユースケースで使われるなら、node コアチームに教えてください。</li>\n</ul>\n<ul>\n<li><strong>2 - 不安定</strong>  API は安定化の途中ですが、まだ安定していると考えられるほどには\n現実世界でテストされていません。\nもし合理的なら後方互換性が維持されるでしょう。</li>\n</ul>\n<ul>\n<li><strong>3 - 安定</strong>  API は要求を満たすことがわかりましたが、実装コードを\nクリーンナップするために小さな変更が行われるかもしれません。\n後方互換性は保証されます。</li>\n</ul>\n<ul>\n<li><strong>4 - API 凍結</strong>  API は実運用で広範囲にテストされており、\nおそらく変更されることはありません。</li>\n</ul>\n<ul>\n<li><strong>5 - 固定 </strong>  深刻なバグが見つからない限り、コードは変更されません。\nこのエリアの変更を提案しないでください; それらは拒否されます。</li>\n</ul>\n"
        },
        {
          "textRaw": "JSON Output",
          "name": "json_output",
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<!--\nEvery HTML file in the markdown has a corresponding JSON file with the\nsame data.\n\nThis feature is new as of node v0.6.12.  It is experimental.\n-->\n\n<p>markdown から作られる全ての HTML ファイルは、対応する JSON ファイルを持ちます。\n\n</p>\n<p>これは v0.6.12 からの新機能で、実験的です。\n\n</p>\n",
          "type": "misc",
          "displayName": "JSON Output"
        }
      ]
    },
    {
      "textRaw": "Synopsis",
      "name": "Synopsis",
      "type": "misc",
      "desc": "<!--\nAn example of a [web server](http.html) written with Node which responds with 'Hello\nWorld':\n-->\n\n<p>&apos;Hello World&apos; と返答する Node で書かれたWebサーバの例:\n\n</p>\n<pre><code>var http = require(&apos;http&apos;);\n\nhttp.createServer(function (request, response) {\n  response.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  response.end(&apos;Hello World\\n&apos;);\n}).listen(8124);\n\nconsole.log(&apos;Server running at http://127.0.0.1:8124/&apos;);</code></pre>\n<!--\nTo run the server, put the code into a file called `example.js` and execute\nit with the node program\n-->\n\n<p>このサーバを実行するには、コードを <code>example.js</code> というファイルに保存し、\nnode コマンドで実行してください。\n\n</p>\n<pre><code>&gt; node example.js\nServer running at http://127.0.0.1:8124/</code></pre>\n<!--\nAll of the examples in the documentation can be run similarly.\n-->\n\n<p>このドキュメントの全てのサンプルは同じように実行することができます。\n\n</p>\n"
    },
    {
      "textRaw": "Global Objects",
      "name": "Global Objects",
      "type": "misc",
      "desc": "<!--\nThese objects are available in all modules. Some of these objects aren't\nactually in the global scope but in the module scope - this will be noted.\n-->\n\n<p>これらのオブジェクトは全てのモジュールで有効です。\nこれらのオブジェクトのいくつかは実際はグローバルスコープではなくモジュールスコープです - 注意してください。\n\n</p>\n",
      "globals": [
        {
          "textRaw": "global",
          "name": "global",
          "type": "global",
          "desc": "<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} グローバルなネームスペースのオブジェクト</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>ブラウザでは、トップレベルのスコープはグローバルスコープです。\nこれは、ブラウザではグローバルスコープで <code>var something</code> と定義するとグローバル変数になることを意味します。\nNode では異なります。\nトップレベルのスコープはグローバルスコープではありません;\nNode のモジュール内での <code>var something</code> はそのモジュールでローカルになります。\n\n</p>\n"
        },
        {
          "textRaw": "process",
          "name": "process",
          "type": "global",
          "desc": "<!--\nThe process object. See the [process object](process.html#process) section.\n-->\n\n<p>プロセスオブジェクトです。<a href=\"process.html#process\">process object</a> の節を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "console",
          "name": "console",
          "type": "global",
          "desc": "<!--\nUsed to print to stdout and stderr. See the [stdio](stdio.html) section.\n-->\n\n<p>標準出力および標準エラー出力へのプリントに使われます。\n<a href=\"stdio.html\">標準入出力</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Buffer",
          "name": "Buffer",
          "type": "global",
          "desc": "<!--\nUsed to handle binary data. See the [buffer section](buffer.html).\n-->\n\n<p>バイナリデータを扱うために使われます。\n<a href=\"buffers.html\">buffer セクション</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "clearInterval(t)",
          "type": "global",
          "name": "clearInterval",
          "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "console",
          "name": "console",
          "stability": 4,
          "stabilityText": "API Frozen",
          "type": "global",
          "desc": "<!--\nFor printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n-->\n\n<p>標準出力と標準エラーに出力するためのものです。\nほとんどのブラウザで提供されているコンソールオブジェクトと同様ですが、\n出力は標準出力か標準エラー出力に送られます。\n\n\n</p>\n",
          "methods": [
            {
              "textRaw": "console.log()",
              "type": "method",
              "name": "log",
              "desc": "<!--\nPrints to stdout with newline. This function can take multiple arguments in a\n`printf()`-like way. Example:\n-->\n\n<p>改行を伴って標準出力へプリントします。\nこの関数は <code>printf()</code> のように複数の引数を受け付けます。\n\n</p>\n<pre><code>console.log(&apos;count: %d&apos;, count);</code></pre>\n<!--\nIf formatting elements are not found in the first string then `util.inspect`\nis used on each argument.\nSee [util.format()](util.html#util.format) for more information.\n-->\n\n<p>最初の引数文字列からフォーマット要素が見つからなかった場合は、\n<code>util.inspect</code> が各引数に使われます。\nより詳細は <a href=\"util.html#util.format\">util.format()</a> を参照してください。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.info()",
              "type": "method",
              "name": "info",
              "desc": "<!--\nSame as `console.log`.\n-->\n\n<p><code>console.log</code> と同じです。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.warn()",
              "type": "method",
              "name": "warn",
              "desc": "<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> と同様ですが、標準エラー出力にプリントします。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                },
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.error()",
              "type": "method",
              "name": "error",
              "desc": "<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> と同様ですが、標準エラー出力にプリントします。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.dir(obj)",
              "type": "method",
              "name": "dir",
              "desc": "<!--\nUses `util.inspect` on `obj` and prints resulting string to stderr.\n-->\n\n<p><code>util.inspect</code> を使って <code>obj</code> を文字列化した結果を標準エラー出力にプリントします。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "obj"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "console.time(label)",
              "type": "method",
              "name": "time",
              "desc": "<!--\nMark a time.\n-->\n\n<p>タイマを作成します。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "label"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "console.timeEnd(label)",
              "type": "method",
              "name": "timeEnd",
              "desc": "<!--\nFinish timer, record output. Example\n-->\n\n<p>タイマを終了し、結果を出力します。例\n\n</p>\n<pre><code>console.time(&apos;100-elements&apos;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&apos;100-elements&apos;);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "label"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "console.trace()",
              "type": "method",
              "name": "trace",
              "desc": "<!--\nPrint a stack trace to stderr of the current position.\n-->\n\n<p>現在のスタックトレースを標準エラー出力にプリントします。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.assert()",
              "type": "method",
              "name": "assert",
              "desc": "<!--\nSame as `assert.ok()`.\n-->\n\n<p><code>assert.ok()</code> と同じです。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process",
          "name": "process",
          "type": "global",
          "desc": "<!--\nThe `process` object is a global object and can be accessed from anywhere.\nIt is an instance of `EventEmitter`.\n-->\n\n<p><code>process</code> はグローバルオブジェクトで、どこからでもアクセスすることができます。\nそれは <code>EventEmitter</code> のインスタンスです。\n\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'exit'",
              "type": "event",
              "name": "exit",
              "desc": "<!--\nEmitted when the process is about to exit.  This is a good hook to perform\nconstant time checks of the module's state (like for unit tests).  The main\nevent loop will no longer be run after the 'exit' callback finishes, so\ntimers may not be scheduled.\n-->\n\n<p>プロセスが終了しようとしている時に生成されます。\nこれは (ユニットテストのように) モジュールの状態を一定の時間でチェックするのに適したフックとなります。\nメインのイベントループは &apos;exit&apos; コールバックが終了するともはや動作しないので、\nタイマーはスケジュールされないかもしれません。\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>exit</code> を監視する例:\n\n</p>\n<pre><code>process.on(&apos;exit&apos;, function () {\n  process.nextTick(function () {\n   console.log(&apos;This will not run&apos;);\n  });\n  console.log(&apos;About to exit.&apos;);\n});</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'uncaughtException'",
              "type": "event",
              "name": "uncaughtException",
              "desc": "<!--\nEmitted when an exception bubbles all the way back to the event loop. If a\nlistener is added for this exception, the default action (which is to print\na stack trace and exit) will not occur.\n-->\n\n<p>発生した例外がイベントループまでたどり着いた場合に生成されます。\nもしこの例外に対するリスナーが加えられていれば、\nデフォルトの動作 (それはスタックトレースをプリントして終了します) は起こりません。\n\n</p>\n<!--\nExample of listening for `uncaughtException`:\n-->\n\n<p><code>uncaughtException</code> を監視する例:\n\n</p>\n<pre><code>process.on(&apos;uncaughtException&apos;, function (err) {\n  console.log(&apos;Caught exception: &apos; + err);\n});\n\nsetTimeout(function () {\n  console.log(&apos;This will still run.&apos;);\n}, 500);\n\n// Intentionally cause an exception, but don&apos;t catch it.\nnonexistentFunc();\nconsole.log(&apos;This will not run.&apos;);</code></pre>\n<!--\nNote that `uncaughtException` is a very crude mechanism for exception\nhandling.  Using try / catch in your program will give you more control over\nyour program's flow.  Especially for server programs that are designed to\nstay running forever, `uncaughtException` can be a useful safety mechanism.\n-->\n\n<p><code>uncaughtException</code> は例外を扱うとても荒削りなメカニズムであることに注意してください。\nプログラムの中で try / catch を使えばもっとプログラムの流れをうまく制御できるでしょう。\n特にサーバプログラムはいつまでも実行し続けるように設計されるので、\n<code>uncaughtException</code> は有益で安全なメカニズムになり得ます。\n\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Signal Events",
              "name": "SIGINT, SIGUSR1, etc.",
              "type": "event",
              "desc": "<!--\nEmitted when the processes receives a signal. See sigaction(2) for a list of\nstandard POSIX signal names such as SIGINT, SIGUSR1, etc.\n-->\n\n<p>プロセスがシグナルを受信した場合に生成されます。\nSIGINT、SIGUSR1、その他の POSIX 標準シグナル名の一覧について は sigaction(2) を参照してください。\n\n</p>\n<!--\nExample of listening for `SIGINT`:\n-->\n\n<p><code>SIGINT</code>を監視する例:\n\n</p>\n<pre><code>// Start reading from stdin so we don&apos;t exit.\nprocess.stdin.resume();\n\nprocess.on(&apos;SIGINT&apos;, function () {\n  console.log(&apos;Got SIGINT.  Press Control-D to exit.&apos;);\n});</code></pre>\n<!--\nAn easy way to send the `SIGINT` signal is with `Control-C` in most terminal\nprograms.\n-->\n\n<p>多くの端末プログラムで簡単に <code>SIGINT</code> を送る方法は <code>Control-C</code> を押すことです。\n\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "process.stdout",
              "name": "stdout",
              "desc": "<!--\nA `Writable Stream` to `stdout`.\n-->\n\n<p><code>stdout</code> に対する <code>Writable Stream</code> です。\n\n</p>\n<!--\nExample: the definition of `console.log`\n-->\n\n<p>例: <code>console.log</code> の定義\n\n</p>\n<pre><code>console.log = function (d) {\n  process.stdout.write(d + &apos;\\n&apos;);\n};</code></pre>\n<!--\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.  They are blocking in the case\nthat they refer to regular files or TTY file descriptors. In the case they\nrefer to pipes, they are non-blocking like other streams.\n-->\n\n<p><code>process.stderr</code> と <code>process.stdout</code> は他のストリームと異なり、\n書き込みは通常ブロックします。\nそれらが通常ファイルや TTY のファイル記述子を参照しているケースでは、\nそれらはブロックします。\nパイプを参照しているケースでは、他のストリームと同様にブロックしません。\n\n\n</p>\n"
            },
            {
              "textRaw": "process.stderr",
              "name": "stderr",
              "desc": "<!--\nA writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.  They are blocking in the case\nthat they refer to regular files or TTY file descriptors. In the case they\nrefer to pipes, they are non-blocking like other streams.\n-->\n\n<p><code>stderr</code> に対する <code>Writable Stream</code> です。\n\n</p>\n<p><code>process.stderr</code> と <code>process.stdout</code> は他のストリームと異なり、\n書き込みは通常ブロックします。\nそれらが通常ファイルや TTY のファイル記述子を参照しているケースでは、\nそれらはブロックします。\nパイプを参照しているケースでは、他のストリームと同様にブロックしません。\n\n\n</p>\n"
            },
            {
              "textRaw": "process.stdin",
              "name": "stdin",
              "desc": "<!--\nA `Readable Stream` for stdin. The stdin stream is paused by default, so one\nmust call `process.stdin.resume()` to read from it.\n-->\n\n<p>標準入力に対する <code>Readable Stream</code> です。\nデフォルトでは、標準入力に対するストリームは中断されているため、\n読み込みのためには <code>process.stdin.resume()</code> を呼び出さなければなりません。\n\n</p>\n<!--\nExample of opening standard input and listening for both events:\n-->\n\n<p>標準入力をオープンして二つのイベントを監視する例:\n\n</p>\n<pre><code>process.stdin.resume();\nprocess.stdin.setEncoding(&apos;utf8&apos;);\n\nprocess.stdin.on(&apos;data&apos;, function (chunk) {\n  process.stdout.write(&apos;data: &apos; + chunk);\n});\n\nprocess.stdin.on(&apos;end&apos;, function () {\n  process.stdout.write(&apos;end&apos;);\n});</code></pre>\n"
            },
            {
              "textRaw": "process.argv",
              "name": "argv",
              "desc": "<!--\nAn array containing the command line arguments.  The first element will be\n'node', the second element will be the name of the JavaScript file.  The\nnext elements will be any additional command line arguments.\n-->\n\n<p>コマンドライン引数を含む配列です。\n最初の要素は &apos;node&apos;、2 番目の要素は JavaScript ファイルの名前になります。\nその後の要素はコマンドラインの追加の引数になります。\n\n</p>\n<pre><code>// print process.argv\nprocess.argv.forEach(function (val, index, array) {\n  console.log(index + &apos;: &apos; + val);\n});</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>このように出力されます:\n\n</p>\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four</code></pre>\n"
            },
            {
              "textRaw": "process.execPath",
              "name": "execPath",
              "desc": "<!--\nThis is the absolute pathname of the executable that started the process.\n-->\n\n<p>プロセスによって開始された実行可能ファイルの絶対パスです。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>/usr/local/bin/node</code></pre>\n"
            },
            {
              "textRaw": "process.env",
              "name": "env",
              "desc": "<!--\nAn object containing the user environment. See environ(7).\n-->\n\n<p>ユーザの環境を含むオブジェクトです。environ(7) を参照してください。\n\n\n</p>\n"
            },
            {
              "textRaw": "process.version",
              "name": "version",
              "desc": "<!--\nA compiled-in property that exposes `NODE_VERSION`.\n-->\n\n<p><code>NODE_VERSION</code> を提示するコンパイル済みプロパティです。\n\n</p>\n<pre><code>console.log(&apos;Version: &apos; + process.version);</code></pre>\n"
            },
            {
              "textRaw": "process.versions",
              "name": "versions",
              "desc": "<!--\nA property exposing version strings of node and its dependencies.\n-->\n\n<p>node と依存ライブラリのバージョン文字列を提示します。\n\n</p>\n<pre><code>console.log(process.versions);</code></pre>\n<!--\nWill output:\n-->\n\n<p>は以下を出力します。\n\n</p>\n<pre><code>{ node: &apos;0.4.12&apos;,\n  v8: &apos;3.1.8.26&apos;,\n  ares: &apos;1.7.4&apos;,\n  ev: &apos;4.4&apos;,\n  openssl: &apos;1.0.0e-fips&apos; }</code></pre>\n"
            },
            {
              "textRaw": "process.installPrefix",
              "name": "installPrefix",
              "desc": "<!--\nA compiled-in property that exposes `NODE_PREFIX`.\n-->\n\n<p><code>NODE_PREFIX</code> を提示するコンパイル済みプロパティです。\n\n</p>\n<pre><code>console.log(&apos;Prefix: &apos; + process.installPrefix);</code></pre>\n"
            },
            {
              "textRaw": "process.pid",
              "name": "pid",
              "desc": "<!--\nThe PID of the process.\n-->\n\n<p>プロセスの PID です。\n\n</p>\n<pre><code>console.log(&apos;This process is pid &apos; + process.pid);</code></pre>\n"
            },
            {
              "textRaw": "process.title",
              "name": "title",
              "desc": "<!--\nGetter/setter to set what is displayed in 'ps'.\n-->\n\n<p>&apos;ps&apos; でどのよう表示されるかを設定するための getter/setter です。\n\n\n</p>\n"
            },
            {
              "textRaw": "process.arch",
              "name": "arch",
              "desc": "<!--\nWhat processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n-->\n\n<p>実行しているプロセッサのアーキテクチャ: <code>&apos;arm&apos;</code>、<code>&apos;ia32&apos;</code>、または\n<code>&apos;x64&apos;</code>。\n\n</p>\n<pre><code>console.log(&apos;This processor architecture is &apos; + process.arch);</code></pre>\n"
            },
            {
              "textRaw": "process.platform",
              "name": "platform",
              "desc": "<!--\nWhat platform you're running on. `'linux2'`, `'darwin'`, etc.\n-->\n\n<p>どのプラットフォームで動いているかです。<code>&apos;linux2&apos;</code>、<code>&apos;darwin&apos;</code>、など。\n\n</p>\n<pre><code>console.log(&apos;This platform is &apos; + process.platform);</code></pre>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "process.chdir(directory)",
              "type": "method",
              "name": "chdir",
              "desc": "<!--\nChanges the current working directory of the process or throws an exception if that fails.\n-->\n\n<p>プロセスのカレントワーキングディレクトリを変更します。\nもし失敗した場合は例外をスローします。\n\n</p>\n<pre><code>console.log(&apos;Starting directory: &apos; + process.cwd());\ntry {\n  process.chdir(&apos;/tmp&apos;);\n  console.log(&apos;New directory: &apos; + process.cwd());\n}\ncatch (err) {\n  console.log(&apos;chdir: &apos; + err);\n}</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "directory"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.cwd()",
              "type": "method",
              "name": "cwd",
              "desc": "<!--\nReturns the current working directory of the process.\n-->\n\n<p>プロセスのカレントワーキングディレクトリを返します。\n\n</p>\n<pre><code>console.log(&apos;Current directory: &apos; + process.cwd());</code></pre>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "process.exit([code])",
              "type": "method",
              "name": "exit",
              "desc": "<!--\nEnds the process with the specified `code`.  If omitted, exit uses the\n'success' code `0`.\n-->\n\n<p>指定の <code>code</code> でプロセスを終了します。\nもし省略されると、「成功」を示すコード <code>0</code> を使って終了します。\n\n</p>\n<!--\nTo exit with a 'failure' code:\n-->\n\n<p>「失敗」を示すコードで終了する例:\n\n</p>\n<pre><code>process.exit(1);</code></pre>\n<!--\nThe shell that executed node should see the exit code as 1.\n-->\n\n<p>node を実行したシェルで終了コードが 1 であることを見ることができるでしょう。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "code",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.getgid()",
              "type": "method",
              "name": "getgid",
              "desc": "<!--\nGets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n-->\n\n<p>プロセスのグループ識別子を取得します (getgid(2) 参照)。\nこれは数値によるグループ ID で、グループ名ではありません。\n\n</p>\n<pre><code>console.log(&apos;Current gid: &apos; + process.getgid());</code></pre>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "process.setgid(id)",
              "type": "method",
              "name": "setgid",
              "desc": "<!--\nSets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>プロセスのグループ識別子を設定します (setgid(2) 参照)。\nこれは数値による ID もグループ名の文字列のどちらも受け入れます。\nもしグループ名が指定されると、数値による ID が解決できるまでこのメソッドはブロックします。\n\n</p>\n<pre><code>console.log(&apos;Current gid: &apos; + process.getgid());\ntry {\n  process.setgid(501);\n  console.log(&apos;New gid: &apos; + process.getgid());\n}\ncatch (err) {\n  console.log(&apos;Failed to set gid: &apos; + err);\n}</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.getuid()",
              "type": "method",
              "name": "getuid",
              "desc": "<!--\nGets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n-->\n\n<p>プロセスのユーザ識別子を取得します (getuid(2) 参照)。\nこれは数値によるユーザ ID で、ユーザ名ではありません。\n\n</p>\n<pre><code>console.log(&apos;Current uid: &apos; + process.getuid());</code></pre>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "process.setuid(id)",
              "type": "method",
              "name": "setuid",
              "desc": "<!--\nSets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>プロセスのユーザ識別子を設定します (setuid(2) 参照)。\nこれは数値による ID もユーザ名の文字列のどちらも受け入れます。\nもしユーザ名が指定されると、数値による ID が解決できるまでこのメソッドはブロックします。\n\n</p>\n<pre><code>console.log(&apos;Current uid: &apos; + process.getuid());\ntry {\n  process.setuid(501);\n  console.log(&apos;New uid: &apos; + process.getuid());\n}\ncatch (err) {\n  console.log(&apos;Failed to set uid: &apos; + err);\n}</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.kill(pid, [signal])",
              "type": "method",
              "name": "kill",
              "desc": "<!--\nSend a signal to a process. `pid` is the process id and `signal` is the\nstring describing the signal to send.  Signal names are strings like\n'SIGINT' or 'SIGUSR1'.  If omitted, the signal will be 'SIGTERM'.\nSee kill(2) for more information.\n-->\n\n<p>プロセスにシグナルを送ります。\n<code>pid</code> はプロセス ID で <code>signal</code> は送信されるシグナルを文字列で記述したものです。\nシグナルの名前は &apos;SIGINT&apos; や &apos;SIGUSR1&apos; のような文字列です。\n省略すると、シグナルは &apos;SIGTERM&apos; となります。\n詳細は kill(2) を参照してください。\n\n</p>\n<!--\nNote that just because the name of this function is `process.kill`, it is\nreally just a signal sender, like the `kill` system call.  The signal sent\nmay do something other than kill the target process.\n-->\n\n<p>この関数の名前が <code>process.kill</code> であるとおり、\nこれは <code>kill</code> システムコールのように本当にシグナルを送信することに注意してください。\n対象のプロセスを殺すだけでなく、他のシグナルも送信されます。\n\n</p>\n<!--\nExample of sending a signal to yourself:\n-->\n\n<p>自身にシグナルを送信する例:\n\n</p>\n<pre><code>process.on(&apos;SIGHUP&apos;, function () {\n  console.log(&apos;Got SIGHUP signal.&apos;);\n});\n\nsetTimeout(function () {\n  console.log(&apos;Exiting.&apos;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &apos;SIGHUP&apos;);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "pid"
                    },
                    {
                      "name": "signal",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.memoryUsage()",
              "type": "method",
              "name": "memoryUsage",
              "desc": "<!--\nReturns an object describing the memory usage of the Node process\nmeasured in bytes.\n-->\n\n<p>Node プロセスのメモリ使用状況をバイト単位で記述したオブジェクトを返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(process.memoryUsage()));</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>このように生成されます:\n\n</p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }</code></pre>\n<!--\n`heapTotal` and `heapUsed` refer to V8's memory usage.\n-->\n\n<p><code>heapTotal</code> と <code>heapUsed</code> は V8 のメモリ使用状況を参照します。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "process.nextTick(callback)",
              "type": "method",
              "name": "nextTick",
              "desc": "<!--\nOn the next loop around the event loop call this callback.\nThis is *not* a simple alias to `setTimeout(fn, 0)`, it's much more\nefficient.\n-->\n\n<p>イベントループの次以降のループでコールバックを呼び出します。\nこれは <code>setTimeout(fn, 0)</code> の単純なエイリアス<em>ではなく</em>、\nはるかに効率的です。\n\n</p>\n<pre><code>process.nextTick(function () {\n  console.log(&apos;nextTick callback&apos;);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.umask([mask])",
              "type": "method",
              "name": "umask",
              "desc": "<!--\nSets or reads the process's file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if `mask` argument is\ngiven, otherwise returns the current mask.\n-->\n\n<p>プロセスのファイルモード作成マスクを設定または読み込みます。\n子プロセスは親プロセスからマスクを継承します。\n<code>mask</code> 引数が与えられると元のマスクが返され、そうでなければ現在のマスクが返されます。\n\n</p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&apos;Changed umask from: &apos; + oldmask.toString(8) +\n            &apos; to &apos; + newmask.toString(8));</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "mask",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.uptime()",
              "type": "method",
              "name": "uptime",
              "desc": "<!--\nNumber of seconds Node has been running.\n-->\n\n<p>Node が実行されてからの秒数です。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "vars": [
        {
          "textRaw": "require()",
          "type": "var",
          "name": "require",
          "desc": "<!--\nTo require modules. See the [Modules](modules.html#modules) section.\n`require` isn't actually a global but rather local to each module.\n-->\n\n<p>require モジュールを指します。<a href=\"modules.html#modules\">モジュール</a> の節を参照してください。\n<code>require</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "require.resolve()",
              "type": "method",
              "name": "resolve",
              "desc": "<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> の内部でモジュールの位置を検索するために使われます。\nモジュールのロードは行わず、ファイル名を解決して返すだけです。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "`cache` {Object} ",
              "name": "cache",
              "desc": "<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>モジュールが要求されると、このオブジェクトの中にキャッシュされます。\nこのオブジェクトからキーと値を削除すると、次にそのモジュールが\n<code>require</code> されたときにリロードされます。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "__filename",
          "name": "__filename",
          "type": "var",
          "desc": "<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>実行されているコードのファイル名です。これは解決された絶対パスです。\nメインプログラムでは、必ずしもコマンドライン引数で使われたファイル名と\n同じではありません。\nモジュールの中では、この値はそのモジュールファイルのパスとなります。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
        },
        {
          "textRaw": "__dirname",
          "name": "__dirname",
          "type": "var",
          "desc": "<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>現在実行されているスクリプトが存在するディレクトリの名前です。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n\n</p>\n"
        },
        {
          "textRaw": "module",
          "name": "module",
          "type": "var",
          "desc": "<!--\nA reference to the current module. In particular\n`module.exports` is the same as the `exports` object. See `src/node.js`\nfor more information.\n`module` isn't actually a global but rather local to each module.\n-->\n\n<p>現在のモジュールへの参照です。\n特に <code>module.exports</code> は <code>exports</code> オブジェクトと同じです。\nより詳しくは <code>src/node.js</code> を参照してください。\n<code>module</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
        },
        {
          "textRaw": "exports",
          "name": "exports",
          "type": "var",
          "desc": "<!--\nAn object which is shared between all instances of the current module and\nmade accessible through `require()`.\n`exports` is the same as the `module.exports` object. See `src/node.js`\nfor more information.\n`exports` isn't actually a global but rather local to each module.\n-->\n\n<p>現在のモジュールの全てのインスタンス間で共有されるオブジェクトで、\n<code>require</code> を通じてアクセス可能になります。\n<code>exports</code> は <code>module.exports</code> と同じオブジェクトです。\nより詳しくは <code>src/node.js</code> を参照してください。\n<code>exports</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<!--\nSee the [module system documentation](modules.html) for more\ninformation.\n\nSee the [module section](modules.html) for more information.\n-->\n\n<p>より詳細は<a href=\"modules.html\">モジュールのセクション</a> を参照してください。\n\n</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "setInterval(cb, ms)",
          "type": "method",
          "name": "setInterval",
          "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "cb"
                },
                {
                  "name": "ms"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "textRaw": "Debugger",
      "name": "Debugger",
      "stability": 3,
      "stabilityText": "Stable",
      "type": "misc",
      "desc": "<!--\nV8 comes with an extensive debugger which is accessible out-of-process via a\nsimple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).\nNode has a built-in client for this debugger. To use this, start Node with the\n`debug` argument; a prompt will appear:\n-->\n\n<p>V8は外部プロセスから <a href=\"http://code.google.com/p/v8/wiki/DebuggerProtocol\">TCP プロトコル</a>経由で接続可能なデバッガを備えています。\nNode にはこのデバッガへのクライアントが組み込まれています。\nこれを使うには、 <code>debug</code> 引数を指定して Node を起動します。\n次のようになります:\n\n</p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt;</code></pre>\n<!--\nNode's debugger client doesn't support the full range of commands, but\nsimple step and inspection is possible. By putting the statement `debugger;`\ninto the source code of your script, you will enable a breakpoint.\n-->\n\n<p>Node のデバッガクライアントはあらゆるコマンドを完全にサポートしているわけではありませんが、\n単純なステップ実行やインスペクションが可能です。\nスクリプトのソースコードに <code>debugger;</code> 文を挿入すると、\nブレークポイントが有効になります。\n\n</p>\n<!--\nFor example, suppose `myscript.js` looked like this:\n-->\n\n<p>例えば、<code>myscript.js</code> が次のようだとします:\n\n</p>\n<pre><code>// myscript.js\nx = 5;\nsetTimeout(function () {\n  debugger;\n  console.log(&quot;world&quot;);\n}, 1000);\nconsole.log(&quot;hello&quot;);</code></pre>\n<!--\nThen once the debugger is run, it will break on line 4.\n-->\n\n<p>ひとたびデバッガを実行すると、4行目で中断します。\n\n</p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in /home/indutny/Code/git/indutny/myscript.js:3\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\ndebug&gt; next\nbreak in /home/indutny/Code/git/indutny/myscript.js:4\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2+2\n4\ndebug&gt; next\n&lt; world\nbreak in /home/indutny/Code/git/indutny/myscript.js:5\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\n  7\ndebug&gt; quit\n%</code></pre>\n<!--\nThe `repl` command allows you to evaluate code remotely. The `next` command\nsteps over to the next line. There are a few other commands available and more\nto come. Type `help` to see others.\n-->\n\n<p><code>repl</code> コマンドはコードをリモートで評価します。\n<code>next</code> コマンドは次の行にステップオーバーします。\n他にもいくつかのコマンドを利用することができます。\nその他については <code>help</code> をタイプしてください。\n\n</p>\n",
      "miscs": [
        {
          "textRaw": "Watchers",
          "name": "watchers",
          "desc": "<!--\nYou can watch expression and variable values while debugging your code.\nOn every breakpoint each expression from the watchers list will be evaluated\nin the current context and displayed just before the breakpoint's source code\nlisting.\n-->\n\n<p>デバッグ中に式や変数の値をウォッチすることができます。\n全てのブレークポイントにおいて、ウォッチリストのそれぞれの式は\n現在のコンテキストで評価され、ブレークポイントのソースコードの前に\n表示されます。\n\n</p>\n<!--\nTo start watching an expression, type `watch(\"my_expression\")`. `watchers`\nprints the active watchers. To remove a watcher, type\n`unwatch(\"my_expression\")`.\n-->\n\n<p>式のウォッチを開始するには、<code>watch(&quot;my_expression&quot;)</code> をタイプします。\n<code>watchers</code> はアクティブなウォッチの一覧を表示します。\nウォッチを解除するには、<code>unwatch(&quot;my_expression&quot;)</code> とタイプします。\n\n</p>\n",
          "type": "misc",
          "displayName": "Watchers"
        },
        {
          "textRaw": "Commands reference",
          "name": "commands_reference",
          "modules": [
            {
              "textRaw": "Stepping",
              "name": "stepping",
              "desc": "<!--\n* `cont`, `c` - Continue execution\n* `next`, `n` - Step next\n* `step`, `s` - Step in\n* `out`, `o` - Step out\n-->\n\n<ul>\n<li><code>cont</code>, <code>c</code> - 実行を継続します。</li>\n<li><code>next</code>, <code>n</code> - 次の行へステップオーバーします。</li>\n<li><code>step</code>, <code>s</code> - ステップインします。</li>\n<li><code>out</code>, <code>o</code> - ステップアウトします。</li>\n</ul>\n",
              "type": "module",
              "displayName": "Stepping"
            },
            {
              "textRaw": "Breakpoints",
              "name": "breakpoints",
              "desc": "<!--\n* `setBreakpoint()`, `sb()` - Set breakpoint on current line\n* `setBreakpoint('fn()')`, `sb(...)` - Set breakpoint on a first statement in\nfunctions body\n* `setBreakpoint('script.js', 1)`, `sb(...)` - Set breakpoint on first line of\nscript.js\n* `clearBreakpoint`, `cb(...)` - Clear breakpoint\n-->\n\n<ul>\n<li><code>setBreakpoint()</code>, <code>sb()</code> - 現在行にブレークポイントを設定します。</li>\n<li><code>setBreakpoint(&apos;fn()&apos;)</code>, <code>sb(...)</code> - 指定した関数の先頭行にブレークポイントを設定します</li>\n<li><code>setBreakpoint(&apos;script.js&apos;, 1)</code>, <code>sb(...)</code> - 指定したスクリプトファイルの指定した行にブレークポイントを設定します。</li>\n<li><code>clearBreakpoint</code>, <code>cb(...)</code> - ブレークポイントを削除します。</li>\n</ul>\n",
              "type": "module",
              "displayName": "Breakpoints"
            },
            {
              "textRaw": "Info",
              "name": "info",
              "desc": "<!--\n* `backtrace`, `bt` - Print backtrace of current execution frame\n* `list(5)` - List scripts source code with 5 line context (5 lines before and\nafter)\n* `watch(expr)` - Add expression to watch list\n* `unwatch(expr)` - Remove expression from watch list\n* `watchers` - List all watchers and their values (automatically listed on each\nbreakpoint)\n* `repl` - Open debugger's repl for evaluation in debugging script's context\n-->\n\n<ul>\n<li><code>backtrace</code>, <code>bt</code> - 現在の実行フレームのバックトレースを表示します。</li>\n<li><code>list(5)</code> - 現在の行の前後のソースコードを表示します (例では前後とも 5 行が表示されます)。</li>\n<li><code>watch(expr)</code> - 式をウォッチリストに追加します。</li>\n<li><code>unwatch(expr)</code> - 式をウォッチリストから削除します。</li>\n<li><code>watchers</code> - ウォッチしている全ての式とその値を表示します (各ブレークポイントで自動的に表示されます)。</li>\n<li><code>repl</code> - デバッグしているスクリプトをコンテキストとする REPL を開きます。</li>\n</ul>\n",
              "type": "module",
              "displayName": "Info"
            },
            {
              "textRaw": "Execution control",
              "name": "execution_control",
              "desc": "<!--\n* `run` - Run script (automatically runs on debugger's start)\n* `restart` - Restart script\n* `kill` - Kill script\n-->\n\n<ul>\n<li><code>run</code> - スクリプトを実行します (デバッガを開始すると自動的に実行します)。</li>\n<li><code>restart</code> - スクリプトを再実行します。</li>\n<li><code>kill</code> - スクリプトを終了します。</li>\n</ul>\n",
              "type": "module",
              "displayName": "Execution control"
            },
            {
              "textRaw": "Various",
              "name": "various",
              "desc": "<!--\n* `scripts` - List all loaded scripts\n* `version` - Display v8's version\n-->\n\n<ul>\n<li><code>scripts</code> - ロードされている全スクリプトの一覧を表示します。</li>\n<li><code>version</code> - v8 のバージョンを表示します。</li>\n</ul>\n",
              "type": "module",
              "displayName": "Various"
            }
          ],
          "type": "misc",
          "displayName": "Commands reference"
        },
        {
          "textRaw": "Advanced Usage",
          "name": "advanced_usage",
          "desc": "<!--\nThe V8 debugger can be enabled and accessed either by starting Node with\nthe `--debug` command-line flag or by signaling an existing Node process\nwith `SIGUSR1`.\n-->\n\n<p>V8 デバッガは Node をコマンドラインの <code>--debug</code> フラグで起動したり、起動済みの Node プロセスに <code>SIGUSR1</code> シグナルを送ることでも有効にできます。\n\n</p>\n",
          "type": "misc",
          "displayName": "Advanced Usage"
        }
      ]
    }
  ],
  "globals": [
    {
      "textRaw": "global",
      "name": "global",
      "type": "global",
      "desc": "<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} グローバルなネームスペースのオブジェクト</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>ブラウザでは、トップレベルのスコープはグローバルスコープです。\nこれは、ブラウザではグローバルスコープで <code>var something</code> と定義するとグローバル変数になることを意味します。\nNode では異なります。\nトップレベルのスコープはグローバルスコープではありません;\nNode のモジュール内での <code>var something</code> はそのモジュールでローカルになります。\n\n</p>\n"
    },
    {
      "textRaw": "process",
      "name": "process",
      "type": "global",
      "desc": "<!--\nThe process object. See the [process object](process.html#process) section.\n-->\n\n<p>プロセスオブジェクトです。<a href=\"process.html#process\">process object</a> の節を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "console",
      "name": "console",
      "type": "global",
      "desc": "<!--\nUsed to print to stdout and stderr. See the [stdio](stdio.html) section.\n-->\n\n<p>標準出力および標準エラー出力へのプリントに使われます。\n<a href=\"stdio.html\">標準入出力</a> を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "Buffer",
      "name": "Buffer",
      "type": "global",
      "desc": "<!--\nUsed to handle binary data. See the [buffer section](buffer.html).\n-->\n\n<p>バイナリデータを扱うために使われます。\n<a href=\"buffers.html\">buffer セクション</a> を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "clearInterval(t)",
      "type": "global",
      "name": "clearInterval",
      "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n\n</p>\n"
    },
    {
      "textRaw": "console",
      "name": "console",
      "stability": 4,
      "stabilityText": "API Frozen",
      "type": "global",
      "desc": "<!--\nFor printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n-->\n\n<p>標準出力と標準エラーに出力するためのものです。\nほとんどのブラウザで提供されているコンソールオブジェクトと同様ですが、\n出力は標準出力か標準エラー出力に送られます。\n\n\n</p>\n",
      "methods": [
        {
          "textRaw": "console.log()",
          "type": "method",
          "name": "log",
          "desc": "<!--\nPrints to stdout with newline. This function can take multiple arguments in a\n`printf()`-like way. Example:\n-->\n\n<p>改行を伴って標準出力へプリントします。\nこの関数は <code>printf()</code> のように複数の引数を受け付けます。\n\n</p>\n<pre><code>console.log(&apos;count: %d&apos;, count);</code></pre>\n<!--\nIf formatting elements are not found in the first string then `util.inspect`\nis used on each argument.\nSee [util.format()](util.html#util.format) for more information.\n-->\n\n<p>最初の引数文字列からフォーマット要素が見つからなかった場合は、\n<code>util.inspect</code> が各引数に使われます。\nより詳細は <a href=\"util.html#util.format\">util.format()</a> を参照してください。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "console.info()",
          "type": "method",
          "name": "info",
          "desc": "<!--\nSame as `console.log`.\n-->\n\n<p><code>console.log</code> と同じです。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "console.warn()",
          "type": "method",
          "name": "warn",
          "desc": "<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> と同様ですが、標準エラー出力にプリントします。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            },
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "console.error()",
          "type": "method",
          "name": "error",
          "desc": "<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> と同様ですが、標準エラー出力にプリントします。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "console.dir(obj)",
          "type": "method",
          "name": "dir",
          "desc": "<!--\nUses `util.inspect` on `obj` and prints resulting string to stderr.\n-->\n\n<p><code>util.inspect</code> を使って <code>obj</code> を文字列化した結果を標準エラー出力にプリントします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "obj"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.time(label)",
          "type": "method",
          "name": "time",
          "desc": "<!--\nMark a time.\n-->\n\n<p>タイマを作成します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "label"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.timeEnd(label)",
          "type": "method",
          "name": "timeEnd",
          "desc": "<!--\nFinish timer, record output. Example\n-->\n\n<p>タイマを終了し、結果を出力します。例\n\n</p>\n<pre><code>console.time(&apos;100-elements&apos;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&apos;100-elements&apos;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "label"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "console.trace()",
          "type": "method",
          "name": "trace",
          "desc": "<!--\nPrint a stack trace to stderr of the current position.\n-->\n\n<p>現在のスタックトレースを標準エラー出力にプリントします。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "console.assert()",
          "type": "method",
          "name": "assert",
          "desc": "<!--\nSame as `assert.ok()`.\n-->\n\n<p><code>assert.ok()</code> と同じです。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ]
    },
    {
      "textRaw": "process",
      "name": "process",
      "type": "global",
      "desc": "<!--\nThe `process` object is a global object and can be accessed from anywhere.\nIt is an instance of `EventEmitter`.\n-->\n\n<p><code>process</code> はグローバルオブジェクトで、どこからでもアクセスすることができます。\nそれは <code>EventEmitter</code> のインスタンスです。\n\n\n</p>\n",
      "events": [
        {
          "textRaw": "Event: 'exit'",
          "type": "event",
          "name": "exit",
          "desc": "<!--\nEmitted when the process is about to exit.  This is a good hook to perform\nconstant time checks of the module's state (like for unit tests).  The main\nevent loop will no longer be run after the 'exit' callback finishes, so\ntimers may not be scheduled.\n-->\n\n<p>プロセスが終了しようとしている時に生成されます。\nこれは (ユニットテストのように) モジュールの状態を一定の時間でチェックするのに適したフックとなります。\nメインのイベントループは &apos;exit&apos; コールバックが終了するともはや動作しないので、\nタイマーはスケジュールされないかもしれません。\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>exit</code> を監視する例:\n\n</p>\n<pre><code>process.on(&apos;exit&apos;, function () {\n  process.nextTick(function () {\n   console.log(&apos;This will not run&apos;);\n  });\n  console.log(&apos;About to exit.&apos;);\n});</code></pre>\n",
          "params": []
        },
        {
          "textRaw": "Event: 'uncaughtException'",
          "type": "event",
          "name": "uncaughtException",
          "desc": "<!--\nEmitted when an exception bubbles all the way back to the event loop. If a\nlistener is added for this exception, the default action (which is to print\na stack trace and exit) will not occur.\n-->\n\n<p>発生した例外がイベントループまでたどり着いた場合に生成されます。\nもしこの例外に対するリスナーが加えられていれば、\nデフォルトの動作 (それはスタックトレースをプリントして終了します) は起こりません。\n\n</p>\n<!--\nExample of listening for `uncaughtException`:\n-->\n\n<p><code>uncaughtException</code> を監視する例:\n\n</p>\n<pre><code>process.on(&apos;uncaughtException&apos;, function (err) {\n  console.log(&apos;Caught exception: &apos; + err);\n});\n\nsetTimeout(function () {\n  console.log(&apos;This will still run.&apos;);\n}, 500);\n\n// Intentionally cause an exception, but don&apos;t catch it.\nnonexistentFunc();\nconsole.log(&apos;This will not run.&apos;);</code></pre>\n<!--\nNote that `uncaughtException` is a very crude mechanism for exception\nhandling.  Using try / catch in your program will give you more control over\nyour program's flow.  Especially for server programs that are designed to\nstay running forever, `uncaughtException` can be a useful safety mechanism.\n-->\n\n<p><code>uncaughtException</code> は例外を扱うとても荒削りなメカニズムであることに注意してください。\nプログラムの中で try / catch を使えばもっとプログラムの流れをうまく制御できるでしょう。\n特にサーバプログラムはいつまでも実行し続けるように設計されるので、\n<code>uncaughtException</code> は有益で安全なメカニズムになり得ます。\n\n\n</p>\n",
          "params": []
        },
        {
          "textRaw": "Signal Events",
          "name": "SIGINT, SIGUSR1, etc.",
          "type": "event",
          "desc": "<!--\nEmitted when the processes receives a signal. See sigaction(2) for a list of\nstandard POSIX signal names such as SIGINT, SIGUSR1, etc.\n-->\n\n<p>プロセスがシグナルを受信した場合に生成されます。\nSIGINT、SIGUSR1、その他の POSIX 標準シグナル名の一覧について は sigaction(2) を参照してください。\n\n</p>\n<!--\nExample of listening for `SIGINT`:\n-->\n\n<p><code>SIGINT</code>を監視する例:\n\n</p>\n<pre><code>// Start reading from stdin so we don&apos;t exit.\nprocess.stdin.resume();\n\nprocess.on(&apos;SIGINT&apos;, function () {\n  console.log(&apos;Got SIGINT.  Press Control-D to exit.&apos;);\n});</code></pre>\n<!--\nAn easy way to send the `SIGINT` signal is with `Control-C` in most terminal\nprograms.\n-->\n\n<p>多くの端末プログラムで簡単に <code>SIGINT</code> を送る方法は <code>Control-C</code> を押すことです。\n\n\n</p>\n",
          "params": []
        }
      ],
      "properties": [
        {
          "textRaw": "process.stdout",
          "name": "stdout",
          "desc": "<!--\nA `Writable Stream` to `stdout`.\n-->\n\n<p><code>stdout</code> に対する <code>Writable Stream</code> です。\n\n</p>\n<!--\nExample: the definition of `console.log`\n-->\n\n<p>例: <code>console.log</code> の定義\n\n</p>\n<pre><code>console.log = function (d) {\n  process.stdout.write(d + &apos;\\n&apos;);\n};</code></pre>\n<!--\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.  They are blocking in the case\nthat they refer to regular files or TTY file descriptors. In the case they\nrefer to pipes, they are non-blocking like other streams.\n-->\n\n<p><code>process.stderr</code> と <code>process.stdout</code> は他のストリームと異なり、\n書き込みは通常ブロックします。\nそれらが通常ファイルや TTY のファイル記述子を参照しているケースでは、\nそれらはブロックします。\nパイプを参照しているケースでは、他のストリームと同様にブロックしません。\n\n\n</p>\n"
        },
        {
          "textRaw": "process.stderr",
          "name": "stderr",
          "desc": "<!--\nA writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.  They are blocking in the case\nthat they refer to regular files or TTY file descriptors. In the case they\nrefer to pipes, they are non-blocking like other streams.\n-->\n\n<p><code>stderr</code> に対する <code>Writable Stream</code> です。\n\n</p>\n<p><code>process.stderr</code> と <code>process.stdout</code> は他のストリームと異なり、\n書き込みは通常ブロックします。\nそれらが通常ファイルや TTY のファイル記述子を参照しているケースでは、\nそれらはブロックします。\nパイプを参照しているケースでは、他のストリームと同様にブロックしません。\n\n\n</p>\n"
        },
        {
          "textRaw": "process.stdin",
          "name": "stdin",
          "desc": "<!--\nA `Readable Stream` for stdin. The stdin stream is paused by default, so one\nmust call `process.stdin.resume()` to read from it.\n-->\n\n<p>標準入力に対する <code>Readable Stream</code> です。\nデフォルトでは、標準入力に対するストリームは中断されているため、\n読み込みのためには <code>process.stdin.resume()</code> を呼び出さなければなりません。\n\n</p>\n<!--\nExample of opening standard input and listening for both events:\n-->\n\n<p>標準入力をオープンして二つのイベントを監視する例:\n\n</p>\n<pre><code>process.stdin.resume();\nprocess.stdin.setEncoding(&apos;utf8&apos;);\n\nprocess.stdin.on(&apos;data&apos;, function (chunk) {\n  process.stdout.write(&apos;data: &apos; + chunk);\n});\n\nprocess.stdin.on(&apos;end&apos;, function () {\n  process.stdout.write(&apos;end&apos;);\n});</code></pre>\n"
        },
        {
          "textRaw": "process.argv",
          "name": "argv",
          "desc": "<!--\nAn array containing the command line arguments.  The first element will be\n'node', the second element will be the name of the JavaScript file.  The\nnext elements will be any additional command line arguments.\n-->\n\n<p>コマンドライン引数を含む配列です。\n最初の要素は &apos;node&apos;、2 番目の要素は JavaScript ファイルの名前になります。\nその後の要素はコマンドラインの追加の引数になります。\n\n</p>\n<pre><code>// print process.argv\nprocess.argv.forEach(function (val, index, array) {\n  console.log(index + &apos;: &apos; + val);\n});</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>このように出力されます:\n\n</p>\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four</code></pre>\n"
        },
        {
          "textRaw": "process.execPath",
          "name": "execPath",
          "desc": "<!--\nThis is the absolute pathname of the executable that started the process.\n-->\n\n<p>プロセスによって開始された実行可能ファイルの絶対パスです。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>/usr/local/bin/node</code></pre>\n"
        },
        {
          "textRaw": "process.env",
          "name": "env",
          "desc": "<!--\nAn object containing the user environment. See environ(7).\n-->\n\n<p>ユーザの環境を含むオブジェクトです。environ(7) を参照してください。\n\n\n</p>\n"
        },
        {
          "textRaw": "process.version",
          "name": "version",
          "desc": "<!--\nA compiled-in property that exposes `NODE_VERSION`.\n-->\n\n<p><code>NODE_VERSION</code> を提示するコンパイル済みプロパティです。\n\n</p>\n<pre><code>console.log(&apos;Version: &apos; + process.version);</code></pre>\n"
        },
        {
          "textRaw": "process.versions",
          "name": "versions",
          "desc": "<!--\nA property exposing version strings of node and its dependencies.\n-->\n\n<p>node と依存ライブラリのバージョン文字列を提示します。\n\n</p>\n<pre><code>console.log(process.versions);</code></pre>\n<!--\nWill output:\n-->\n\n<p>は以下を出力します。\n\n</p>\n<pre><code>{ node: &apos;0.4.12&apos;,\n  v8: &apos;3.1.8.26&apos;,\n  ares: &apos;1.7.4&apos;,\n  ev: &apos;4.4&apos;,\n  openssl: &apos;1.0.0e-fips&apos; }</code></pre>\n"
        },
        {
          "textRaw": "process.installPrefix",
          "name": "installPrefix",
          "desc": "<!--\nA compiled-in property that exposes `NODE_PREFIX`.\n-->\n\n<p><code>NODE_PREFIX</code> を提示するコンパイル済みプロパティです。\n\n</p>\n<pre><code>console.log(&apos;Prefix: &apos; + process.installPrefix);</code></pre>\n"
        },
        {
          "textRaw": "process.pid",
          "name": "pid",
          "desc": "<!--\nThe PID of the process.\n-->\n\n<p>プロセスの PID です。\n\n</p>\n<pre><code>console.log(&apos;This process is pid &apos; + process.pid);</code></pre>\n"
        },
        {
          "textRaw": "process.title",
          "name": "title",
          "desc": "<!--\nGetter/setter to set what is displayed in 'ps'.\n-->\n\n<p>&apos;ps&apos; でどのよう表示されるかを設定するための getter/setter です。\n\n\n</p>\n"
        },
        {
          "textRaw": "process.arch",
          "name": "arch",
          "desc": "<!--\nWhat processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n-->\n\n<p>実行しているプロセッサのアーキテクチャ: <code>&apos;arm&apos;</code>、<code>&apos;ia32&apos;</code>、または\n<code>&apos;x64&apos;</code>。\n\n</p>\n<pre><code>console.log(&apos;This processor architecture is &apos; + process.arch);</code></pre>\n"
        },
        {
          "textRaw": "process.platform",
          "name": "platform",
          "desc": "<!--\nWhat platform you're running on. `'linux2'`, `'darwin'`, etc.\n-->\n\n<p>どのプラットフォームで動いているかです。<code>&apos;linux2&apos;</code>、<code>&apos;darwin&apos;</code>、など。\n\n</p>\n<pre><code>console.log(&apos;This platform is &apos; + process.platform);</code></pre>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "process.chdir(directory)",
          "type": "method",
          "name": "chdir",
          "desc": "<!--\nChanges the current working directory of the process or throws an exception if that fails.\n-->\n\n<p>プロセスのカレントワーキングディレクトリを変更します。\nもし失敗した場合は例外をスローします。\n\n</p>\n<pre><code>console.log(&apos;Starting directory: &apos; + process.cwd());\ntry {\n  process.chdir(&apos;/tmp&apos;);\n  console.log(&apos;New directory: &apos; + process.cwd());\n}\ncatch (err) {\n  console.log(&apos;chdir: &apos; + err);\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "directory"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.cwd()",
          "type": "method",
          "name": "cwd",
          "desc": "<!--\nReturns the current working directory of the process.\n-->\n\n<p>プロセスのカレントワーキングディレクトリを返します。\n\n</p>\n<pre><code>console.log(&apos;Current directory: &apos; + process.cwd());</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.exit([code])",
          "type": "method",
          "name": "exit",
          "desc": "<!--\nEnds the process with the specified `code`.  If omitted, exit uses the\n'success' code `0`.\n-->\n\n<p>指定の <code>code</code> でプロセスを終了します。\nもし省略されると、「成功」を示すコード <code>0</code> を使って終了します。\n\n</p>\n<!--\nTo exit with a 'failure' code:\n-->\n\n<p>「失敗」を示すコードで終了する例:\n\n</p>\n<pre><code>process.exit(1);</code></pre>\n<!--\nThe shell that executed node should see the exit code as 1.\n-->\n\n<p>node を実行したシェルで終了コードが 1 であることを見ることができるでしょう。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "code",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.getgid()",
          "type": "method",
          "name": "getgid",
          "desc": "<!--\nGets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n-->\n\n<p>プロセスのグループ識別子を取得します (getgid(2) 参照)。\nこれは数値によるグループ ID で、グループ名ではありません。\n\n</p>\n<pre><code>console.log(&apos;Current gid: &apos; + process.getgid());</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.setgid(id)",
          "type": "method",
          "name": "setgid",
          "desc": "<!--\nSets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>プロセスのグループ識別子を設定します (setgid(2) 参照)。\nこれは数値による ID もグループ名の文字列のどちらも受け入れます。\nもしグループ名が指定されると、数値による ID が解決できるまでこのメソッドはブロックします。\n\n</p>\n<pre><code>console.log(&apos;Current gid: &apos; + process.getgid());\ntry {\n  process.setgid(501);\n  console.log(&apos;New gid: &apos; + process.getgid());\n}\ncatch (err) {\n  console.log(&apos;Failed to set gid: &apos; + err);\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.getuid()",
          "type": "method",
          "name": "getuid",
          "desc": "<!--\nGets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n-->\n\n<p>プロセスのユーザ識別子を取得します (getuid(2) 参照)。\nこれは数値によるユーザ ID で、ユーザ名ではありません。\n\n</p>\n<pre><code>console.log(&apos;Current uid: &apos; + process.getuid());</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.setuid(id)",
          "type": "method",
          "name": "setuid",
          "desc": "<!--\nSets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>プロセスのユーザ識別子を設定します (setuid(2) 参照)。\nこれは数値による ID もユーザ名の文字列のどちらも受け入れます。\nもしユーザ名が指定されると、数値による ID が解決できるまでこのメソッドはブロックします。\n\n</p>\n<pre><code>console.log(&apos;Current uid: &apos; + process.getuid());\ntry {\n  process.setuid(501);\n  console.log(&apos;New uid: &apos; + process.getuid());\n}\ncatch (err) {\n  console.log(&apos;Failed to set uid: &apos; + err);\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.kill(pid, [signal])",
          "type": "method",
          "name": "kill",
          "desc": "<!--\nSend a signal to a process. `pid` is the process id and `signal` is the\nstring describing the signal to send.  Signal names are strings like\n'SIGINT' or 'SIGUSR1'.  If omitted, the signal will be 'SIGTERM'.\nSee kill(2) for more information.\n-->\n\n<p>プロセスにシグナルを送ります。\n<code>pid</code> はプロセス ID で <code>signal</code> は送信されるシグナルを文字列で記述したものです。\nシグナルの名前は &apos;SIGINT&apos; や &apos;SIGUSR1&apos; のような文字列です。\n省略すると、シグナルは &apos;SIGTERM&apos; となります。\n詳細は kill(2) を参照してください。\n\n</p>\n<!--\nNote that just because the name of this function is `process.kill`, it is\nreally just a signal sender, like the `kill` system call.  The signal sent\nmay do something other than kill the target process.\n-->\n\n<p>この関数の名前が <code>process.kill</code> であるとおり、\nこれは <code>kill</code> システムコールのように本当にシグナルを送信することに注意してください。\n対象のプロセスを殺すだけでなく、他のシグナルも送信されます。\n\n</p>\n<!--\nExample of sending a signal to yourself:\n-->\n\n<p>自身にシグナルを送信する例:\n\n</p>\n<pre><code>process.on(&apos;SIGHUP&apos;, function () {\n  console.log(&apos;Got SIGHUP signal.&apos;);\n});\n\nsetTimeout(function () {\n  console.log(&apos;Exiting.&apos;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &apos;SIGHUP&apos;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "pid"
                },
                {
                  "name": "signal",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.memoryUsage()",
          "type": "method",
          "name": "memoryUsage",
          "desc": "<!--\nReturns an object describing the memory usage of the Node process\nmeasured in bytes.\n-->\n\n<p>Node プロセスのメモリ使用状況をバイト単位で記述したオブジェクトを返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(process.memoryUsage()));</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>このように生成されます:\n\n</p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }</code></pre>\n<!--\n`heapTotal` and `heapUsed` refer to V8's memory usage.\n-->\n\n<p><code>heapTotal</code> と <code>heapUsed</code> は V8 のメモリ使用状況を参照します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.nextTick(callback)",
          "type": "method",
          "name": "nextTick",
          "desc": "<!--\nOn the next loop around the event loop call this callback.\nThis is *not* a simple alias to `setTimeout(fn, 0)`, it's much more\nefficient.\n-->\n\n<p>イベントループの次以降のループでコールバックを呼び出します。\nこれは <code>setTimeout(fn, 0)</code> の単純なエイリアス<em>ではなく</em>、\nはるかに効率的です。\n\n</p>\n<pre><code>process.nextTick(function () {\n  console.log(&apos;nextTick callback&apos;);\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.umask([mask])",
          "type": "method",
          "name": "umask",
          "desc": "<!--\nSets or reads the process's file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if `mask` argument is\ngiven, otherwise returns the current mask.\n-->\n\n<p>プロセスのファイルモード作成マスクを設定または読み込みます。\n子プロセスは親プロセスからマスクを継承します。\n<code>mask</code> 引数が与えられると元のマスクが返され、そうでなければ現在のマスクが返されます。\n\n</p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&apos;Changed umask from: &apos; + oldmask.toString(8) +\n            &apos; to &apos; + newmask.toString(8));</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "mask",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.uptime()",
          "type": "method",
          "name": "uptime",
          "desc": "<!--\nNumber of seconds Node has been running.\n-->\n\n<p>Node が実行されてからの秒数です。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ]
    }
  ],
  "vars": [
    {
      "textRaw": "require()",
      "type": "var",
      "name": "require",
      "desc": "<!--\nTo require modules. See the [Modules](modules.html#modules) section.\n`require` isn't actually a global but rather local to each module.\n-->\n\n<p>require モジュールを指します。<a href=\"modules.html#modules\">モジュール</a> の節を参照してください。\n<code>require</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "require.resolve()",
          "type": "method",
          "name": "resolve",
          "desc": "<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> の内部でモジュールの位置を検索するために使われます。\nモジュールのロードは行わず、ファイル名を解決して返すだけです。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "`cache` {Object} ",
          "name": "cache",
          "desc": "<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>モジュールが要求されると、このオブジェクトの中にキャッシュされます。\nこのオブジェクトからキーと値を削除すると、次にそのモジュールが\n<code>require</code> されたときにリロードされます。\n\n</p>\n"
        }
      ]
    },
    {
      "textRaw": "__filename",
      "name": "__filename",
      "type": "var",
      "desc": "<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>実行されているコードのファイル名です。これは解決された絶対パスです。\nメインプログラムでは、必ずしもコマンドライン引数で使われたファイル名と\n同じではありません。\nモジュールの中では、この値はそのモジュールファイルのパスとなります。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
    },
    {
      "textRaw": "__dirname",
      "name": "__dirname",
      "type": "var",
      "desc": "<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>現在実行されているスクリプトが存在するディレクトリの名前です。\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>例: <code>node example.js</code> を <code>/Users/mjr</code> で実行する\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n\n</p>\n"
    },
    {
      "textRaw": "module",
      "name": "module",
      "type": "var",
      "desc": "<!--\nA reference to the current module. In particular\n`module.exports` is the same as the `exports` object. See `src/node.js`\nfor more information.\n`module` isn't actually a global but rather local to each module.\n-->\n\n<p>現在のモジュールへの参照です。\n特に <code>module.exports</code> は <code>exports</code> オブジェクトと同じです。\nより詳しくは <code>src/node.js</code> を参照してください。\n<code>module</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n"
    },
    {
      "textRaw": "exports",
      "name": "exports",
      "type": "var",
      "desc": "<!--\nAn object which is shared between all instances of the current module and\nmade accessible through `require()`.\n`exports` is the same as the `module.exports` object. See `src/node.js`\nfor more information.\n`exports` isn't actually a global but rather local to each module.\n-->\n\n<p>現在のモジュールの全てのインスタンス間で共有されるオブジェクトで、\n<code>require</code> を通じてアクセス可能になります。\n<code>exports</code> は <code>module.exports</code> と同じオブジェクトです。\nより詳しくは <code>src/node.js</code> を参照してください。\n<code>exports</code> は実際はグローバルではなく、各モジュール毎のローカルです。\n\n</p>\n<!--\nSee the [module system documentation](modules.html) for more\ninformation.\n\nSee the [module section](modules.html) for more information.\n-->\n\n<p>より詳細は<a href=\"modules.html\">モジュールのセクション</a> を参照してください。\n\n</p>\n"
    }
  ],
  "methods": [
    {
      "textRaw": "setInterval(cb, ms)",
      "type": "method",
      "name": "setInterval",
      "desc": "<!--\nThe timer functions are global variables. See the [timers](timers.html) section.\n-->\n\n<p>タイマー関数はグローバル変数です。<a href=\"timers.html\">タイマー</a> を参照してください。\n\n</p>\n",
      "signatures": [
        {
          "params": [
            {
              "name": "cb"
            },
            {
              "name": "ms"
            }
          ]
        }
      ]
    }
  ],
  "modules": [
    {
      "textRaw": "Timers",
      "name": "timers",
      "stability": 5,
      "stabilityText": "Locked",
      "desc": "<!--\nAll of the timer functions are globals.  You do not need to `require()`\nthis module in order to use them.\n-->\n\n<p>全てのタイマ関数はグローバルです。\nこのモジュールを使うために <code>require()</code> をする必要はありません。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "setTimeout(callback, delay, [arg], [...])",
          "type": "method",
          "name": "setTimeout",
          "desc": "<!--\nTo schedule execution of a one-time `callback` after `delay` milliseconds. Returns a\n`timeoutId` for possible use with `clearTimeout()`. Optionally you can\nalso pass arguments to the callback.\n-->\n\n<p><code>delay</code> ミリ秒が経過した後で、\n<code>callback</code> が一度だけ実行されるようにスケジュールします。\n<code>clearTimeout()</code> で使うことができる <code>timeoutId</code> を返します。\nオプションとして、コールバックへの引数を渡すこともできます。\n\n</p>\n<!--\nIt is important to note that your callback will probably not be called in exactly\n`delay` milliseconds - Node.js makes no guarantees about the exact timing of when\nthe callback will fire, nor of the ordering things will fire in. The callback will\nbe called as close as possible to the time specified.\n-->\n\n<p>コールバックが正確に <code>delay</code> ミリ秒後に呼び出されるとは限らない点に\n注目することは重要です - \nNode.js はコールバックが呼び出される正確なタイミングも、\n呼び出される順番も保証しません。\nコールバックはできるだけ指定された時間に近いタイミングで呼び出されます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "callback"
                },
                {
                  "name": "delay"
                },
                {
                  "name": "arg",
                  "optional": true
                },
                {
                  "name": "...",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "clearTimeout(timeoutId)",
          "type": "method",
          "name": "clearTimeout",
          "desc": "<!--\nPrevents a timeout from triggering.\n-->\n\n<p>タイムアウトがトリガーされるのを止めます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "timeoutId"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "setInterval(callback, delay, [arg], [...])",
          "type": "method",
          "name": "setInterval",
          "desc": "<!--\nTo schedule the repeated execution of `callback` every `delay` milliseconds.\nReturns a `intervalId` for possible use with `clearInterval()`. Optionally\nyou can also pass arguments to the callback.\n-->\n\n<p><code>delay</code> ミリ秒が経過するごとに繰り返し <code>callback</code> が実行されるようにスケジュールします。\n<code>clearInterval()</code> で使うことができる <code>intervalId</code> を返します。\nオプションとして、コールバックへの引数を渡すこともできます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "callback"
                },
                {
                  "name": "delay"
                },
                {
                  "name": "arg",
                  "optional": true
                },
                {
                  "name": "...",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "clearInterval(intervalId)",
          "type": "method",
          "name": "clearInterval",
          "desc": "<!--\nStops a interval from triggering.\n-->\n\n<p>インターバルがトリガーされるのを止めます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "intervalId"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Timers"
    },
    {
      "textRaw": "Modules",
      "name": "module",
      "stability": 5,
      "stabilityText": "Locked",
      "desc": "<!--\nNode has a simple module loading system.  In Node, files and modules are in\none-to-one correspondence.  As an example, `foo.js` loads the module\n`circle.js` in the same directory.\n-->\n\n<p>Node はシンプルなモジュールローディングシステムを持ちます。\nNode では、ファイルとモジュールは１対１に対応します。\n例として、 <code>foo.js</code> は、同じディレクトリにある <code>circle.js</code> をロードしています。\n\n</p>\n<!--\nThe contents of `foo.js`:\n-->\n\n<p><code>foo.js</code> の内容:\n\n</p>\n<pre><code>var circle = require(&apos;./circle.js&apos;);\nconsole.log( &apos;The area of a circle of radius 4 is &apos;\n           + circle.area(4));</code></pre>\n<!--\nThe contents of `circle.js`:\n-->\n\n<p><code>circle.js</code> の内容:\n\n</p>\n<pre><code>var PI = Math.PI;\n\nexports.area = function (r) {\n  return PI * r * r;\n};\n\nexports.circumference = function (r) {\n  return 2 * PI * r;\n};</code></pre>\n<!--\nThe module `circle.js` has exported the functions `area()` and\n`circumference()`.  To export an object, add to the special `exports`\nobject.\n\nVariables\nlocal to the module will be private. In this example the variable `PI` is\nprivate to `circle.js`.\n\nThe module system is implemented in the `require(\"module\")` module.\n-->\n\n<p><code>circle.js</code> モジュールは <code>area()</code> と <code>circumference()</code> をエクスポートしています。\nオブジェクトをエクスポートするには、 <code>exports</code> という特別なオブジェクトに加えます。\n\n</p>\n<p>モジュールのローカル変数はプライベートです。\nこの例の場合、変数 <code>PI</code> は <code>circle.js</code> のプライベート変数です。\n\n</p>\n<p>モジュールシステムは <code>require(&quot;module&quot;)</code> モジュールによって実装されます。\n\n</p>\n",
      "miscs": [
        {
          "textRaw": "Cycles",
          "name": "Cycles",
          "type": "misc",
          "desc": "<!--\nWhen there are circular `require()` calls, a module might not be\ndone being executed when it is returned.\n\nConsider this situation:\n-->\n\n<p><code>require()</code> が循環的に呼び出される場合、実行が完了していないモジュールが\n返されることがあります。\n\n</p>\n<p>次の状況を考えてください:\n\n</p>\n<p><code>a.js</code>:\n\n</p>\n<pre><code>console.log(&apos;a starting&apos;);\nexports.done = false;\nvar b = require(&apos;./b.js&apos;);\nconsole.log(&apos;in a, b.done = %j&apos;, b.done);\nexports.done = true;\nconsole.log(&apos;a done&apos;);</code></pre>\n<p><code>b.js</code>:\n\n</p>\n<pre><code>console.log(&apos;b starting&apos;);\nexports.done = false;\nvar a = require(&apos;./a.js&apos;);\nconsole.log(&apos;in b, a.done = %j&apos;, a.done);\nexports.done = true;\nconsole.log(&apos;b done&apos;);</code></pre>\n<p><code>main.js</code>:\n\n</p>\n<pre><code>console.log(&apos;main starting&apos;);\nvar a = require(&apos;./a.js&apos;);\nvar b = require(&apos;./b.js&apos;);\nconsole.log(&apos;in main, a.done=%j, b.done=%j&apos;, a.done, b.done);</code></pre>\n<!--\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`.  At that\npoint, `b.js` tries to load `a.js`.  In order to prevent an infinite\nloop an **unfinished copy** of the `a.js` exports object is returned to the\n`b.js` module.  `b.js` then finishes loading, and its exports object is\nprovided to the `a.js` module.\n\nBy the time `main.js` has loaded both modules, they're both finished.\nThe output of this program would thus be:\n-->\n\n<p><code>main.js</code> が <code>a.js</code> をロードすると、<code>a.js</code> は <code>b.js</code> をロードします。\nポイントは、<code>b.js</code> は <code>a.js</code> のロードを試みることです。\n無限ループを避けるため、<code>a.js</code> がエクスポートしたオブジェクトの\n<strong>未完了のコピー</strong> が <code>b.js</code> モジュールに返されます。\n<code>b.js</code> のロードが完了すると、エクスポートされたオブジェクトが <code>a.js</code>\nモジュールに提供されます。\n\n</p>\n<p><code>main.js</code> が両方のモジュールをロードするまでには、どちらも完了します。\nこのプログラムの出力はこのようになります:\n\n</p>\n<pre><code>$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true</code></pre>\n<!--\nIf you have cyclic module dependencies in your program, make sure to\nplan accordingly.\n-->\n\n<p>プログラムが循環参照するモジュールを持つ場合は、計画が適切か確認してください。\n\n\n</p>\n"
        },
        {
          "textRaw": "Core Modules",
          "name": "Core Modules",
          "type": "misc",
          "desc": "<!--\nNode has several modules compiled into the binary.  These modules are\ndescribed in greater detail elsewhere in this documentation.\n\nThe core modules are defined in node's source in the `lib/` folder.\n\nCore modules are always preferentially loaded if their identifier is\npassed to `require()`.  For instance, `require('http')` will always\nreturn the built in HTTP module, even if there is a file by that name.\n-->\n\n<p>Node にはバイナリにコンパイル済みのいくつかのモジュールがあります。\nこれらのモジュールについては、このドキュメントの他の場所でより詳しく記述されています。\n\n</p>\n<p>コアモジュールは、 Node のソースの <code>lib/</code> フォルダにて定義されています。\n\n</p>\n<p><code>require()</code> では常にコアモジュールの識別名を優先的に解釈します。\n例えば <code>require(&apos;http&apos;)</code> は、例え同名のファイルが存在していたとしても、常にビルトイインの HTTP モジュールを返します。\n\n</p>\n"
        },
        {
          "textRaw": "File Modules",
          "name": "File Modules",
          "type": "misc",
          "desc": "<!--\nIf the exact filename is not found, then node will attempt to load the\nrequired filename with the added extension of `.js`, `.json`, and then `.node`.\n\n`.js` files are interpreted as JavaScript text files, and `.json` files are\nparsed as JSON text files. `.node` files are interpreted as compiled addon\nmodules loaded with `dlopen`.\n\nA module prefixed with `'/'` is an absolute path to the file.  For\nexample, `require('/home/marco/foo.js')` will load the file at\n`/home/marco/foo.js`.\n\nA module prefixed with `'./'` is relative to the file calling `require()`.\nThat is, `circle.js` must be in the same directory as `foo.js` for\n`require('./circle')` to find it.\n\nWithout a leading '/' or './' to indicate a file, the module is either a\n\"core module\" or is loaded from a `node_modules` folder.\n-->\n\n<p>指定された名前のファイルが見つからなければ、 Node は指定されたファイル名に\n<code>.js</code>、<code>.json</code>、または <code>.node</code> を付けたものを読み込もうとします。\n\n</p>\n<p><code>.js</code> ファイルは JavaScript ファイルとして解釈され、\n<code>.json</code> ファイルは JSON ファイルとして解釈されます。\n一方 <code>.node</code> ファイルはコンパイル済みのアドオンモジュールとして解釈され、\n<code>dlopen</code> を使って読み込まれます。\n\n</p>\n<p><code>&apos;/&apos;</code> から始まるモジュールは、ファイルへの絶対パスと見なされます。\n例えば、 <code>require(&apos;/home/marco/foo.js&apos;)</code> は <code>/home/macro/foo.js</code> を読み込みます。\n\n</p>\n<p><code>&apos;./&apos;</code> から始まるモジュールは、 <code>require()</code> を呼んだファイルからの相対パスになります。\nすなわち、 <code>foo.js</code> から <code>require(&apos;./circle&apos;)</code> によって <code>circle.js</code> を読み込むには、 <code>circle.js</code> は <code>foo.js</code> と同じディレクトリに存在していなければなりません。\n\n</p>\n<p>&apos;/&apos; や &apos;./&apos; が先頭になければ、モジュールは &quot;コアモジュール&quot; であるかもしくは <code>node_modules</code> フォルダから読み込まれることになります。\n\n</p>\n"
        },
        {
          "textRaw": "Loading from `node_modules` Folders",
          "name": "Loading from `node_modules` Folders",
          "type": "misc",
          "desc": "<!--\nIf the module identifier passed to `require()` is not a native module,\nand does not begin with `'/'`, `'../'`, or `'./'`, then node starts at the\nparent directory of the current module, and adds `/node_modules`, and\nattempts to load the module from that location.\n\nIf it is not found there, then it moves to the parent directory, and so\non, until the root of the tree is reached.\n\nFor example, if the file at `'/home/ry/projects/foo.js'` called\n`require('bar.js')`, then node would look in the following locations, in\nthis order:\n-->\n\n<p>もし <code>require()</code> に渡されたモジュール識別子がネイティブモジュールではなく、かつ  <code>&apos;/&apos;</code> や <code>&apos;../&apos;</code> や <code>&apos;./&apos;</code> から始まらないならば、 Node は現在のモジュールの親ディレクトリに <code>&apos;/node_modules&apos;</code> を付与してそこからモジュールを読み込もうとします。\n\n</p>\n<p>そこに見つからない場合はさらに親ディレクトリに移動し、モジュールが見つかるか root ディレクトリに到達するまで同様のことを繰り返していきます。\n\n</p>\n<p>例えば <code>&apos;/home/ry/projects/foo.js&apos;</code> の中で <code>require(&apos;bar.js&apos;)</code> を呼んでいた場合、 Node は下記の位置を上から順番に見ていきます。\n\n</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<!--\nThis allows programs to localize their dependencies, so that they do not\nclash.\n-->\n\n<p>この仕組みによって、プログラムはクラッシュを避けるために依存関係を上書きすることができるのです。\n\n</p>\n"
        },
        {
          "textRaw": "Folders as Modules",
          "name": "Folders as Modules",
          "type": "misc",
          "desc": "<!--\nIt is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to `require()` as\nan argument.\n\nThe first is to create a `package.json` file in the root of the folder,\nwhich specifies a `main` module.  An example package.json file might\nlook like this:\n-->\n\n<p>プログラムとライブラリをディレクトリ内にまとめて、そのエントリポイントを提示するという便利な方法もあります。\nそれには <code>require()</code> に引数として何を渡すかによって3通りの方法があります。\n\n</p>\n<p>1つ目は、 <code>package.json</code> というファイルをフォルダ直下に作成し、 <code>main</code> モジュールを指定するという方法です。\n例えば、 package.json は以下のようなファイルになります:\n\n</p>\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }</code></pre>\n<!--\nIf this was in a folder at `./some-library`, then\n`require('./some-library')` would attempt to load\n`./some-library/lib/some-library.js`.\n\nThis is the extent of Node's awareness of package.json files.\n\nIf there is no package.json file present in the directory, then node\nwill attempt to load an `index.js` or `index.node` file out of that\ndirectory.  For example, if there was no package.json file in the above\nexample, then `require('./some-library')` would attempt to load:\n-->\n\n<p>もし <code>./some-library</code> フォルダ内にこのファイルがあれば、 <code>require(&apos;./some-library&apos;)</code> は <code>./some-library/lib/some-library.js</code> を読みにいきます。\n\n</p>\n<p>これは、 Node が package.json の存在に気づくことによってもたらされます。\n\n</p>\n<p>もし package.json がディレクトリに存在していなければ、 Node はそのディレクトリで <code>index.js</code> もしくは <code>index.node</code> を探します。\n例えば、もし上の例で package.json がいるが存在しないとすると、 <code>require(&apos;./some-library&apos;)</code> は以下のファイルを読み込もうとします: \n\n</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n"
        },
        {
          "textRaw": "Caching",
          "name": "Caching",
          "type": "misc",
          "desc": "<!--\nModules are cached after the first time they are loaded.  This means\n(among other things) that every call to `require('foo')` will get\nexactly the same object returned, if it would resolve to the same file.\n-->\n\n<p>モジュールは初めて読み込まれたときにキャッシュされます。\nすなわち（他のキャッシュと同様に） <code>require(&apos;foo&apos;)</code> を呼ぶたびに、もし引数の意味するものが同一のファイルであったなら全く同一のオブジェクトが返されます。\n\n</p>\n<!--\nMultiple calls to `require('foo')` may not cause the module code to be\nexecuted multiple times.  This is an important feature.  With it,\n\"partially done\" objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.\n-->\n\n<p><code>require(&apos;foo&apos;)</code> が複数回呼び出されても、モジュールが複数回実行されることにはなりません。\nこれは重要な特徴です。\nそのため、「部分的に完了した」オブジェクトを返すことで、\n推移的な依存関係が循環していてもロードすることができます。\n\n</p>\n<!--\nIf you want to have a module execute code multiple times, then export a\nfunction, and call that function.\n-->\n\n<p>もしモジュールを複数回実行したければ、関数を公開して、\nその関数を呼び出してください。\n\n</p>\n",
          "miscs": [
            {
              "textRaw": "Module Caching Caveats",
              "name": "Module Caching Caveats",
              "type": "misc",
              "desc": "<!--\nModules are cached based on their resolved filename.  Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from `node_modules` folders), it is not a *guarantee*\nthat `require('foo')` will always return the exact same object, if it\nwould resolve to different files.\n-->\n\n<p>モジュールは解決されたファイル名に基づいてキャッシュされます。\n異なる場所にあるモジュールから呼び出されたモジュールは、\n(<code>node_module</code> フォルダからロードされるため) 異なったファイル名で\n解決されることがあるため、 <code>require(&apos;foo&apos;)</code> が常に同じオブジェクトを返す\n<em>保証</em>はなく、異なるファイルとして解決されます。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "All Together...",
          "name": "All Together...",
          "type": "misc",
          "desc": "<!--\nTo get the exact filename that will be loaded when `require()` is called, use\nthe `require.resolve()` function.\n-->\n\n<p><code>require()</code> が呼び出されると、正確なファイル名を得るために <code>require.resolve()</code> が使われます。\n\n</p>\n<!--\nPutting together all of the above, here is the high-level algorithm\nin pseudocode of what require.resolve does:\n-->\n\n<p>上で述べたことをまとめると、 require.resolve は以下の擬似コードで記述されるようなハイレベルなアルゴリズムに則っています:\n\n</p>\n<pre><code>require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with &apos;./&apos; or &apos;/&apos; or &apos;../&apos;\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n3. LOAD_NODE_MODULES(X, dirname(Y))\n4. THROW &quot;not found&quot;\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for &quot;main&quot; field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let ROOT = index of first instance of &quot;node_modules&quot; in PARTS, or 0\n3. let I = count of PARTS - 1\n4. let DIRS = []\n5. while I &gt; ROOT,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   b. DIRS = DIRS + DIR\n   c. let I = I - 1\n6. return DIRS</code></pre>\n"
        },
        {
          "textRaw": "Loading from the global folders",
          "name": "Loading from the global folders",
          "type": "misc",
          "desc": "<!--\nIf the `NODE_PATH` environment variable is set to a colon-delimited list\nof absolute paths, then node will search those paths for modules if they\nare not found elsewhere.  (Note: On Windows, `NODE_PATH` is delimited by\nsemicolons instead of colons.)\n\nAdditionally, node will search in the following locations:\n-->\n\n<p><code>NODE_PATH</code> 環境変数に絶対パスをコロンで区切ったリストを設定すると、\nnode は他で見つからなかったモジュールをそれらのパスから探します。\n(注意: Windows では、<code>NODE_PATH</code> はコロンではなくセミコロンで区切られます)\n\n</p>\n<p>加えると、node は以下の場所から検索します。\n\n</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<!--\nWhere `$HOME` is the user's home directory, and `$PREFIX` is node's\nconfigured `installPrefix`.\n\nThese are mostly for historic reasons.  You are highly encouraged to\nplace your dependencies locally in `node_modules` folders.  They will be\nloaded faster, and more reliably.\n-->\n\n<p><code>$HOME</code> はユーザのホームディレクトリ、<code>$PREFIX</code> は node を\nconfigure した時の <code>installPrefix</code> です。\n\n</p>\n<p>これらは主に歴史的な理由によるものです。\nあなたが依存するものはローカルの <code>node_modules</code> フォルダに置くことが\n強く推奨されます。それは素早くロードされ、確実です。\n\n</p>\n"
        },
        {
          "textRaw": "Accessing the main module",
          "name": "Accessing the main module",
          "type": "misc",
          "desc": "<!--\nWhen a file is run directly from Node, `require.main` is set to its\n`module`. That means that you can determine whether a file has been run\ndirectly by testing\n-->\n\n<p>ファイルがNodeによって直接実行される場合、その <code>module</code> が\n<code>require.main</code> に設定されます。\nこれは、ファイルが直接実行されたかを決定できることを意味します。\n\n</p>\n<pre><code>require.main === module</code></pre>\n<!--\nFor a file `foo.js`, this will be `true` if run via `node foo.js`, but\n`false` if run by `require('./foo')`.\n\nBecause `module` provides a `filename` property (normally equivalent to\n`__filename`), the entry point of the current application can be obtained\nby checking `require.main.filename`.\n-->\n\n<p><code>foo.js</code> ファイルの場合、<code>node foo.js</code> と実行された場合にこれは <code>true</code> \nになりますが、<code>require(&apos;./foo&apos;)</code> で実行された場合は <code>false</code> になります。\n\n</p>\n<p><code>module</code> は <code>filename</code> プロパティ (通常 <code>__filename</code> と同じです) \nを提供するため、現在のアプリケーションのエントリポイントは\n<code>require.main.filename</code> をチェックすることで得ることができます。\n\n</p>\n"
        },
        {
          "textRaw": "Addenda: Package Manager Tips",
          "name": "Addenda: Package Manager Tips",
          "type": "misc",
          "desc": "<!--\nThe semantics of Node's `require()` function were designed to be general\nenough to support a number of sane directory structures. Package manager\nprograms such as `dpkg`, `rpm`, and `npm` will hopefully find it possible to\nbuild native packages from Node modules without modification.\n-->\n\n<p>Node の <code>require()</code> は普通のディレクトリ構造をサポートできるよう汎用的に設計されています。\n<code>dpkg</code> や <code>rpm</code> や <code>npm</code> のようなパッケージ管理プログラムは修正なしに Node モジュールからネイティブパッケージを組み立てることができるでしょう。\n\n</p>\n<!--\nBelow we give a suggested directory structure that could work:\n\nLet's say that we wanted to have the folder at\n`/usr/lib/node/<some-package>/<some-version>` hold the contents of a\nspecific version of a package.\n-->\n\n<p>推奨するディレクトリ構造は次のようになります:\n\n</p>\n<p>例えば <code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> フォルダに、あるパッケージの特定のバージョンを保持する形式です。\n\n</p>\n<!--\nPackages can depend on one another. In order to install package `foo`, you\nmay have to install a specific version of package `bar`.  The `bar` package\nmay itself have dependencies, and in some cases, these dependencies may even\ncollide or form cycles.\n-->\n\n<p>パッケージは相互に依存しあうことがあります。\n<code>foo</code> パッケージをインストールするためにはある特定のバージョンの <code>bar</code> パッケージをインストールする必要があります。\n<code>bar</code> パッケージ自身も依存関係をもっているので、ときには依存関係が衝突したり循環したりすることがあります。\n\n</p>\n<!--\nSince Node looks up the `realpath` of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the\n`node_modules` folders as described above, this situation is very simple to\nresolve with the following architecture:\n-->\n\n<p>Node はモジュールの <code>realpath</code> （シンボリックリンクを解釈します）を調べ、その依存関係を上述の <code>node_modules</code> フォルダの仕組みで探しにいきます。\nこれによって次のような構造をとてもシンプルに解釈することができます。\n\n</p>\n<!--\n* `/usr/lib/node/foo/1.2.3/` - Contents of the `foo` package, version 1.2.3.\n* `/usr/lib/node/bar/4.3.2/` - Contents of the `bar` package that `foo`\n  depends on.\n* `/usr/lib/node/foo/1.2.3/node_modules/bar` - Symbolic link to\n  `/usr/lib/node/bar/4.3.2/`.\n* `/usr/lib/node/bar/4.3.2/node_modules/*` - Symbolic links to the packages\n  that `bar` depends on.\n-->\n\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code> - <code>foo</code> パッケージの中身。バージョン1.2.3。</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code> - <code>bar</code> パッケージの中身。 <code>foo</code> が依存している。</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - <code>/usr/lib/node/bar/4.3.2/</code> へのシンボリックリンク。</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - <code>bar</code> が依存しているパッケージへのシンボリックリンク。</li>\n</ul>\n<!--\nThus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.\n\nWhen the code in the `foo` package does `require('bar')`, it will get the\nversion that is symlinked into `/usr/lib/node/foo/1.2.3/node_modules/bar`.\nThen, when the code in the `bar` package calls `require('quux')`, it'll get\nthe version that is symlinked into\n`/usr/lib/node/bar/4.3.2/node_modules/quux`.\n\nFurthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in `/usr/lib/node`, we could put them in\n`/usr/lib/node_modules/<name>/<version>`.  Then node will not bother\nlooking for missing dependencies in `/usr/node_modules` or `/node_modules`.\n\nIn order to make modules available to the node REPL, it might be useful to\nalso add the `/usr/lib/node_modules` folder to the `$NODE_PATH` environment\nvariable.  Since the module lookups using `node_modules` folders are all\nrelative, and based on the real path of the files making the calls to\n`require()`, the packages themselves can be anywhere.\n-->\n\n<p>このようにして、もし仮に依存関係に循環や衝突が見つかったとしても、全てのモジュールは依存しているパッケージの特定のバージョンを取得することができます。\n\n</p>\n<p><code>foo</code> パッケージの中で <code>require(&apos;bar&apos;)</code> したら、 <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> からリンクされているバージョンを取得します。\nそして、 <code>bar</code> パッケージ内で <code>require(&apos;quux&apos;)</code> を呼んだら、 <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code> からリンクされているバージョンを取得します。\n\n</p>\n<p>さらに、モジュールを探索する過程をより最適化するために、 <code>/usr/lib/node</code> にパッケージを置くよりも <code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code> に置くのをお勧めします。\nそうすることで Node は見つからない依存パッケージを <code>/usr/node_modules</code> や <code>/node_modules</code> に探しにいかなくてもようなります。\n\n</p>\n<p>Node の REPL でモジュールを使えるようにするために、 <code>/usr/lib/node_modules</code> フォルダを <code>$NODE_PATH</code> 環境変数に追加するとよいでしょう。\n<code>node_modules</code> フォルダを使ったモジュール探索は全て相対的なものであり、 <code>require()</code> を呼び出したファイルの絶対パスを基準としているので、パッケージ自体はどこにでも配置することができます。\n\n</p>\n"
        }
      ],
      "vars": [
        {
          "textRaw": "The `module` Object",
          "name": "module",
          "type": "var",
          "desc": "<!--\nIn each module, the `module` free variable is a reference to the object\nrepresenting the current module.  In particular\n`module.exports` is the same as the `exports` object.\n`module` isn't actually a global but rather local to each module.\n-->\n\n<p>どのモジュールでも、<code>module</code> 自由変数は現在のモジュールを表現するオブジェクトを\n参照します。特に、<code>module.exports</code> は <code>exports</code> オブジェクトと同じです。\n<code>module</code> は実際はグローバルではなく、各モジュールにローカルです。\n\n</p>\n",
          "properties": [
            {
              "textRaw": "`exports` {Object} ",
              "name": "exports",
              "desc": "<!--\nThe `exports` object is created by the Module system. Sometimes this is not\nacceptable, many want their module to be an instance of some class. To do this\nassign the desired export object to `module.exports`. For example suppose we\nwere making a module called `a.js`\n-->\n\n<p><code>exports</code> オブジェクトはモジュールシステムによって作成されます。\n時々これは受け入れられず、多くのモジュールは何らかのクラスのインスタンスであることを望みます。\nそれには公開したいオブジェクトを <code>module.exports</code> に割り当てます。\n例えば <code>a.js</code> と呼ばれるモジュールを作るとしたら\n\n\n</p>\n<pre><code>var EventEmitter = require(&apos;events&apos;).EventEmitter;\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the &apos;ready&apos; event from the module itself.\nsetTimeout(function() {\n  module.exports.emit(&apos;ready&apos;);\n}, 1000);</code></pre>\n<!--\nThen in another file we could do\n-->\n\n<p>そして別のファイルで\n\n</p>\n<pre><code>var a = require(&apos;./a&apos;);\na.on(&apos;ready&apos;, function() {\n  console.log(&apos;module a is ready&apos;);\n});</code></pre>\n<!--\nNote that assignment to `module.exports` must be done immediately. It cannot be\ndone in any callbacks.  This does not work:\n-->\n\n<p><code>module.exports</code> への代入はすぐに行わなければなりません。\nコールバックの中ではできません。以下は動きません。\n\n</p>\n<p>x.js:\n\n</p>\n<pre><code>setTimeout(function() {\n  module.exports = { a: &quot;hello&quot; };\n}, 0);</code></pre>\n<p>y.js:\n\n</p>\n<pre><code>var x = require(&apos;./x&apos;);\nconsole.log(x.a);</code></pre>\n"
            },
            {
              "textRaw": "`id` {String} ",
              "name": "id",
              "desc": "<!--\nThe identifier for the module.  Typically this is the fully resolved\nfilename.\n-->\n\n<p>モジュールの識別子。通常は完全に解決されたファイル名です。\n\n\n</p>\n"
            },
            {
              "textRaw": "`filename` {String} ",
              "name": "filename",
              "desc": "<!--\nThe fully resolved filename to the module.\n-->\n\n<p>完全に解決されたモジュールのファイル名です。\n\n\n</p>\n"
            },
            {
              "textRaw": "`loaded` {Boolean} ",
              "name": "loaded",
              "desc": "<!--\nWhether or not the module is done loading, or is in the process of\nloading.\n-->\n\n<p>モジュールのロードが完了したか，あるいはローディング中かを示します。\n\n\n</p>\n"
            },
            {
              "textRaw": "`parent` {Module Object} ",
              "name": "parent",
              "desc": "<!--\nThe module that required this one.\n-->\n\n<p>このモジュールを要求したモジュールです。\n\n\n</p>\n"
            },
            {
              "textRaw": "`children` {Array} ",
              "name": "children",
              "desc": "<!--\nThe module objects required by this one.\n-->\n\n<p>このモジュールが要求したモジュールです。\n\n\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "module.require(id)",
              "type": "method",
              "name": "require",
              "desc": "<!--\n* `id` {String}\n* Return: {Object} `exports` from the resolved module\n-->\n\n<ul>\n<li><code>id</code> {String}</li>\n<li>Return: {Object} 解決されたモジュールの <code>exports</code></li>\n</ul>\n<!--\nThe `module.require` method provides a way to load a module as if\n`require()` was called from the original module.\n-->\n\n<p><code>module.require</code> メソッドは、元のモジュールが <code>require()</code>\nを呼び出したかのようにモジュールをロードするために提供されています。\n\n</p>\n<!--\nNote that in order to do this, you must get a reference to the `module`\nobject.  Since `require()` returns the `exports`, and the `module` is\ntypically *only* available within a specific module's code, it must be\nexplicitly exported in order to be used.\n-->\n\n<p>それには <code>module</code> オブジェクトの参照が必要なことに注意してください。\n<code>require()</code> が <code>exports</code> を返した後、一般的に <code>module</code> \nはそのモジュールのコードで <em>のみ</em> 利用可能です。\nそれが使われるようにするには、明示的にエクスポートする必要があります。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "module"
    },
    {
      "textRaw": "Addons",
      "name": "addons",
      "desc": "<!--\nAddons are dynamically linked shared objects. They can provide glue to C and\nC++ libraries. The API (at the moment) is rather complex, involving\nknowledge of several libraries:\n-->\n\n<p>アドオンは動的に共有オブジェクトをリンクします。\nそれらは、C や C++ のライブラリに接合点を提供します。\nAPI はいくつかのライブラリの知識が必要で、(現時点では) かなり複雑です。\n\n</p>\n<!--\n - V8 JavaScript, a C++ library. Used for interfacing with JavaScript:\n   creating objects, calling functions, etc.  Documented mostly in the\n   `v8.h` header file (`deps/v8/include/v8.h` in the Node source tree),\n   which is also available [online](http://izs.me/v8-docs/main.html).\n-->\n\n<ul>\n<li>V8 JavaScript は C++ のライブラリです。\nJavaScript のオブジェクト作成や関数呼び出し等のインタフェースに使用されます。\nドキュメントは主に、<code>v8.h</code> のヘッダファイル\n(Node のソースツリーの中の <code>deps/v8/include/v8.h</code>) に記されていますが、\n<a href=\"http://izs.me/v8-docs/main.html\">オンライン</a> で参照することもできます。</li>\n</ul>\n<!--\n - [libuv](https://github.com/joyent/libuv), C event loop library. Anytime one\n   needs to wait for a file descriptor to become readable, wait for a timer, or\n   wait for a signal to received one will need to interface with libuv. That is,\n   if you perform any I/O, libuv will need to be used.\n-->\n\n<ul>\n<li><a href=\"https://github.com/joyent/libuv\">libuv</a> は\nC のイベントループライブラリです。\nファイル記述子が読み取り可能になるのを待つとき、タイマーを待つとき、\nシグナルを受信するのを待つときはいつでも、\nlibv のインタフェースが必要になります。\nつまり、何らかの I/O 処理をすると必ず libuv を使う必要があるということです。</li>\n</ul>\n<!--\n - Internal Node libraries. Most importantly is the `node::ObjectWrap`\n   class which you will likely want to derive from.\n-->\n\n<ul>\n<li>Node の内部ライブラリ。\nもっとも重要なのは <code>node::ObjectWrap</code> クラスで、\nこのクラスから派生させることが多くなるでしょう。</li>\n</ul>\n<!--\n - Others. Look in `deps/` for what else is available.\n-->\n\n<ul>\n<li>その他。どのような物が利用できるかは <code>deps/</code> 以下を参照してさい。</li>\n</ul>\n<!--\nNode statically compiles all its dependencies into the executable. When\ncompiling your module, you don't need to worry about linking to any of these\nlibraries.\n-->\n\n<p>Node は全ての依存ライブラリを実行ファイルに静的にコンパイルします。\nモジュールのコンパイル時には、それらのリンクについて一切気にする必要は有りません。\n\n</p>\n",
      "modules": [
        {
          "textRaw": "Hello world",
          "name": "hello_world",
          "desc": "<!--\nTo get started let's make a small Addon which is the C++ equivalent of\nthe following Javascript code:\n-->\n\n<p>では、 以下の JavaScript コードと同じ様に動作する小さなアドオンを\nC++ で作成してみましょう。\n\n</p>\n<pre><code>exports.hello = function() { return &apos;world&apos;; };</code></pre>\n<!--\nFirst we create a file `hello.cc`:\n-->\n\n<p>最初に <code>hello.cc</code> というファイルを作成します:\n\n\n</p>\n<pre><code>#include &lt;node.h&gt;\n#include &lt;v8.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; Method(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(String::New(&quot;world&quot;));\n}\n\nvoid init(Handle&lt;Object&gt; target) {\n  target-&gt;Set(String::NewSymbol(&quot;hello&quot;),\n      FunctionTemplate::New(Method)-&gt;GetFunction());\n}\nNODE_MODULE(hello, init)</code></pre>\n<!--\nNote that all Node addons must export an initialization function:\n-->\n\n<p>全ての Node アドオンは初期化関数をエクスポートしなければならないことに\n注意してください。\n\n</p>\n<pre><code>void Initialize (Handle&lt;Object&gt; target);\nNODE_MODULE(module_name, Initialize)</code></pre>\n<!--\nThere is no semi-colon after `NODE_MODULE` as it's not a function (see `node.h`).\n\nThe `module_name` needs to match the filename of the final binary (minus the\n.node suffix).\n\nThe source code needs to be built into `hello.node`, the binary Addon. To\ndo this we create a file called `wscript` which is python code and looks\nlike this:\n-->\n\n<p><code>NODE_MODULE</code> は関数ではないので、その後にセミコロンを付けてはいけません\n(<code>node.h</code> を参照してください)。\n\n</p>\n<p><code>module_name</code> は最終的なバイナリのファイル名 (拡張子 .node を除く)\nとマッチする必要があります。\n\n</p>\n<p>このソースコードは、<code>hello.node</code> というバイナリアドオンとしてビルドされる必要が有ります。\nそのために <code>wscript</code> と呼ばれる以下のようなコードを Python で書きました:\n\n</p>\n<pre><code>srcdir = &apos;.&apos;\nblddir = &apos;build&apos;\nVERSION = &apos;0.0.1&apos;\n\ndef set_options(opt):\n  opt.tool_options(&apos;compiler_cxx&apos;)\n\ndef configure(conf):\n  conf.check_tool(&apos;compiler_cxx&apos;)\n  conf.check_tool(&apos;node_addon&apos;)\n\ndef build(bld):\n  obj = bld.new_task_gen(&apos;cxx&apos;, &apos;shlib&apos;, &apos;node_addon&apos;)\n  obj.target = &apos;hello&apos;\n  obj.source = &apos;hello.cc&apos;</code></pre>\n<!--\nRunning `node-waf configure build` will create a file\n`build/default/hello.node` which is our Addon.\n-->\n\n<p><code>node-waf configure build</code> を実行すると、<code>build/default/hello.node</code> が作成されます。これが作成したアドオンです。\n\n</p>\n<!--\n`node-waf` is just [WAF](http://code.google.com/p/waf), the python-based build system. `node-waf` is\nprovided for the ease of users.\n-->\n\n<p><code>node-waf</code> 単に <a href=\"http://code.google.com/p/waf\">WAF</a> は Python ベースのビルドシステムです。\n<code>node-waf</code> は、ユーザの負担を減らすために提供されています。\n\n</p>\n<!--\nYou can now use the binary addon in a Node project `hello.js` by pointing `require` to\nthe recently built module:\n-->\n\n<p>ビルドされたモジュールを <code>require</code> で指定することにより、\nこのバイナリアドオンを Node プロジェクトの <code>hello.js</code> から利用することが\n可能になります。\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/hello&apos;);\n\nconsole.log(addon.hello()); // &apos;world&apos;</code></pre>\n<!--\nPlease see patterns below for further information or\n<https://github.com/pietern/hiredis-node> for an example in production.\n-->\n\n<p>さらに詳しい情報については下記のパターンか、\n</p>\n<p><a href=\"https://github.com/pietern/hiredis-node\">https://github.com/pietern/hiredis-node</a> を実際のプロダクトにおける\n例として参照してください。\n\n</p>\n",
          "type": "module",
          "displayName": "Hello world"
        },
        {
          "textRaw": "Addon patterns",
          "name": "addon_patterns",
          "desc": "<!--\nBelow are some addon patterns to help you get started. Consult the online\n[v8 reference](http://izs.me/v8-docs/main.html) for help with the various v8\ncalls, and v8's [Embedder's Guide](http://code.google.com/apis/v8/embed.html)\nfor an explanation of several concepts used such as handles, scopes,\nfunction templates, etc.\n\nTo compile these examples, create the `wscript` file below and run\n`node-waf configure build`:\n-->\n\n<p>以下は初心者に役立つアドオンのパターンです。\nv8 の様々な API についてはオンラインの\n<a href=\"http://izs.me/v8-docs/main.html\">v8 reference</a> が、\nそして ハンドルやスコープ、関数テンプレートなどいくつかの概念については\nv8 の <a href=\"http://code.google.com/apis/v8/embed.html\">Embedder&apos;s Guide</a> が\n役に立つでしょう。\n\n</p>\n<pre><code>srcdir = &apos;.&apos;\nblddir = &apos;build&apos;\nVERSION = &apos;0.0.1&apos;\n\ndef set_options(opt):\n  opt.tool_options(&apos;compiler_cxx&apos;)\n\ndef configure(conf):\n  conf.check_tool(&apos;compiler_cxx&apos;)\n  conf.check_tool(&apos;node_addon&apos;)\n\ndef build(bld):\n  obj = bld.new_task_gen(&apos;cxx&apos;, &apos;shlib&apos;, &apos;node_addon&apos;)\n  obj.target = &apos;addon&apos;\n  obj.source = [&apos;addon.cc&apos;]</code></pre>\n<!--\nIn cases where there is more than one `.cc` file, simply add the file name to the\n`obj.source` array, e.g.:\n-->\n\n<p>一つ以上の <code>.cc</code> ファイルがある場合は、単純に <code>obj.source</code> 配列にファイル名を\n加えるだけです。例:\n\n</p>\n<pre><code>obj.source = [&apos;addon.cc&apos;, &apos;myexample.cc&apos;]</code></pre>\n",
          "modules": [
            {
              "textRaw": "Function arguments",
              "name": "function_arguments",
              "desc": "<!--\nThe following pattern illustrates how to read arguments from JavaScript\nfunction calls and return a result. This is the main and only needed source\n`addon.cc`:\n-->\n\n<p>以下のパターンは JavaScript から呼び出された関数で引数を読み出したり、\n結果を返す方法を示します。これは <code>addon.cc</code> でのみ必要となります。\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; Add(const Arguments&amp; args) {\n  HandleScope scope;\n\n  if (args.Length() &lt; 2) {\n    ThrowException(Exception::TypeError(String::New(&quot;Wrong number of arguments&quot;)));\n    return scope.Close(Undefined());\n  }\n\n  if (!args[0]-&gt;IsNumber() || !args[1]-&gt;IsNumber()) {\n    ThrowException(Exception::TypeError(String::New(&quot;Wrong arguments&quot;)));\n    return scope.Close(Undefined());\n  }\n\n  Local&lt;Number&gt; num = Number::New(args[0]-&gt;NumberValue() +\n      args[1]-&gt;NumberValue());\n  return scope.Close(num);\n}\n\nvoid Init(Handle&lt;Object&gt; target) {\n  target-&gt;Set(String::NewSymbol(&quot;add&quot;),\n      FunctionTemplate::New(Add)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nYou can test it with the following JavaScript snippet:\n-->\n\n<p>以下の JavaScript コード片でテストすることができます。\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nconsole.log( &apos;This should be eight:&apos;, addon.add(3,5) );</code></pre>\n",
              "type": "module",
              "displayName": "Function arguments"
            },
            {
              "textRaw": "Callbacks",
              "name": "callbacks",
              "desc": "<!--\nYou can pass JavaScript functions to a C++ function and execute them from\nthere. Here's `addon.cc`:\n-->\n\n<p>JavaScript の関数を C++ の関数に渡してそこから呼び出すことができます。\nこれは <code>addon.cc</code> です:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; RunCallback(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[0]);\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { Local&lt;Value&gt;::New(String::New(&quot;hello world&quot;)) };\n  cb-&gt;Call(Context::GetCurrent()-&gt;Global(), argc, argv);\n\n  return scope.Close(Undefined());\n}\n\nvoid Init(Handle&lt;Object&gt; target) {\n  target-&gt;Set(String::NewSymbol(&quot;runCallback&quot;),\n      FunctionTemplate::New(RunCallback)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nTo test it run the following JavaScript snippet:\n-->\n\n<p>以下の JavaScript コード片でテストすることができます。\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\naddon.runCallback(function(msg){\n  console.log(msg); // &apos;hello world&apos;\n});</code></pre>\n",
              "type": "module",
              "displayName": "Callbacks"
            },
            {
              "textRaw": "Object factory",
              "name": "object_factory",
              "desc": "<!--\nYou can create and return new objects from within a C++ function with this\n`addon.cc` pattern, which returns an object with property `msg` that echoes\nthe string passed to `createObject()`:\n-->\n\n<p>C++ 関数の中から新しいオブジェクトを作成して返すことができます。\n以下の <code>addon.cc</code> のパターンでは、<code>createObject()</code> に渡された文字列を\n反映する <code>msg</code> プロパティを持ったオブジェクトを返します。\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;Object&gt; obj = Object::New();\n  obj-&gt;Set(String::NewSymbol(&quot;msg&quot;), args[0]-&gt;ToString());\n\n  return scope.Close(obj);\n}\n\nvoid Init(Handle&lt;Object&gt; target) {\n  target-&gt;Set(String::NewSymbol(&quot;createObject&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nTo test it in JavaScript:\n-->\n\n<p>テスト用の JavaScript:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar obj1 = addon.createObject(&apos;hello&apos;);\nvar obj2 = addon.createObject(&apos;world&apos;);\nconsole.log(obj1.msg+&apos; &apos;+obj2.msg); // &apos;hello world&apos;</code></pre>\n",
              "type": "module",
              "displayName": "Object factory"
            },
            {
              "textRaw": "Function factory",
              "name": "function_factory",
              "desc": "<!--\nThis pattern illustrates how to create and return a JavaScript function that\nwraps a C++ function:\n-->\n\n<p>このパターンは C++ 関数をラップした JavaScript 関数を作成して返す方法を\n示します。\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; MyFunction(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(String::New(&quot;hello world&quot;));\n}\n\nHandle&lt;Value&gt; CreateFunction(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(MyFunction);\n  Local&lt;Function&gt; fn = tpl-&gt;GetFunction();\n  fn-&gt;SetName(String::NewSymbol(&quot;theFunction&quot;)); // omit this to make it anonymous\n\n  return scope.Close(fn);\n}\n\nvoid Init(Handle&lt;Object&gt; target) {\n  target-&gt;Set(String::NewSymbol(&quot;createFunction&quot;),\n      FunctionTemplate::New(CreateFunction)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nTo test:\n-->\n\n<p>テスト:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar fn = addon.createFunction();\nconsole.log(fn()); // &apos;hello world&apos;</code></pre>\n",
              "type": "module",
              "displayName": "Function factory"
            },
            {
              "textRaw": "Wrapping C++ objects",
              "name": "wrapping_c++_objects",
              "desc": "<!--\nHere we will create a wrapper for a C++ object/class `MyObject` that can be\ninstantiated in JavaScript through the `new` operator. First prepare the main\nmodule `addon.cc`:\n-->\n\n<p>ここでは、\nC++ オブジェクト／クラスをラップし、JavaScript から new 演算子を使って\nインスタンス化できる <code>MyObject</code> を作成します。\n最初にメインモジュール <code>addon.cc</code> を準備します:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nvoid InitAll(Handle&lt;Object&gt; target) {\n  MyObject::Init(target);\n}\n\nNODE_MODULE(addon, InitAll)</code></pre>\n<!--\nThen in `myobject.h` make your wrapper inherit from `node::ObjectWrap`:\n-->\n\n<p>次に、<code>node::ObjectWrap</code> を継承したラッパーを <code>myobject.h</code> に作成します。\n\n</p>\n<pre><code>#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Handle&lt;v8::Object&gt; target);\n\n private:\n  MyObject();\n  ~MyObject();\n\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  static v8::Handle&lt;v8::Value&gt; PlusOne(const v8::Arguments&amp; args);\n  double counter_;\n};\n\n#endif</code></pre>\n<!--\nAnd in `myobject.cc` implement the various methods that you want to expose.\nHere we expose the method `plusOne` by adding it to the constructor's\nprototype:\n-->\n\n<p>公開したい様々なメソッドを <code>myobject.cc</code> に実装します。\nここでは、コンストラクタに渡された値に加算する <code>plusOne</code> を公開しています:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nMyObject::MyObject() {};\nMyObject::~MyObject() {};\n\nvoid MyObject::Init(Handle&lt;Object&gt; target) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n  // Prototype\n  tpl-&gt;PrototypeTemplate()-&gt;Set(String::NewSymbol(&quot;plusOne&quot;),\n      FunctionTemplate::New(PlusOne)-&gt;GetFunction());\n\n  Persistent&lt;Function&gt; constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n  target-&gt;Set(String::NewSymbol(&quot;MyObject&quot;), constructor);\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = new MyObject();\n  obj-&gt;counter_ = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n  obj-&gt;Wrap(args.This());\n\n  return args.This();\n}\n\nHandle&lt;Value&gt; MyObject::PlusOne(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.This());\n  obj-&gt;counter_ += 1;\n\n  return scope.Close(Number::New(obj-&gt;counter_));\n}</code></pre>\n<!--\nTest it with:\n-->\n\n<p>これでテストします:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar obj = new addon.MyObject(10);\nconsole.log( obj.plusOne() ); // 11\nconsole.log( obj.plusOne() ); // 12\nconsole.log( obj.plusOne() ); // 13</code></pre>\n",
              "type": "module",
              "displayName": "Wrapping C++ objects"
            },
            {
              "textRaw": "Factory of wrapped objects",
              "name": "factory_of_wrapped_objects",
              "desc": "<!--\nThis is useful when you want to be able to create native objects without\nexplicitly instantiating them with the `new` operator in JavaScript, e.g.\n-->\n\n<p>JavaScript の <code>new</code> 演算子で明示的にインスタンス化することなく、\nネイティブオブジェクトを作成できるようにしたい場合に便利です。例:\n\n</p>\n<pre><code>var obj = addon.createObject();\n// instead of:\n// var obj = new addon.Object();</code></pre>\n<!--\nLet's register our `createObject` method in `addon.cc`:\n-->\n\n<p>createObject<code> を </code>addon.cc` に登録しましょう:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(MyObject::NewInstance(args));\n}\n\nvoid InitAll(Handle&lt;Object&gt; target) {\n  MyObject::Init();\n\n  target-&gt;Set(String::NewSymbol(&quot;createObject&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)</code></pre>\n<!--\nIn `myobject.h` we now introduce the static method `NewInstance` that takes\ncare of instantiating the object (i.e. it does the job of `new` in JavaScript):\n-->\n\n<p><code>myobject.h</code> にオブジェクトを生成する static メソッド <code>NewInstance</code> を\n導入しましょう (すなわち，それが JavaScript 内の <code>new</code> の働きをします)。\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init();\n  static v8::Handle&lt;v8::Value&gt; NewInstance(const v8::Arguments&amp; args);\n\n private:\n  MyObject();\n  ~MyObject();\n\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  static v8::Handle&lt;v8::Value&gt; PlusOne(const v8::Arguments&amp; args);\n  double counter_;\n};\n\n#endif</code></pre>\n<!--\nThe implementation is similar to the above in `myobject.cc`:\n-->\n\n<p>実装は前述の <code>myobject.cc</code> と同様です:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nMyObject::MyObject() {};\nMyObject::~MyObject() {};\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nvoid MyObject::Init() {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n  // Prototype\n  tpl-&gt;PrototypeTemplate()-&gt;Set(String::NewSymbol(&quot;plusOne&quot;),\n      FunctionTemplate::New(PlusOne)-&gt;GetFunction());\n\n  constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = new MyObject();\n  obj-&gt;counter_ = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n  obj-&gt;Wrap(args.This());\n\n  return args.This();\n}\n\nHandle&lt;Value&gt; MyObject::NewInstance(const Arguments&amp; args) {\n  HandleScope scope;\n\n  const unsigned argc = 1;\n  Handle&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Object&gt; instance = constructor-&gt;NewInstance(argc, argv);\n\n  return scope.Close(instance);\n}\n\nHandle&lt;Value&gt; MyObject::PlusOne(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.This());\n  obj-&gt;counter_ += 1;\n\n  return scope.Close(Number::New(obj-&gt;counter_));\n}</code></pre>\n<!--\nTest it with:\n-->\n\n<p>これでテストします:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar obj = addon.createObject(10);\nconsole.log( obj.plusOne() ); // 11\nconsole.log( obj.plusOne() ); // 12\nconsole.log( obj.plusOne() ); // 13\n\nvar obj2 = addon.createObject(20);\nconsole.log( obj2.plusOne() ); // 21\nconsole.log( obj2.plusOne() ); // 22\nconsole.log( obj2.plusOne() ); // 23</code></pre>\n",
              "type": "module",
              "displayName": "Factory of wrapped objects"
            },
            {
              "textRaw": "Passing wrapped objects around",
              "name": "passing_wrapped_objects_around",
              "desc": "<!--\nIn addition to wrapping and returning C++ objects, you can pass them around\nby unwrapping them with Node's `node::ObjectWrap::Unwrap` helper function.\nIn the following `addon.cc` we introduce a function `add()` that can take on two\n`MyObject` objects:\n-->\n\n<p>C++ オブジェクトをラップして返すことに加えて、Node が提供するヘルパ関数\n<code>node::ObjectWrap::Unwrap</code> を使用してアンラップすることもできます。\n以下の <code>addon.cc</code> では、二つの <code>MyObject</code> オブジェクトを受け取る <code>add()</code>\n関数を導入します:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(MyObject::NewInstance(args));\n}\n\nHandle&lt;Value&gt; Add(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj1 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[0]-&gt;ToObject());\n  MyObject* obj2 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[1]-&gt;ToObject());\n\n  double sum = obj1-&gt;Val() + obj2-&gt;Val();\n  return scope.Close(Number::New(sum));\n}\n\nvoid InitAll(Handle&lt;Object&gt; target) {\n  MyObject::Init();\n\n  target-&gt;Set(String::NewSymbol(&quot;createObject&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n\n  target-&gt;Set(String::NewSymbol(&quot;add&quot;),\n      FunctionTemplate::New(Add)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)</code></pre>\n<!--\nTo make things interesting we introduce a public method in `myobject.h` so we\ncan probe private values after unwrapping the object:\n-->\n\n<p>よりおもしろくするために、<code>myobject.h</code> にパブリックメソッドを導入しましょう。\nしたがって、アンラップされたオブジェクトのプライベート変数を調べることが\nできます。\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init();\n  static v8::Handle&lt;v8::Value&gt; NewInstance(const v8::Arguments&amp; args);\n  double Val() const { return val_; }\n\n private:\n  MyObject();\n  ~MyObject();\n\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  double val_;\n};\n\n#endif</code></pre>\n<!--\nThe implementation of `myobject.cc` is similar as before:\n-->\n\n<p><code>myobject.cc</code> の実装はこれまでと同様です:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nMyObject::MyObject() {};\nMyObject::~MyObject() {};\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nvoid MyObject::Init() {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = new MyObject();\n  obj-&gt;val_ = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n  obj-&gt;Wrap(args.This());\n\n  return args.This();\n}\n\nHandle&lt;Value&gt; MyObject::NewInstance(const Arguments&amp; args) {\n  HandleScope scope;\n\n  const unsigned argc = 1;\n  Handle&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Object&gt; instance = constructor-&gt;NewInstance(argc, argv);\n\n  return scope.Close(instance);\n}</code></pre>\n<!--\nTest it with:\n-->\n\n<p>これでテストします:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar obj1 = addon.createObject(10);\nvar obj2 = addon.createObject(20);\nvar result = addon.add(obj1, obj2);\n\nconsole.log(result); // 30</code></pre>\n",
              "type": "module",
              "displayName": "Passing wrapped objects around"
            }
          ],
          "type": "module",
          "displayName": "Addon patterns"
        }
      ],
      "type": "module",
      "displayName": "Addons"
    },
    {
      "textRaw": "util",
      "name": "util",
      "stability": 5,
      "stabilityText": "Locked",
      "desc": "<!--\nThese functions are in the module `'util'`. Use `require('util')` to access\nthem.\n-->\n\n<p>これらの関数はモジュール <code>&apos;util&apos;</code> 内にあります。\n<code>require(&apos;util&apos;)</code> を使うことでこれらにアクセスします。\n\n\n</p>\n",
      "methods": [
        {
          "textRaw": "util.format()",
          "type": "method",
          "name": "format",
          "desc": "<!--\nReturns a formatted string using the first argument as a `printf`-like format.\n-->\n\n<p>最初の引数を <code>printf</code> のようなフォーマットとして使用して、フォーマット化された\n文字列を返します。\n\n</p>\n<!--\nThe first argument is a string that contains zero or more *placeholders*.\nEach placeholder is replaced with the converted value from its corresponding\nargument. Supported placeholders are:\n-->\n\n<p>第一引数は文字列で、0 個以上の <em>プレースホルダ</em> を含みます。\nそれぞれのプレースホルダは対応する引数を変換した値で置換されます。\nサポートするプレースホルダは:\n\n</p>\n<!--\n* `%s` - String.\n* `%d` - Number (both integer and float).\n* `%j` - JSON.\n* `%%` - single percent sign (`'%'`). This does not consume an argument.\n-->\n\n<ul>\n<li><code>%s</code> - 文字列。</li>\n<li><code>%d</code> - 数値 (整数と浮動小数点数の両方)。</li>\n<li><code>%j</code> - JSON。</li>\n<li><code>%%</code> - 一つのパーセント記号 (<code>&apos;%&apos;</code>)。これは引数を消費しません。</li>\n</ul>\n<!--\nIf the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.\n-->\n\n<p>プレースホルダに対応する引数が無い場合、そのプレースホルダは置換されません。\n\n</p>\n<pre><code>util.format(&apos;%s:%s&apos;, &apos;foo&apos;); // &apos;foo:%s&apos;</code></pre>\n<!--\nIf there are more arguments than placeholders, the extra arguments are\nconverted to strings with `util.inspect()` and these strings are concatenated,\ndelimited by a space.\n-->\n\n<p>プレースホルダより多くの引数がある場合、余った引数は <code>util.inspect()</code> によって\n文字列化され、それらはスペース区切りで連結されます。\n\n</p>\n<pre><code>util.format(&apos;%s:%s&apos;, &apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;); // &apos;foo:bar baz&apos;</code></pre>\n<!--\nIf the first argument is not a format string then `util.format()` returns\na string that is the concatenation of all its arguments separated by spaces.\nEach argument is converted to a string with `util.inspect()`.\n-->\n\n<p>第一引数がフォーマット文字列ではない場合、<code>util.format()</code> は全ての引数を\nスペース区切りで連結して返します。\nここの引数は <code>util.inspect()</code> で文字列に変換されます。\n\n</p>\n<pre><code>util.format(1, 2, 3); // &apos;1 2 3&apos;</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "util.debug(string)",
          "type": "method",
          "name": "debug",
          "desc": "<!--\nA synchronous output function. Will block the process and\noutput `string` immediately to `stderr`.\n-->\n\n<p>同期的な出力関数です。プロセスをブロックして即座に <code>string</code> を <code>stderr</code> に出力します。\n\n</p>\n<pre><code>require(&apos;util&apos;).debug(&apos;message on stderr&apos;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.log(string)",
          "type": "method",
          "name": "log",
          "desc": "<!--\nOutput with timestamp on `stdout`.\n-->\n\n<p>タイムスタンプとともに <code>stdout</code> へ出力します。\n\n</p>\n<pre><code>require(&apos;util&apos;).log(&apos;Timestamped message.&apos;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.inspect(object, [showHidden], [depth], [colors])",
          "type": "method",
          "name": "inspect",
          "desc": "<!--\nReturn a string representation of `object`, which is useful for debugging.\n-->\n\n<p>デバッグで有用な、<code>object</code> の文字列表現を返します。\n\n</p>\n<!--\nIf `showHidden` is `true`, then the object's non-enumerable properties will be\nshown too. Defaults to `false`.\n-->\n\n<p><code>showHidden</code> が <code>true</code> の場合、\nオブジェクトの Enumerable でないプロパティも表示されます。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nIf `depth` is provided, it tells `inspect` how many times to recurse while\nformatting the object. This is useful for inspecting large complicated objects.\n-->\n\n<p><code>depth</code> が与えられた場合、\nオブジェクトをフォーマットするために何回再帰するかを <code>inspect</code> に伝えます。\nこれは巨大で複雑なオブジェクトを調査する場合に便利です。\n\n</p>\n<!--\nThe default is to only recurse twice.  To make it recurse indefinitely, pass\nin `null` for `depth`.\n-->\n\n<p>デフォルトでは 2 回だけ再帰します。\n無限に再帰するには、<code>depth</code> に <code>null</code> を渡します。\n\n</p>\n<!--\nIf `colors` is `true`, the output will be styled with ANSI color codes.\nDefaults to `false`.\n-->\n\n<p><code>colors</code> が <code>true</code> の場合、出力は ANSI カラーコードで色づけされます。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample of inspecting all properties of the `util` object:\n-->\n\n<p><code>util</code> オブジェクトの全てのプロパティを調査する例:\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(util, true, null));</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "showHidden",
                  "optional": true
                },
                {
                  "name": "depth",
                  "optional": true
                },
                {
                  "name": "colors",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isArray(object)",
          "type": "method",
          "name": "isArray",
          "desc": "<!--\nReturns `true` if the given \"object\" is an `Array`. `false` otherwise.\n-->\n\n<p><code>object</code> が配列なら <code>true</code> を、それ以外は <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isArray([])\n  // true\nutil.isArray(new Array)\n  // true\nutil.isArray({})\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isRegExp(object)",
          "type": "method",
          "name": "isRegExp",
          "desc": "<!--\nReturns `true` if the given \"object\" is a `RegExp`. `false` otherwise.\n-->\n\n<p><code>object</code> が <code>RegExp</code> なら <code>true</code> を、それ以外なら <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isRegExp(/some regexp/)\n  // true\nutil.isRegExp(new RegExp(&apos;another regexp&apos;))\n  // true\nutil.isRegExp({})\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isDate(object)",
          "type": "method",
          "name": "isDate",
          "desc": "<!--\nReturns `true` if the given \"object\" is a `Date`. `false` otherwise.\n-->\n\n<p><code>object</code> が <code>Date</code> なら <code>true</code> を、それ以外なら <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isDate(new Date())\n  // true\nutil.isDate(Date())\n  // false (without &apos;new&apos; returns a String)\nutil.isDate({})\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isError(object)",
          "type": "method",
          "name": "isError",
          "desc": "<!--\nReturns `true` if the given \"object\" is an `Error`. `false` otherwise.\n-->\n\n<p><code>object</code> が <code>Error</code> なら <code>true</code> を、それ以外なら <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isError(new Error())\n  // true\nutil.isError(new TypeError())\n  // true\nutil.isError({ name: &apos;Error&apos;, message: &apos;an error occurred&apos; })\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.pump(readableStream, writableStream, [callback])",
          "type": "method",
          "name": "pump",
          "desc": "<!--\nExperimental\n-->\n\n<p>実験的\n\n</p>\n<!--\nRead the data from `readableStream` and send it to the `writableStream`.\nWhen `writableStream.write(data)` returns `false` `readableStream` will be\npaused until the `drain` event occurs on the `writableStream`. `callback` gets\nan error as its only argument and is called when `writableStream` is closed or\nwhen an error occurs.\n-->\n\n<p><code>readableStream</code> からデータを読み、それ を<code>writableStream</code> に送ります。\n<code>writableStream.write(data)</code> が <code>false</code> を返す場合、\n<code>writableStream</code> が <code>drain</code> イベントを生成するまで、\n<code>readableStream</code> は中断します。\n<code>writableStream</code> がクローズされるかエラーが発生すると、<code>callback</code> は error を唯一の引数として呼び出されます。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "readableStream"
                },
                {
                  "name": "writableStream"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.inherits(constructor, superConstructor)",
          "type": "method",
          "name": "inherits",
          "desc": "<!--\nInherit the prototype methods from one\n[constructor](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor)\ninto another.  The prototype of `constructor` will be set to a new\nobject created from `superConstructor`.\n-->\n\n<p>ある\n<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor\">コンストラクタ</a>\nからプロトタイプメソッドを継承します。\n<code>constructor</code> のプロトタイプは <code>superConstructor</code> から作られたオブジェクトに設定されます。\n\n</p>\n<!--\nAs an additional convenience, `superConstructor` will be accessible\nthrough the `constructor.super_` property.\n-->\n\n<p>さらなる利便性のために、<code>superConstructor</code> は <code>constructor.super_</code>\nプロパティを通じてアクセスすることができるようになります。\n\n</p>\n<pre><code>var util = require(&quot;util&quot;);\nvar events = require(&quot;events&quot;);\n\nfunction MyStream() {\n    events.EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, events.EventEmitter);\n\nMyStream.prototype.write = function(data) {\n    this.emit(&quot;data&quot;, data);\n}\n\nvar stream = new MyStream();\n\nconsole.log(stream instanceof events.EventEmitter); // true\nconsole.log(MyStream.super_ === events.EventEmitter); // true\n\nstream.on(&quot;data&quot;, function(data) {\n    console.log(&apos;Received data: &quot;&apos; + data + &apos;&quot;&apos;);\n})\nstream.write(&quot;It works!&quot;); // Received data: &quot;It works!&quot;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "constructor"
                },
                {
                  "name": "superConstructor"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "util"
    },
    {
      "textRaw": "Events",
      "name": "Events",
      "stability": 4,
      "stabilityText": "API Frozen",
      "type": "module",
      "desc": "<!--\nMany objects in Node emit events: a `net.Server` emits an event each time\na peer connects to it, a `fs.readStream` emits an event when the file is\nopened. All objects which emit events are instances of `events.EventEmitter`.\nYou can access this module by doing: `require(\"events\");`\n-->\n\n<p>Node のオブジェクトの多くはイベントを生成します:\n<code>net.Server</code>は相手から接続するたびにイベントを生成し、\n<code>fs.readStream</code>はファイルがオープンされるたびにイベントを生成します。\nイベントを生成する全てのオブジェクトは <code>events.EventEmitter</code> のインスタンスです。\n次のようにすることでこのモジュールにアクセスできます: <code>require(&quot;events&quot;);</code>\n\n</p>\n<!--\nTypically, event names are represented by a camel-cased string, however,\nthere aren't any strict restrictions on that, as any string will be accepted.\n-->\n\n<p>通常、イベント名はキャメル記法による文字列で表現されますが、\n厳格な制限ではなく、どんな文字列でも受け入れられます。\n\n</p>\n<!--\nFunctions can then be attached to objects, to be executed when an event\nis emitted. These functions are called _listeners_.\n-->\n\n<p>関数をオブジェクトにアタッチすることができ、それはイベントが生成された時に実行されます。\nこれらの関数は<em>リスナー</em>と呼ばれます。\n\n\n</p>\n",
      "classes": [
        {
          "textRaw": "Class: events.EventEmitter",
          "type": "class",
          "name": "events.EventEmitter",
          "desc": "<!--\nTo access the EventEmitter class, `require('events').EventEmitter`.\n-->\n\n<p>EventEmitterクラスにアクセスするには、<code>require(&apos;events&apos;).EventEmitter</code> を使います。\n\n</p>\n<!--\nWhen an `EventEmitter` instance experiences an error, the typical action is\nto emit an `'error'` event.  Error events are treated as a special case in node.\nIf there is no listener for it, then the default action is to print a stack\ntrace and exit the program.\n-->\n\n<p><code>EventEmitter</code> のインスタンスがエラーに遭遇した時、\n典型的な動作は <code>&apos;error&apos;</code> イベントを生成することです。\nnode ではエラーイベントは特別に扱われます．\nもしそのリスナーがなければ、デフォルトの動作はスタックトレースを出力してプログラムを終了することです。\n\n</p>\n<!--\nAll EventEmitters emit the event `'newListener'` when new listeners are\nadded.\n-->\n\n<p>全ての EventEmitter は、新しいリスナーが加えられるとイベント <code>&apos;newListener&apos;</code> を生成します。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "emitter.addListener(event, listener)",
              "type": "method",
              "name": "addListener",
              "desc": "<!--\nAdds a listener to the end of the listeners array for the specified event.\n-->\n\n<p>指定されたイベントに対するリスナー配列の最後にリスナーを追加します。\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "event"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "event"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.on(event, listener)",
              "type": "method",
              "name": "on",
              "desc": "<!--\nAdds a listener to the end of the listeners array for the specified event.\n-->\n\n<p>指定されたイベントに対するリスナー配列の最後にリスナーを追加します。\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "event"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.once(event, listener)",
              "type": "method",
              "name": "once",
              "desc": "<!--\nAdds a **one time** listener for the event. This listener is\ninvoked only the next time the event is fired, after which\nit is removed.\n-->\n\n<p><strong>一回限り</strong>のリスナーをイベントに追加します。\nこのリスナーは次にイベントが発生した時に限り起動され、その後で削除されます。\n\n</p>\n<pre><code>server.once(&apos;connection&apos;, function (stream) {\n  console.log(&apos;Ah, we have our first user!&apos;);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "event"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.removeListener(event, listener)",
              "type": "method",
              "name": "removeListener",
              "desc": "<!--\nRemove a listener from the listener array for the specified event.\n**Caution**: changes array indices in the listener array behind the listener.\n-->\n\n<p>指定されたイベントに対するリスナー配列からリスナーを削除します。\n<strong>注意</strong>: リスナーの背後にあるリスナー配列のインデックスが変化します。\n\n</p>\n<pre><code>var callback = function(stream) {\n  console.log(&apos;someone connected!&apos;);\n};\nserver.on(&apos;connection&apos;, callback);\n// ...\nserver.removeListener(&apos;connection&apos;, callback);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "event"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.removeAllListeners([event])",
              "type": "method",
              "name": "removeAllListeners",
              "desc": "<!--\nRemoves all listeners, or those of the specified event.\n-->\n\n<p>全てのリスナーまたは指定されたイベントに対するリスナーを削除します。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "event",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.setMaxListeners(n)",
              "type": "method",
              "name": "setMaxListeners",
              "desc": "<!--\nBy default EventEmitters will print a warning if more than 10 listeners are\nadded for a particular event. This is a useful default which helps finding memory leaks.\nObviously not all Emitters should be limited to 10. This function allows\nthat to be increased. Set to zero for unlimited.\n-->\n\n<p>デフォルトでは、EventEmitter は 10 を越えるリスナが特定のイベントに追加されると警告を出力します。\nこれはメモリリークを見つけるために役に立つデフォルト値です。\n全ての EventEmitter が 10 に制限されなければならないわけではないことは明らかです。\nこの関数は制限を増やすことを許可します。\n0 を設定すると無制限になります。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "n"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.listeners(event)",
              "type": "method",
              "name": "listeners",
              "desc": "<!--\nReturns an array of listeners for the specified event. This array can be\nmanipulated, e.g. to remove listeners.\n-->\n\n<p>指定されたイベントに対するリスナー配列を返します。\nこの配列は変更することができます、例えばリスナーを削除するなど。\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});\nconsole.log(util.inspect(server.listeners(&apos;connection&apos;))); // [ [Function] ]</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "event"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.emit(event, [arg1], [arg2], [...])",
              "type": "method",
              "name": "emit",
              "desc": "<!--\nExecute each of the listeners in order with the supplied arguments.\n-->\n\n<p>提供された引数の並びでそれぞれのリスナーを実行します。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "event"
                    },
                    {
                      "name": "arg1",
                      "optional": true
                    },
                    {
                      "name": "arg2",
                      "optional": true
                    },
                    {
                      "name": "...",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ],
          "events": [
            {
              "textRaw": "Event: 'newListener'",
              "type": "event",
              "name": "newListener",
              "params": [],
              "desc": "<!--\nThis event is emitted any time someone adds a new listener.\n-->\n\n<p>このイベントは誰かが新しいリスナーを追加するといつでも生成されます。\n\n</p>\n"
            }
          ]
        }
      ]
    },
    {
      "textRaw": "Buffer",
      "name": "buffer",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nPure Javascript is Unicode friendly but not nice to binary data.  When\ndealing with TCP streams or the file system, it's necessary to handle octet\nstreams. Node has several strategies for manipulating, creating, and\nconsuming octet streams.\n-->\n\n<p>純粋な JavaScript は Unicode と相性がいいものの、バイナリデータの扱いはうまくありません。\nTCP ストリームやファイルシステムを扱う場合は、オクテットストリームを処理する必要があります。\nNode にはオクテットストリームを操作、作成、消費するためにいくつかの戦略があります。\n\n</p>\n<!--\nRaw data is stored in instances of the `Buffer` class. A `Buffer` is similar\nto an array of integers but corresponds to a raw memory allocation outside\nthe V8 heap. A `Buffer` cannot be resized.\n-->\n\n<p>生のデータは <code>Buffer</code> クラスのインスタンスに保存されます。\n<code>Buffer</code> は整数の配列と似ていますが、\nV8 ヒープの外部に割り当てられた生のメモリに対応します。\n<code>Buffer</code> のサイズを変更することはできません。\n\n</p>\n<!--\nThe `Buffer` class is a global, making it very rare that one would need\nto ever `require('buffer')`.\n-->\n\n<p><code>Buffer</code> クラスはグローバルなので、<code>require(&apos;buffer&apos;)</code> が必要になることは\nほとんどありません。\n\n</p>\n<!--\nConverting between Buffers and JavaScript string objects requires an explicit\nencoding method.  Here are the different string encodings.\n-->\n\n<p>バッファを JavaScript 文字列オブジェクトとの間で変換するにはエンコーディング方式を明示する必要があります。\nいくつかのエンコーディング方式があります。\n\n</p>\n<!--\n* `'ascii'` - for 7 bit ASCII data only.  This encoding method is very fast, and\n  will strip the high bit if set.\n  Note that this encoding converts a null character (`'\\0'` or `'\\u0000'`) into\n  `0x20` (character code of a space). If you want to convert a null character\n  into `0x00`, you should use `'utf8'`.\n\n* `'utf8'` - Multi byte encoded Unicode characters.  Many web pages and other document formats use UTF-8.\n\n* `'ucs2'` - 2-bytes, little endian encoded Unicode characters. It can encode\n  only BMP(Basic Multilingual Plane, U+0000 - U+FFFF).\n\n* `'base64'` - Base64 string encoding.\n\n* `'binary'` - A way of encoding raw binary data into strings by using only\n  the first 8 bits of each character. This encoding method is deprecated and\n  should be avoided in favor of `Buffer` objects where possible. This encoding\n  will be removed in future versions of Node.\n\n* `'hex'` - Encode each byte as two hexidecimal characters.\n-->\n\n<ul>\n<li><code>&apos;ascii&apos;</code> - 7bit の ASCII データ専用です。\nこのエンコーディング方式はとても高速で、もし上位ビットがセットされていれば取り除かれます。\nこのエンコーディングは、null 文字 (<code>&apos;\\0&apos;</code> または <code>&apos;\\u0000&apos;</code>) を <code>0x20</code>\n(スペースの文字コード) に変換することに注意してください。\nnull 文字を 0x00 に変換したい場合は <code>&apos;utf8&apos;</code> を使用してください。</li>\n<li><code>&apos;utf8&apos;</code> - 可変長のバイト単位でエンコードされたUnicode文字。\n多くのWebページやその他のドキュメントは UTF-8 を使っています。</li>\n<li><code>&apos;ucs2&apos;</code> - 固定長の2バイト（リトルエンディアン）でエンコードされたUnicode文字。\nBMP (基本多言語面、U+0000～U+FFFF) のみエンコードすることができます。</li>\n<li><code>&apos;base64&apos;</code> - Base64 文字列エンコーディング.</li>\n<li><code>&apos;binary&apos;</code> - 生のバイナリデータを各文字の最初の 8bit として使用するエンコーディング方式。\nこのエンコーディング方式はもはや価値がなく、<code>Buffer</code> オブジェクトでは可能な限り使用すべきではありません。\nこのエンコーディングは、Node の将来のバージョンで削除される予定です。</li>\n<li><code>&apos;hex&apos;</code> - 各バイトを 2 桁の16進数文字列でエンコードします。</li>\n</ul>\n",
      "classes": [
        {
          "textRaw": "Class: Buffer",
          "type": "class",
          "name": "Buffer",
          "desc": "<!--\nThe Buffer class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.\n-->\n\n<p>Buffer クラスはバイナリデータを直接扱うためのグローバルな型です。\nそれは様々な方法で構築することができます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "buf.write(string, [offset], [length], [encoding])",
              "type": "method",
              "name": "write",
              "desc": "<!--\n* `string` String - data to be written to buffer\n* `offset` Number, Optional, Default: 0\n* `length` Number, Optional, Default: `buffer.length - offset`\n* `encoding` String, Optional, Default: 'utf8'\n-->\n\n<ul>\n<li><code>string</code> String - バッファに書き込まれるデータ</li>\n<li><code>offset</code> Number, Optional, Default: 0</li>\n<li><code>length</code> Number, Optional, Default: <code>buffer.length - offset</code></li>\n<li><code>encoding</code> String, Optional, Default: &apos;utf8&apos;</li>\n</ul>\n<!--\nWrites `string` to the buffer at `offset` using the given encoding.\n`offset` defaults to `0`, `encoding` defaults to `'utf8'`. `length` is\nthe number of bytes to write. Returns number of octets written. If `buffer` did\nnot contain enough space to fit the entire string, it will write a partial\namount of the string. `length` defaults to `buffer.length - offset`.\nThe method will not write partial characters.\n-->\n\n<p>与えられたエンコーディングを使用して、<code>string</code> をバッファの <code>offset</code> から書き込みます。\n<code>offset</code> のデフォルトは <code>0</code>、<code>encoding</code> のデフォルトは <code>&apos;utf8&apos;</code> です。\n<code>length</code> は書き込むバイト数です。書き込まれたオクテット数を返します。\nもし <code>buffer</code> が文字列全体を挿入するのに十分なスペースを含んでいなければ、文字列の一部だけを書き込みます。\n<code>length</code> のデフォルトは <code>buffer.length - offset</code> です。\nこのメソッドは文字の一部だけを書き込むことはありません。\n\n</p>\n<!--\nExample: write a utf8 string into a buffer, then print it\n-->\n\n<p>例: utf8 の文字列をバッファに書き込み、それをプリントします\n\n</p>\n<pre><code>buf = new Buffer(256);\nlen = buf.write(&apos;\\u00bd + \\u00bc = \\u00be&apos;, 0);\nconsole.log(len + &quot; bytes: &quot; + buf.toString(&apos;utf8&apos;, 0, len));</code></pre>\n<!--\nThe number of characters written (which may be different than the number of\nbytes written) is set in `Buffer._charsWritten` and will be overwritten the\nnext time `buf.write()` is called.\n-->\n\n<p>書き込まれた文字数 (書き込まれたバイト数とは異なる場合があります) は、\n次に <code>buf.write()</code> が呼び出されて上書きされるまで\n<code>Buffer._charsWritten</code> に設定されています。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "length",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "buf.toString([encoding], [start], [end])",
              "type": "method",
              "name": "toString",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`encoding` String, Optional, Default: 'utf8' ",
                      "name": "encoding",
                      "desc": "String, Optional, Default: 'utf8'",
                      "optional": true
                    },
                    {
                      "textRaw": "`start` Number, Optional, Default: 0 ",
                      "name": "start",
                      "desc": "Number, Optional, Default: 0",
                      "optional": true
                    },
                    {
                      "textRaw": "`end` Number, Optional, Default: `buffer.length` ",
                      "name": "end",
                      "desc": "Number, Optional, Default: `buffer.length`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "start",
                      "optional": true
                    },
                    {
                      "name": "end",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nDecodes and returns a string from buffer data encoded with `encoding`\n(defaults to `'utf8'`) beginning at `start` (defaults to `0`) and ending at\n`end` (defaults to `buffer.length`).\n-->\n\n<p><code>encoding</code> (デフォルトは <code>&apos;utf8&apos;</code>) でエンコードされたバッファデータの\n<code>start</code> (デフォルトは <code>0</code>) から <code>end</code> (デフォルトは <code>buffer.length</code>)\nまでをデコードした文字列を返します。\n\n</p>\n<!--\nSee `buffer.write()` example, above.\n-->\n\n<p>上の <code>buffer.write()</code> の例を参照してください。\n\n\n</p>\n"
            },
            {
              "textRaw": "buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])",
              "type": "method",
              "name": "copy",
              "desc": "<!--\n* `targetBuffer` Buffer object - Buffer to copy into\n* `targetStart` Number, Optional, Default: 0\n* `sourceStart` Number, Optional, Default: 0\n* `sourceEnd` Number, Optional, Default: `buffer.length`\n-->\n\n<ul>\n<li><code>targetBuffer</code> Buffer object - コピー先の Buffer</li>\n<li><code>targetStart</code> Number, Optional, Default: 0</li>\n<li><code>sourceStart</code> Number, Optional, Default: 0</li>\n<li><code>sourceEnd</code> Number, Optional, Default: <code>buffer.length</code></li>\n</ul>\n<!--\nDoes copy between buffers. The source and target regions can be overlapped.\n`targetStart` and `sourceStart` default to `0`.\n`sourceEnd` defaults to `buffer.length`.\n-->\n\n<p>バッファ間でコピーします。\nソースとターゲットの領域は重なっていても構いません。\n<code>targetStart</code> と <code>sourceStart</code> のデフォルトは <code>0</code> です。\n<code>sourceEnd</code> のデフォルトは <code>buffer.length</code> です。\n\n</p>\n<!--\nExample: build two Buffers, then copy `buf1` from byte 16 through byte 19\ninto `buf2`, starting at the 8th byte in `buf2`.\n-->\n\n<p>例: バッファを2個作成し、<code>buf1</code> の 16 バイト目から 19 バイト目を、\n<code>buf2</code> の 8 バイト目から始まる位置へコピーします。\n\n</p>\n<pre><code>buf1 = new Buffer(26);\nbuf2 = new Buffer(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n  buf2[i] = 33; // ASCII !\n}\n\nbuf1.copy(buf2, 8, 16, 20);\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, 25));\n\n// !!!!!!!!qrst!!!!!!!!!!!!!</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "targetBuffer"
                    },
                    {
                      "name": "targetStart",
                      "optional": true
                    },
                    {
                      "name": "sourceStart",
                      "optional": true
                    },
                    {
                      "name": "sourceEnd",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "buf.slice([start], [end])",
              "type": "method",
              "name": "slice",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`start` Number, Optional, Default: 0 ",
                      "name": "start",
                      "desc": "Number, Optional, Default: 0",
                      "optional": true
                    },
                    {
                      "textRaw": "`end` Number, Optional, Default: `buffer.length` ",
                      "name": "end",
                      "desc": "Number, Optional, Default: `buffer.length`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "start",
                      "optional": true
                    },
                    {
                      "name": "end",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReturns a new buffer which references the same memory as the old, but offset\nand cropped by the `start` (defaults to `0`) and `end` (defaults to\n`buffer.length`) indexes.\n-->\n\n<p>元のバッファと同じメモリを参照しますが、<code>start</code> (デフォルトは <code>0</code>) と\n<code>end</code> (デフォルトは <code>buffer.length</code>) で示されるオフセットと長さを持つ\n新しいバッファを返します。\n\n</p>\n<!--\n**Modifying the new buffer slice will modify memory in the original buffer!**\n-->\n\n<p><strong>新しいバッファスライスの変更は、オリジナルバッファのメモリを変更することになります！</strong>\n\n</p>\n<!--\nExample: build a Buffer with the ASCII alphabet, take a slice, then modify one\nbyte from the original Buffer.\n-->\n\n<p>例: ASCII のアルファベットでバッファを構築してスライスし、元のバッファで 1 バイトを変更します。\n\n</p>\n<pre><code>var buf1 = new Buffer(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n}\n\nvar buf2 = buf1.slice(0, 3);\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\nbuf1[0] = 33;\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\n\n// abc\n// !bc</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt8(offset, [noAssert])",
              "type": "method",
              "name": "readUInt8",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads an unsigned 8 bit integer from the buffer at the specified offset.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を符号無し 8bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nfor (ii = 0; ii &lt; buf.length; ii++) {\n  console.log(buf.readUInt8(ii));\n}\n\n// 0x3\n// 0x4\n// 0x23\n// 0x42</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt16LE(offset, [noAssert])",
              "type": "method",
              "name": "readUInt16LE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads an unsigned 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を符号無し 16bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt16BE(0));\nconsole.log(buf.readUInt16LE(0));\nconsole.log(buf.readUInt16BE(1));\nconsole.log(buf.readUInt16LE(1));\nconsole.log(buf.readUInt16BE(2));\nconsole.log(buf.readUInt16LE(2));\n\n// 0x0304\n// 0x0403\n// 0x0423\n// 0x2304\n// 0x2342\n// 0x4223</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt16BE(offset, [noAssert])",
              "type": "method",
              "name": "readUInt16BE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads an unsigned 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を符号無し 16bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt16BE(0));\nconsole.log(buf.readUInt16LE(0));\nconsole.log(buf.readUInt16BE(1));\nconsole.log(buf.readUInt16LE(1));\nconsole.log(buf.readUInt16BE(2));\nconsole.log(buf.readUInt16LE(2));\n\n// 0x0304\n// 0x0403\n// 0x0423\n// 0x2304\n// 0x2342\n// 0x4223</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt32LE(offset, [noAssert])",
              "type": "method",
              "name": "readUInt32LE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads an unsigned 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を符号無し 32bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt32BE(0));\nconsole.log(buf.readUInt32LE(0));\n\n// 0x03042342\n// 0x42230403</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt32BE(offset, [noAssert])",
              "type": "method",
              "name": "readUInt32BE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads an unsigned 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を符号無し 32bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt32BE(0));\nconsole.log(buf.readUInt32LE(0));\n\n// 0x03042342\n// 0x42230403</code></pre>\n"
            },
            {
              "textRaw": "buf.readInt8(offset, [noAssert])",
              "type": "method",
              "name": "readInt8",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a signed 8 bit integer from the buffer at the specified offset.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt8`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>バッファの指定された位置を符号付き 8bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<p>バッファの内容を 2 の補数による符号付き値として扱うこと以外は\n<code>buffer.readUInt8</code> と同じように動作します。\n\n</p>\n"
            },
            {
              "textRaw": "buf.readInt16LE(offset, [noAssert])",
              "type": "method",
              "name": "readInt16LE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a signed 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt16*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>バッファの指定された位置を符号付き 16bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<p>バッファの内容を 2 の補数による符号付き値として扱うこと以外は\n<code>buffer.readUInt16</code> と同じように動作します。\n\n\n</p>\n"
            },
            {
              "textRaw": "buf.readInt16BE(offset, [noAssert])",
              "type": "method",
              "name": "readInt16BE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a signed 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt16*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>バッファの指定された位置を符号付き 16bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<p>バッファの内容を 2 の補数による符号付き値として扱うこと以外は\n<code>buffer.readUInt16</code> と同じように動作します。\n\n\n</p>\n"
            },
            {
              "textRaw": "buf.readInt32LE(offset, [noAssert])",
              "type": "method",
              "name": "readInt32LE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a signed 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt32*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>バッファの指定された位置を符号付き 32bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<p>バッファの内容を 2 の補数による符号付き値として扱うこと以外は\n<code>buffer.readUInt32</code> と同じように動作します。\n\n\n</p>\n"
            },
            {
              "textRaw": "buf.readInt32BE(offset, [noAssert])",
              "type": "method",
              "name": "readInt32BE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a signed 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt32*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>バッファの指定された位置を符号付き 32bit 整数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<p>バッファの内容を 2 の補数による符号付き値として扱うこと以外は\n<code>buffer.readUInt32</code> と同じように動作します。\n\n\n</p>\n"
            },
            {
              "textRaw": "buf.readFloatLE(offset, [noAssert])",
              "type": "method",
              "name": "readFloatLE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a 32 bit float from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を 32bit 浮動小数点数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x00;\nbuf[1] = 0x00;\nbuf[2] = 0x80;\nbuf[3] = 0x3f;\n\nconsole.log(buf.readFloatLE(0));\n\n// 0x01</code></pre>\n"
            },
            {
              "textRaw": "buf.readFloatBE(offset, [noAssert])",
              "type": "method",
              "name": "readFloatBE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a 32 bit float from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を 32bit 浮動小数点数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x00;\nbuf[1] = 0x00;\nbuf[2] = 0x80;\nbuf[3] = 0x3f;\n\nconsole.log(buf.readFloatLE(0));\n\n// 0x01</code></pre>\n"
            },
            {
              "textRaw": "buf.readDoubleLE(offset, [noAssert])",
              "type": "method",
              "name": "readDoubleLE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a 64 bit double from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を 64bit 倍精度浮動小数点数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(8);\n\nbuf[0] = 0x55;\nbuf[1] = 0x55;\nbuf[2] = 0x55;\nbuf[3] = 0x55;\nbuf[4] = 0x55;\nbuf[5] = 0x55;\nbuf[6] = 0xd5;\nbuf[7] = 0x3f;\n\nconsole.log(buf.readDoubleLE(0));\n\n// 0.3333333333333333</code></pre>\n"
            },
            {
              "textRaw": "buf.readDoubleBE(offset, [noAssert])",
              "type": "method",
              "name": "readDoubleBE",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nReads a 64 bit double from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>バッファの指定された位置を 64bit 倍精度浮動小数点数として読み込みます。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら <code>offset</code> の検証をスキップします。\nこれは <code>offset</code> がバッファの終端を越えてしまう場合があることを意味します。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(8);\n\nbuf[0] = 0x55;\nbuf[1] = 0x55;\nbuf[2] = 0x55;\nbuf[3] = 0x55;\nbuf[4] = 0x55;\nbuf[5] = 0x55;\nbuf[6] = 0xd5;\nbuf[7] = 0x3f;\n\nconsole.log(buf.readDoubleLE(0));\n\n// 0.3333333333333333</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt8(value, offset, [noAssert])",
              "type": "method",
              "name": "writeUInt8",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset. Note, `value` must be a\nvalid unsigned 8 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を符号無し 8bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 8bit 符号無し整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n\n// &lt;Buffer 03 04 23 42&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt16LE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeUInt16LE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を符号無し 16bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 16bit 符号無し整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n\n// &lt;Buffer de ad be ef&gt;\n// &lt;Buffer ad de ef be&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt16BE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeUInt16BE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を符号無し 16bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 16bit 符号無し整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n\n// &lt;Buffer de ad be ef&gt;\n// &lt;Buffer ad de ef be&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt32LE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeUInt32LE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を符号無し 32bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 32bit 符号無し整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer fe ed fa ce&gt;\n// &lt;Buffer ce fa ed fe&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt32BE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeUInt32BE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を符号無し 32bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 32bit 符号無し整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer fe ed fa ce&gt;\n// &lt;Buffer ce fa ed fe&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeInt8(value, offset, [noAssert])",
              "type": "method",
              "name": "writeInt8",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset. Note, `value` must be a\nvalid signed 8 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt8`, except value is written out as a two's complement\nsigned integer into `buffer`.\n-->\n\n<p><code>value</code> を符号付き 8bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 8bit 符号付き整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<p><code>value</code> を 2 の補数による符号付き値として書き込むこと以外は \n<code>buffer.writeUInt8</code> と同じように動作します。\n\n</p>\n"
            },
            {
              "textRaw": "buf.writeInt16LE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeInt16LE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt16*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> を符号付き 16bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 16bit 符号付き整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<p><code>value</code> を 2 の補数による符号付き値として書き込むこと以外は \n<code>buffer.writeUInt16</code> と同じように動作します。\n\n</p>\n"
            },
            {
              "textRaw": "buf.writeInt16BE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeInt16BE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt16*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> を符号付き 16bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 16bit 符号付き整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<p><code>value</code> を 2 の補数による符号付き値として書き込むこと以外は \n<code>buffer.writeUInt16</code> と同じように動作します。\n\n</p>\n"
            },
            {
              "textRaw": "buf.writeInt32LE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeInt32LE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt32*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> を符号付き 32bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 32bit 符号付き整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<p><code>value</code> を 2 の補数による符号付き値として書き込むこと以外は \n<code>buffer.writeUInt32</code> と同じように動作します。\n\n</p>\n"
            },
            {
              "textRaw": "buf.writeInt32BE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeInt32BE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt32*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> を符号付き 32bit 整数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 32bit 符号付き整数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<p><code>value</code> を 2 の補数による符号付き値として書き込むこと以外は \n<code>buffer.writeUInt32</code> と同じように動作します。\n\n</p>\n"
            },
            {
              "textRaw": "buf.writeFloatLE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeFloatLE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 32 bit float.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を 32bit 浮動小数点数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 32bit 浮動小数点数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 4f 4a fe bb&gt;\n// &lt;Buffer bb fe 4a 4f&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeFloatBE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeFloatBE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 32 bit float.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を 32bit 浮動小数点数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 32bit 浮動小数点数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 4f 4a fe bb&gt;\n// &lt;Buffer bb fe 4a 4f&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeDoubleLE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeDoubleLE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 64 bit double.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を 64bit 倍精度浮動小数点数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 64bit 倍精度浮動小数点数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(8);\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n// &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.writeDoubleBE(value, offset, [noAssert])",
              "type": "method",
              "name": "writeDoubleBE",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` Number ",
                      "name": "value",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`offset` Number ",
                      "name": "offset",
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`noAssert` Boolean, Optional, Default: false ",
                      "name": "noAssert",
                      "desc": "Boolean, Optional, Default: false",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "noAssert",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 64 bit double.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> を 64bit 倍精度浮動小数点数としてバッファの指定された位置に、\n指定されたエンディアンで書き込みます。\n<code>value</code> は妥当な 64bit 倍精度浮動小数点数でなければならないことに注意してください。\n\n</p>\n<p>もし <code>noAssert</code> が <code>true</code> なら，<code>value</code> と <code>offset</code> の検証をスキップします。\nこれは、<code>value</code> がこの関数で扱えるより大きな場合や、<code>offset</code> \nがバッファの終端を越えてしまう場合は、静かに捨てられることを意味します。\n正確性に確信がない限り、これらを使用すべきではありません。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var buf = new Buffer(8);\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n// &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</code></pre>\n"
            },
            {
              "textRaw": "buf.fill(value, [offset], [end])",
              "type": "method",
              "name": "fill",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` ",
                      "name": "value"
                    },
                    {
                      "textRaw": "`offset` Number, Optional ",
                      "name": "offset",
                      "optional": true,
                      "desc": "Number"
                    },
                    {
                      "textRaw": "`end` Number, Optional ",
                      "name": "end",
                      "optional": true,
                      "desc": "Number"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "end",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nFills the buffer with the specified value. If the `offset` (defaults to `0`)\nand `end` (defaults to `buffer.length`) are not given it will fill the entire\nbuffer.\n-->\n\n<p>指定された値でバッファを埋めます。\n<code>offset</code> (デフォルトは <code>0</code>) と <code>end</code> (デフォルトは <code>buffer.length</code>)\nFが与えられなかった場合はバッファ全体を埋めます。\n\n</p>\n<pre><code>var b = new Buffer(50);\nb.fill(&quot;h&quot;);</code></pre>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "buf[index]",
              "name": "[index]",
              "desc": "<!--\nGet and set the octet at `index`. The values refer to individual bytes,\nso the legal range is between `0x00` and `0xFF` hex or `0` and `255`.\n-->\n\n<p><code>index</code> の位置のオクテットを取得および設定します。\nその値は個々のバイトを参照するので、妥当な範囲は 16 進の <code>0x00</code> から <code>0xFF</code>\nまたは <code>0</code> から<code>255</code>までの間です。\n\n</p>\n<!--\nExample: copy an ASCII string into a buffer, one byte at a time:\n-->\n\n<p>例: ASCII 文字列を 1 バイトずつバッファにコピーします\n\n</p>\n<pre><code>str = &quot;node.js&quot;;\nbuf = new Buffer(str.length);\n\nfor (var i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\nconsole.log(buf);\n\n// node.js</code></pre>\n"
            },
            {
              "textRaw": "`length` Number ",
              "name": "length",
              "desc": "<!--\nThe size of the buffer in bytes.  Note that this is not necessarily the size\nof the contents. `length` refers to the amount of memory allocated for the\nbuffer object.  It does not change when the contents of the buffer are changed.\n-->\n\n<p>バイト数によるバッファのサイズ。\nこれは実際の内容のサイズではないことに注意してください。\n<code>length</code> はバッファオブジェクトに割り当てられたメモリ全体を参照します。\n\n</p>\n<pre><code>buf = new Buffer(1234);\n\nconsole.log(buf.length);\nbuf.write(&quot;some string&quot;, &quot;ascii&quot;, 0);\nconsole.log(buf.length);\n\n// 1234\n// 1234</code></pre>\n",
              "shortDesc": "Number"
            }
          ],
          "classMethods": [
            {
              "textRaw": "Class Method: Buffer.isBuffer(obj)",
              "type": "classMethod",
              "name": "isBuffer",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Boolean ",
                    "name": "return",
                    "desc": "Boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`obj` Object ",
                      "name": "obj",
                      "desc": "Object"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "obj"
                    }
                  ]
                }
              ],
              "desc": "<!--\nTests if `obj` is a `Buffer`.\n-->\n\n<p><code>obj</code> が <code>Buffer</code> かどうかテストします。\n\n</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.byteLength(string, [encoding])",
              "type": "classMethod",
              "name": "byteLength",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Return: Number ",
                    "name": "return",
                    "desc": "Number"
                  },
                  "params": [
                    {
                      "textRaw": "`string` String ",
                      "name": "string",
                      "desc": "String"
                    },
                    {
                      "textRaw": "`encoding` String, Optional, Default: 'utf8' ",
                      "name": "encoding",
                      "desc": "String, Optional, Default: 'utf8'",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nGives the actual byte length of a string. `encoding` defaults to `'utf8'`.\nThis is not the same as `String.prototype.length` since that returns the\nnumber of *characters* in a string.\n-->\n\n<p>文字列の実際のバイト数を返します。<code>encoding</code> のデフォルトは <code>&apos;utf8&apos;</code> です。\nこれは文字列の<em>文字</em>数を返す <code>String.prototype.length</code> と同じではありません。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>str = &apos;\\u00bd + \\u00bc = \\u00be&apos;;\n\nconsole.log(str + &quot;: &quot; + str.length + &quot; characters, &quot; +\n  Buffer.byteLength(str, &apos;utf8&apos;) + &quot; bytes&quot;);\n\n// ½ + ¼ = ¾: 9 characters, 12 bytes</code></pre>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`size` Number ",
                  "name": "size",
                  "desc": "Number"
                }
              ],
              "desc": "<!--\nAllocates a new buffer of `size` octets.\n-->\n\n<p><code>size</code> オクテットの新しいバッファを割り当てます。\n\n</p>\n"
            },
            {
              "params": [
                {
                  "name": "size"
                }
              ],
              "desc": "<!--\nAllocates a new buffer of `size` octets.\n-->\n\n<p><code>size</code> オクテットの新しいバッファを割り当てます。\n\n</p>\n"
            },
            {
              "params": [
                {
                  "textRaw": "`array` Array ",
                  "name": "array",
                  "desc": "Array"
                }
              ],
              "desc": "<!--\nAllocates a new buffer using an `array` of octets.\n-->\n\n<p>オクテットの <code>array</code> を使用する新しいバッファを割り当てます。\n\n</p>\n"
            },
            {
              "params": [
                {
                  "name": "array"
                }
              ],
              "desc": "<!--\nAllocates a new buffer using an `array` of octets.\n-->\n\n<p>オクテットの <code>array</code> を使用する新しいバッファを割り当てます。\n\n</p>\n"
            },
            {
              "params": [
                {
                  "name": "str"
                },
                {
                  "name": "encoding",
                  "optional": true
                }
              ],
              "desc": "<!--\n* `str` String - string to encode.\n* `encoding` String - encoding to use, Optional.\n-->\n\n<ul>\n<li><code>str</code> String - エンコードされる文字列</li>\n<li><code>encoding</code> String - 使用するエンコード、Optional、Default: &apos;utf8&apos;</li>\n</ul>\n<!--\nAllocates a new buffer containing the given `str`.\n`encoding` defaults to `'utf8'`.\n-->\n\n<p>与えられた <code>str</code> を内容とする新しいバッファを割り当てます。\n<code>encoding</code> のデフォルトは <code>&apos;utf8&apos;</code> です。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: SlowBuffer",
          "type": "class",
          "name": "SlowBuffer",
          "desc": "<!--\nThis class is primarily for internal use.  JavaScript programs should\nuse Buffer instead of using SlowBuffer.\n\nIn order to avoid the overhead of allocating many C++ Buffer objects for\nsmall blocks of memory in the lifetime of a server, Node allocates memory\nin 8Kb (8192 byte) chunks.  If a buffer is smaller than this size, then it\nwill be backed by a parent SlowBuffer object.  If it is larger than this,\nthen Node will allocate a SlowBuffer slab for it directly.\n-->\n\n<p>このクラスは主に内部利用のためのものです。JavaScsript プログラムは SlowBuffer\nよりも Buffer を使用すべきです。\n\n</p>\n<p>サーバの動作中に、小さなメモリブロックのために多くの C++ バッファオブジェクトが\n割り当てられるオーバーヘッドを避けるため、Node はメモリを 8Kb (8192 バイト) の\nチャンク内に割り当てます。もしバッファがこのサイズより小さければ、それは\n親の SlowBuffer に支えられます。それより大きければ、Node は SlowBuffer を\n直接割り当てます。\n\n</p>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "`INSPECT_MAX_BYTES` Number, Default: 50 ",
          "name": "INSPECT_MAX_BYTES",
          "desc": "<!--\nHow many bytes will be returned when `buffer.inspect()` is called. This can\nbe overridden by user modules.\n\nNote that this is a property on the buffer module returned by\n`require('buffer')`, not on the Buffer global, or a buffer instance.\n-->\n\n<p><code>buffer.inspect()</code> が呼び出された場合に返すバイト数です。\nこれはユーザモジュールによって上書きすることができます。\n\n</p>\n<p>これはグローバルの Buffer やそのインスタンスではなく、 <code>requrie(&apos;buffer&apos;)</code>\nによって返される buffer モジュールのプロパティであることに注意してください。\n\n</p>\n",
          "shortDesc": "Number, Default: 50"
        }
      ],
      "type": "module",
      "displayName": "Buffer"
    },
    {
      "textRaw": "Stream",
      "name": "stream",
      "stability": 2,
      "stabilityText": "Unstable",
      "desc": "<!--\nA stream is an abstract interface implemented by various objects in Node.\nFor example a request to an HTTP server is a stream, as is stdout. Streams\nare readable, writable, or both. All streams are instances of `EventEmitter`.\n\nYou can load up the Stream base class by doing `require('stream')`.\n-->\n\n<p>ストリームは Node の様々なオブジェクトで実装される抽象的なインタフェースです。\n例えば HTTP サーバへのリクエストは標準出力と同様にストリームです。\nストリームは読み込み可能、書き込み可能、またはその両方です。\n全てのストリームは <code>EventEmitter</code> のインスタンスです。\n\n</p>\n<p>Stream のベースクラスは <code>require(&apos;stream&apos;)</code> でロードすることができます。\n\n</p>\n",
      "classes": [
        {
          "textRaw": "Readable Stream",
          "name": "Readable Stream",
          "type": "class",
          "desc": "<!--\nA `Readable Stream` has the following methods, members, and events.\n-->\n\n<p><code>Readable Stream</code> には以下のメソッド、メンバー、そしてイベントがあります。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'data'",
              "type": "event",
              "name": "data",
              "desc": "<p><code>function (data) { }</code>\n\n</p>\n<!--\nThe `'data'` event emits either a `Buffer` (by default) or a string if\n`setEncoding()` was used.\n\nNote that the __data will be lost__ if there is no listener when a\n`Readable Stream` emits a `'data'` event.\n-->\n\n<p><code>&apos;data&apos;</code> イベントは <code>Buffer</code> (デフォルト) または、\n<code>setEncoding()</code> された場合は文字列のどちらかを生成します\n\n</p>\n<p><code>Readable Stream</code> が <code>&apos;data&apos;</code> イベントを生成した時にリスナが存在しなければ、\n<strong>データは失われる</strong>ことに注意してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'end'",
              "type": "event",
              "name": "end",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the stream has received an EOF (FIN in TCP terminology).\nIndicates that no more `'data'` events will happen. If the stream is also\nwritable, it may be possible to continue writing.\n-->\n\n<p>ストリームが EOF (TCP 用語では FIN) を受信した時に生成されます。\n<code>&apos;data&apos;</code> イベントがもう発生しないことを示します。\nストリームがもし書き込み可能でもあるなら、書き込みを続けることは可能かもしれません。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "desc": "<p><code>function (exception) { }</code>\n\n</p>\n<!--\nEmitted if there was an error receiving data.\n-->\n\n<p>データ受信でエラーがあると生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the underlying file descriptor has been closed. Not all streams\nwill emit this.  (For example, an incoming HTTP request will not emit\n`'close'`.)\n-->\n\n<p>下層でファイル記述子がクローズされた時に生成されます。\n全てのストリームがこのイベントを発生するわけではありません。\n(例えば、インカミングの HTTP リクエストは <code>&apos;close&apos;</code> イベントを生成しません。)\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "stream.readable",
              "name": "readable",
              "desc": "<!--\nA boolean that is `true` by default, but turns `false` after an `'error'`\noccurred, the stream came to an `'end'`, or `destroy()` was called.\n-->\n\n<p>デフォルトでは <code>true</code> ですが、<code>&apos;error&apos;</code> が発生した後、\nストリームが <code>&apos;end&apos;</code> に達した後、または <code>destroy()</code> が呼ばれた後で、\n<code>false</code> に設定される boolean です。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "stream.setEncoding(encoding)",
              "type": "method",
              "name": "setEncoding",
              "desc": "<!--\nMakes the data event emit a string instead of a `Buffer`. `encoding` can be\n`'utf8'`, `'ascii'`, or `'base64'`.\n-->\n\n<p><code>&apos;data&apos;</code> イベントが <code>Buffer</code> ではなく文字列を生成するようにします。\n<code>encoding</code> には <code>&apos;utf8&apos;</code>、<code>&apos;ascii&apos;</code>、\nまたは <code>&apos;base64&apos;</code> を指定することができます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.pause()",
              "type": "method",
              "name": "pause",
              "desc": "<!--\nPauses the incoming `'data'` events.\n-->\n\n<p><code>&apos;data&apos;</code> イベントの到着を中断します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.resume()",
              "type": "method",
              "name": "resume",
              "desc": "<!--\nResumes the incoming `'data'` events after a `pause()`.\n-->\n\n<p><code>pause()</code> の後で <code>&apos;data&apos;</code> イベントの到着を再開します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.destroy()",
              "type": "method",
              "name": "destroy",
              "desc": "<!--\nCloses the underlying file descriptor. Stream will not emit any more events.\n-->\n\n<p>下層のファイル記述子をクローズします。ストリームはそれ以上イベントを生成しなくなります。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.pipe(destination, [options])",
              "type": "method",
              "name": "pipe",
              "desc": "<!--\nThis is a `Stream.prototype` method available on all `Stream`s.\n-->\n\n<p>これは全ての <code>Stream</code> で利用可能な <code>Stream.prototype</code> メソッドです。\n\n</p>\n<!--\nConnects this read stream to `destination` WriteStream. Incoming\ndata on this stream gets written to `destination`. The destination and source\nstreams are kept in sync by pausing and resuming as necessary.\n-->\n\n<p>読み込みストリームを <code>destination</code> の書き込みストリームに接続します。\nこのストリームに入ってきたデータは <code>destination</code> に書き込まれます。\n接続先と接続元のストリームは、必要に応じて中断と再開することで同期を保ちます。\n\n</p>\n<!--\nThis function returns the `destination` stream.\n-->\n\n<p>この関数は <code>destination</code> ストリームを返します。\n\n</p>\n<!--\nEmulating the Unix `cat` command:\n-->\n\n<p>Unix の <code>cat</code> コマンドのエミュレート:\n\n</p>\n<pre><code>process.stdin.resume();\nprocess.stdin.pipe(process.stdout);</code></pre>\n<!--\nBy default `end()` is called on the destination when the source stream emits\n`end`, so that `destination` is no longer writable. Pass `{ end: false }` as\n`options` to keep the destination stream open.\n-->\n\n<p>デフォルトでは接続元ストリームで <code>end</code> イベントが生成されると、\n接続先の <code>end()</code> が呼ばれるので、もう書き込みはできません。\n<code>option</code> に <code>{ end: false }</code> を渡すと接続先はストリームはオープンされたままとなります。\n\n</p>\n<!--\nThis keeps `process.stdout` open so that \"Goodbye\" can be written at the end.\n-->\n\n<p>これは <code>process.stdout</code> をオープンしたままにして最後に &quot;Goodbye&quot; と出力します。\n\n</p>\n<pre><code>process.stdin.resume();\n\nprocess.stdin.pipe(process.stdout, { end: false });\n\nprocess.stdin.on(&quot;end&quot;, function() {\n  process.stdout.write(&quot;Goodbye\\n&quot;);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "destination"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Writable Stream",
          "name": "Writable Stream",
          "type": "class",
          "desc": "<!--\nA `Writable Stream` has the following methods, members, and events.\n-->\n\n<p><code>Writable Stream</code> には以下のメソッド、メンバー、そしてイベントがあります。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'drain'",
              "type": "event",
              "name": "drain",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nAfter a `write()` method returned `false`, this event is emitted to\nindicate that it is safe to write again.\n-->\n\n<p><code>write()</code> メソッドが <code>false</code> でリターンした後、\n再び安全に書き込むことができるようになったことを示すために、\nこのイベントは生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "desc": "<p><code>function (exception) { }</code>\n\n</p>\n<!--\nEmitted on error with the exception `exception`.\n-->\n\n<p><code>exception</code> 例外によるエラーについて生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the underlying file descriptor has been closed.\n-->\n\n<p>下層でファイル記述子がクローズされた時に生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'pipe'",
              "type": "event",
              "name": "pipe",
              "desc": "<p><code>function (src) { }</code>\n\n</p>\n<!--\nEmitted when the stream is passed to a readable stream's pipe method.\n-->\n\n<p>このストリームが読み込み可能ストリームの pipe メソッドに渡された時に生成されます。\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "stream.writable",
              "name": "writable",
              "desc": "<!--\nA boolean that is `true` by default, but turns `false` after an `'error'`\noccurred or `end()` / `destroy()` was called.\n-->\n\n<p>デフォルトでは <code>true</code> ですが、<code>&apos;error&apos;</code> が発生した後、\n<code>end()</code> / <code>destroy()</code> が呼ばれた後で <code>false</code> に設定される boolean です。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "stream.write(string, [encoding], [fd])",
              "type": "method",
              "name": "write",
              "desc": "<!--\nWrites `string` with the given `encoding` to the stream.  Returns `true` if\nthe string has been flushed to the kernel buffer.  Returns `false` to\nindicate that the kernel buffer is full, and the data will be sent out in\nthe future. The `'drain'` event will indicate when the kernel buffer is\nempty again. The `encoding` defaults to `'utf8'`.\n-->\n\n<p>与えられた <code>encoding</code> で <code>string</code> を書き込みます。\n文字列がカーネルバッファにフラッシュされた場合は <code>true</code> が返ります。\nカーネルバッファがいっぱいの場合は、データが将来カーネルバッファに送られることを示すために、\n<code>false</code> が返ります。\n<code>&apos;drain&apos;</code> イベントがカーネルバッファが再び空いたことを示します。\n<code>encoding</code> のデフォルトは <code>&apos;utf8&apos;</code> です。\n\n</p>\n<!--\nIf the optional `fd` parameter is specified, it is interpreted as an integral\nfile descriptor to be sent over the stream. This is only supported for UNIX\nstreams, and is silently ignored otherwise. When writing a file descriptor in\nthis manner, closing the descriptor before the stream drains risks sending an\ninvalid (closed) FD.\n-->\n\n<p>オプションの <code>fd</code> 引数が指定されると、\nストリームに送信するための基礎となるファイル記述子として解釈されます。\nこれは UNIX ストリームでのみサポートされており、その他では黙って無視されます。\nこのようにファイル記述子に書き込む場合、ストリームが流れきる前にファイル記述子をクローズすると、\nデータが不正な (クローズされた) ファイル記述子に送られるリスクがあります。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "fd",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.write(buffer)",
              "type": "method",
              "name": "write",
              "desc": "<!--\nSame as the above except with a raw buffer.\n-->\n\n<p>生のバッファを使うこと以外は上記と同じです。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.end()",
              "type": "method",
              "name": "end",
              "desc": "<!--\nTerminates the stream with EOF or FIN.\nThis call will allow queued write data to be sent before closing the stream.\n-->\n\n<p>ストリームを EOF または FIN で終了します。\nこの呼び出しは、ストリームがクローズされる前にキューイングされたデータが\n送信されることを許します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.end(string, encoding)",
              "type": "method",
              "name": "end",
              "desc": "<!--\nSends `string` with the given `encoding` and terminates the stream with EOF\nor FIN. This is useful to reduce the number of packets sent.\n-->\n\n<p>与えられた <code>encoding</code> で <code>string</code> を送信してからEOFまたはFINでストリームを終了します。\nこれは送信するパケットの数を減らすために便利です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "encoding"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.end(buffer)",
              "type": "method",
              "name": "end",
              "desc": "<!--\nSame as above but with a `buffer`.\n-->\n\n<p><code>buffer</code> であること以外は上記と同じです。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.destroy()",
              "type": "method",
              "name": "destroy",
              "desc": "<!--\nCloses the underlying file descriptor. Stream will not emit any more events.\nAny queued write data will not be sent.\n-->\n\n<p>下層のファイル記述子をクローズします。ストリームはそれ以上イベントを生成しなくなります。\nキューイングされたデータは送信されません。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.destroySoon()",
              "type": "method",
              "name": "destroySoon",
              "desc": "<!--\nAfter the write queue is drained, close the file descriptor. `destroySoon()`\ncan still destroy straight away, as long as there is no data left in the queue\nfor writes.\n-->\n\n<p>出力キューが空になった後、ファイル記述子をクローズします。\n出力キューにデータが存在しない場合、<code>destroySoon()</code> はすぐに破棄します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Stream"
    },
    {
      "textRaw": "Crypto",
      "name": "crypto",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nUse `require('crypto')` to access this module.\n-->\n\n<p>このモジュールにアクセスするには <code>require(&apos;crypto&apos;)</code> を使用します。\n\n</p>\n<!--\nThe crypto module requires OpenSSL to be available on the underlying platform.\nIt offers a way of encapsulating secure credentials to be used as part\nof a secure HTTPS net or http connection.\n-->\n\n<p>暗号化モジュールは下層のプラットフォームで OpenSSL が有効であることを必要とします。\nそれは安全な HTTPS ネットワークや http コネクションの一部として使われる、\n安全な認証情報をカプセル化する方法を提供します。\n\n</p>\n<!--\nIt also offers a set of wrappers for OpenSSL's hash, hmac, cipher, decipher, sign and verify methods.\n-->\n\n<p>同時に OpenSSL のハッシュ、HMAC、暗号、復号、署名、そして検証へのラッパーを一式提供します。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "crypto.createCredentials(details)",
          "type": "method",
          "name": "createCredentials",
          "desc": "<!--\nCreates a credentials object, with the optional details being a dictionary with keys:\n-->\n\n<p>認証情報オブジェクトを作成します。オプションの <code>details</code> は以下のキーを持つ辞書です:\n\n</p>\n<!--\n* `pfx` : A string or buffer holding the PFX or PKCS12 encoded private key, certificate and CA certificates\n* `key` : a string holding the PEM encoded private key\n* `cert` : a string holding the PEM encoded certificate\n* `passphrase` : A string of passphrase for the private key or pfx\n* `ca` : either a string or list of strings of PEM encoded CA certificates to trust.\n* `ciphers`: a string describing the ciphers to use or exclude. Consult\n  <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT> for details\n  on the format.\n-->\n\n<ul>\n<li><code>pfx</code>: PFX または PKCS12 でエンコードされた秘密鍵、証明書、および認証局を\n表す文字列または <code>Buffer</code>。</li>\n<li><code>key</code> : PEM でエンコードされた秘密鍵を表す文字列。</li>\n<li><code>cert</code> : PEM でエンコードされた証明書を表す文字列。</li>\n<li><code>passphrase</code> : 秘密鍵または pfx のパスフレーズを表す文字列。</li>\n<li><code>ca</code> : 信頼できる認証局の証明書が PEM でエンコードされた文字列または\n文字列の配列。</li>\n<li><code>ciphers</code>: 使用または除外する暗号を記述した文字列。\n詳細は <a href=\"http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT\">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT</a>\nを参照してください。</li>\n</ul>\n<!--\nIf no 'ca' details are given, then node.js will use the default publicly trusted list of CAs as given in\n<http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt>.\n-->\n\n<p>&apos;ca&apos; の詳細が与えられなかった場合、node.js はデフォルトとして\n</p>\n<p><a href=\"http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt\">http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a>\nで与えられる、信頼できる認証局の公開されたリストを使用します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "details"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createHash(algorithm)",
          "type": "method",
          "name": "createHash",
          "desc": "<!--\nCreates and returns a hash object, a cryptographic hash with the given algorithm\nwhich can be used to generate hash digests.\n-->\n\n<p>ハッシュオブジェクトを生成して返します。\n与えられたアルゴリズムによる暗号ハッシュ関数はダイジェストの生成に使われます。\n\n</p>\n<!--\n`algorithm` is dependent on the available algorithms supported by the version\nof OpenSSL on the platform. Examples are `'sha1'`, `'md5'`, `'sha256'`, `'sha512'`, etc.\nOn recent releases, `openssl list-message-digest-algorithms` will display the available digest algorithms.\n-->\n\n<p><code>algorithm</code> は、プラットフォーム上の OpenSSL \nのバージョンでサポートされている利用可能なアルゴリズムに依存します。\n例えば <code>&apos;sha1&apos;</code>、<code>&apos;md5&apos;</code>、<code>&apos;sha256&apos;</code>、<code>&apos;sha512&apos;</code>、などです。\n最近のリリースでは、<code>openssl list-message-digest-algorithms</code>\nで利用可能なダイジェストアルゴリズムが表示されます。\n\n</p>\n<!--\nExample: this program that takes the sha1 sum of a file\n-->\n\n<p>例: このプログラムはファイルのsha1ハッシュ値を求めます。\n\n</p>\n<pre><code>var filename = process.argv[2];\nvar crypto = require(&apos;crypto&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar shasum = crypto.createHash(&apos;sha1&apos;);\n\nvar s = fs.ReadStream(filename);\ns.on(&apos;data&apos;, function(d) {\n  shasum.update(d);\n});\n\ns.on(&apos;end&apos;, function() {\n  var d = shasum.digest(&apos;hex&apos;);\n  console.log(d + &apos;  &apos; + filename);\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createHmac(algorithm, key)",
          "type": "method",
          "name": "createHmac",
          "desc": "<!--\nCreates and returns a hmac object, a cryptographic hmac with the given algorithm and key.\n-->\n\n<p>与えられたアルゴリズムとキーで HMAC を計算する、HMAC オブジェクトを作成して返します。\n\n</p>\n<!--\n`algorithm` is dependent on the available algorithms supported by OpenSSL - see createHash above.\n`key` is the hmac key to be used.\n-->\n\n<p><code>algorithm</code> は OpenSSL でサポートされているアルゴリズムに依存します － \n前述の <code>createHash</code> を参照してください。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                },
                {
                  "name": "key"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createCipher(algorithm, password)",
          "type": "method",
          "name": "createCipher",
          "desc": "<!--\nCreates and returns a cipher object, with the given algorithm and password.\n\n`algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc.\nOn recent releases, `openssl list-cipher-algorithms` will display the\navailable cipher algorithms.\n`password` is used to derive key and IV, which must be `'binary'` encoded\nstring (See the [Buffer section](buffer.html) for more information).\n-->\n\n<p>与えられたアルゴリズムとパスワードを使用する暗号オブジェクトを作成して返します。\n<code>algorithm</code> は、OpenSSL に依存します。例えば <code>&apos;aes192&apos;</code> などです。\n最近のリリースでは、<code>openssl list-cipher-algorithms</code>\nで利用可能な暗号アルゴリズムが表示されます。\n<code>password</code> はキーと IV の生成に使用されます。\nこれは <code>&apos;binary&apos;</code> でエンコードされた文字列でなければなりません\n(より詳細は <a href=\"buffers.html\">Buffers</a> を参照してください)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                },
                {
                  "name": "password"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createCipheriv(algorithm, key, iv)",
          "type": "method",
          "name": "createCipheriv",
          "desc": "<!--\nCreates and returns a cipher object, with the given algorithm, key and iv.\n\n`algorithm` is the same as the `createCipher()`. `key` is a raw key used in\nalgorithm. `iv` is an Initialization vector. `key` and `iv` must be `'binary'`\nencoded string (See the [Buffer section](buffer.html) for more information).\n-->\n\n<p>与えられたアルゴリズムとキーおよび IV を使用する暗号オブジェクトを作成して返します。\n<code>algorithm</code> は <code>createCSipher()</code> と同じです。\n<code>key</code> はアルゴリズムで使用される生のキーです。 <code>iv</code> は初期化ベクトルです。\n<code>key</code> と <code>iv</code> は <code>&apos;binary&apos;</code> でエンコードされた文字列でなければなりません\n(より詳細は <a href=\"buffers.html\">Buffers</a> を参照してください)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                },
                {
                  "name": "key"
                },
                {
                  "name": "iv"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createDecipher(algorithm, password)",
          "type": "method",
          "name": "createDecipher",
          "desc": "<!--\nCreates and returns a decipher object, with the given algorithm and key.\nThis is the mirror of the [createCipher()](#crypto.createCipher) above.\n-->\n\n<p>与えられたアルゴリズムとパスワードを使用する復号オブジェクトを作成して返します。\nこれは前述の <a href=\"#crypto.createCipher\">createCipher()</a> の鏡写しです。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                },
                {
                  "name": "password"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createDecipheriv(algorithm, key, iv)",
          "type": "method",
          "name": "createDecipheriv",
          "desc": "<!--\nCreates and returns a decipher object, with the given algorithm, key and iv.\nThis is the mirror of the [createCipheriv()](#crypto.createCipheriv) above.\n-->\n\n<p>与えられたアルゴリズムとキー、IV を使用する復号オブジェクトを作成して返します。\nこれは前述の <a href=\"#crypto.createCipheriv\">createCipheriv()</a> の鏡写しです。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                },
                {
                  "name": "key"
                },
                {
                  "name": "iv"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createSign(algorithm)",
          "type": "method",
          "name": "createSign",
          "desc": "<!--\nCreates and returns a signing object, with the given algorithm.\nOn recent OpenSSL releases, `openssl list-public-key-algorithms` will display\nthe available signing algorithms. Examples are `'RSA-SHA256'`.\n-->\n\n<p>与えられたアルゴリズムで署名オブジェクトを作成して返します。\n最近のOpenSSLのリリースでは、<code>openssl list-public-key-algorithms</code>\nで利用可能な署名アルゴリズムの一覧が表示されます。例えば &apos;RSA-SHA256&apos;。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createVerify(algorithm)",
          "type": "method",
          "name": "createVerify",
          "desc": "<!--\nCreates and returns a verification object, with the given algorithm.\nThis is the mirror of the signing object above.\n-->\n\n<p>与えられたアルゴリズムで検証オブジェクトを作成して返します。これは前述の署名オブジェクトと鏡写しです。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "algorithm"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createDiffieHellman(prime_length)",
          "type": "method",
          "name": "createDiffieHellman",
          "desc": "<!--\nCreates a Diffie-Hellman key exchange object and generates a prime of the\ngiven bit length. The generator used is `2`.\n-->\n\n<p>ディフィー・ヘルマン鍵共有オブジェクトを作成し、\n与えられた長さの素数を生成します。生成元は <code>2</code> です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "prime_length"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.createDiffieHellman(prime, [encoding])",
          "type": "method",
          "name": "createDiffieHellman",
          "desc": "<!--\nCreates a Diffie-Hellman key exchange object using the supplied prime. The\ngenerator used is `2`. Encoding can be `'binary'`, `'hex'`, or `'base64'`.\nDefaults to `'binary'`.\n-->\n\n<p>与えられた素数からディフィー・ヘルマン鍵共有オブジェクトを作成します。\n生成元は <code>2</code> です。\nエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "prime"
                },
                {
                  "name": "encoding",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.pbkdf2(password, salt, iterations, keylen, callback)",
          "type": "method",
          "name": "pbkdf2",
          "desc": "<!--\nAsynchronous PBKDF2 applies pseudorandom function HMAC-SHA1 to derive\na key of given length from the given password, salt and iterations.\nThe callback gets two arguments `(err, derivedKey)`.\n-->\n\n<p>疑似乱数を HMAC-SHA1 関数に適用して、与えられたパスワードと salt \n(ランダムなバイト値)、および繰り返しから、指定された長さの鍵を生成する、\n非同期の PBKDF2 です。\nコールバック関数は二つの引数を受け取る <code>(err, derivedKey)</code> です。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "password"
                },
                {
                  "name": "salt"
                },
                {
                  "name": "iterations"
                },
                {
                  "name": "keylen"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "crypto.randomBytes(size, [callback])",
          "type": "method",
          "name": "randomBytes",
          "desc": "<!--\nGenerates cryptographically strong pseudo-random data. Usage:\n-->\n\n<p>暗号学的に強い疑似乱数データを生成します。使用法:\n\n</p>\n<pre><code>// async\ncrypto.randomBytes(256, function(ex, buf) {\n  if (ex) throw ex;\n  console.log(&apos;Have %d bytes of random data: %s&apos;, buf.length, buf);\n});\n\n// sync\ntry {\n  var buf = crypto.randomBytes(256);\n  console.log(&apos;Have %d bytes of random data: %s&apos;, buf.length, buf);\n} catch (ex) {\n  // handle error\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "size"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Hash",
          "type": "class",
          "name": "Hash",
          "desc": "<!--\nThe class for creating hash digests of data.\n\nReturned by `crypto.createHash`.\n-->\n\n<p>データのハッシュダイジェストを生成するクラスです。\n\n</p>\n<p><code>crypto.createHash()</code> によって返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "hash.update(data, [input_encoding])",
              "type": "method",
              "name": "update",
              "desc": "<!--\nUpdates the hash content with the given `data`, the encoding of which is given\nin `input_encoding` and can be `'utf8'`, `'ascii'` or `'binary'`.\nDefaults to `'binary'`.\nThis can be called many times with new data as it is streamed.\n-->\n\n<p>与えられた <code>data</code> でハッシュの内容を更新します。\nそのエンコーディングは <code>input_encoding</code> で与えられ、<code>&apos;utf8&apos;</code>、<code>&apos;ascii&apos;</code>、\nまたは <code>&apos;binary&apos;</code> を指定することができます。\nデフォルトは <code>&apos;binary&apos;</code> です。\nこれは新しいデータがストリームに流される際に何度も呼び出されます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "input_encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "hash.digest([encoding])",
              "type": "method",
              "name": "digest",
              "desc": "<!--\nCalculates the digest of all of the passed data to be hashed.\nThe `encoding` can be `'hex'`, `'binary'` or `'base64'`.\nDefaults to `'binary'`.\n\nNote: `hash` object can not be used after `digest()` method been called.\n-->\n\n<p>渡された全てのデータがハッシュ化されたダイジェストを計算します。\n<code>encoding</code> は <code>&apos;hex&apos;</code>、<code>&apos;binary&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<p>注意: <code>digest()</code> メソッドを呼び出した後で <code>hash</code> \nオブジェクトを使うことはできません。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: Hmac",
          "type": "class",
          "name": "Hmac",
          "desc": "<!--\nClass for creating cryptographic hmac content.\n\nReturned by `crypto.createHmac`.\n-->\n\n<p>暗号化された HMAC コンテントを生成するためのクラスです。\n\n</p>\n<p><code>crypto.createHmac()</code> によって返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "hmac.update(data)",
              "type": "method",
              "name": "update",
              "desc": "<!--\nUpdate the hmac content with the given `data`.\nThis can be called many times with new data as it is streamed.\n-->\n\n<p>与えられた <code>data</code> で HMAC の内容を更新します。\nこれは新しいデータがストリームに流される際に何度も呼び出されます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "hmac.digest([encoding])",
              "type": "method",
              "name": "digest",
              "desc": "<!--\nCalculates the digest of all of the passed data to the hmac.\nThe `encoding` can be `'hex'`, `'binary'` or `'base64'`.\nDefaults to `'binary'`.\n\nNote: `hmac` object can not be used after `digest()` method been called.\n-->\n\n<p>渡された全てのデータが HMAC 化されたダイジェストを計算します。\n<code>encoding</code> は <code>&apos;hex&apos;</code>、<code>&apos;binary&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<p>注意: <code>digest()</code> メソッドを呼び出した後で <code>hmac</code> \nオブジェクトを使うことはできません。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: Cipher",
          "type": "class",
          "name": "Cipher",
          "desc": "<!--\nClass for encrypting data.\n\nReturned by `crypto.createCipher` and `crypto.createCipheriv`.\n-->\n\n<p>データを暗号化するためのクラスです。\n\n</p>\n<p><code>crypto.createCipher</code> および <code>crypto.createCipheriv</code> から返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "cipher.update(data, [input_encoding], [output_encoding])",
              "type": "method",
              "name": "update",
              "desc": "<!--\nUpdates the cipher with `data`, the encoding of which is given in\n`input_encoding` and can be `'utf8'`, `'ascii'` or `'binary'`.\nDefaults to `'binary'`.\n\nThe `output_encoding` specifies the output format of the enciphered data,\nand can be `'binary'`, `'base64'` or `'hex'`. Defaults to `'binary'`.\n-->\n\n<p><code>data</code> で暗号を更新します。\n<code>input_encoding</code> で与えられるエンコーディングは <code>&apos;utf8&apos;</code>、<code>&apos;ascii&apos;</code>、<code>&apos;binary&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<p><code>output_encoding</code> は暗号化されたデータの出力フォーマットを指定するもので、\n<code>&apos;utf8&apos;</code>、<code>&apos;ascii&apos;</code> または <code>&apos;binary&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<!--\nReturns the enciphered contents, and can be called many times with new data as it is streamed.\n-->\n\n<p>暗号化されたコンテンツが返されます。これは新しいデータがストリームに流される際に何度も呼び出されます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "input_encoding",
                      "optional": true
                    },
                    {
                      "name": "output_encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "cipher.final([output_encoding])",
              "type": "method",
              "name": "final",
              "desc": "<!--\nReturns any remaining enciphered contents, with `output_encoding` being one of:\n`'binary'`, `'base64'` or `'hex'`. Defaults to `'binary'`.\n\nNote: `cipher` object can not be used after `final()` method been called.\n-->\n\n<p>暗号化されたコンテンツの残りを返します。\n<code>output_encoding</code> は次のいずれかです: <code>&apos;binary&apos;</code>、<code>&apos;base64&apos;</code> または <code>&apos;hex&apos;</code>。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<p>注意: <code>final()</code> メソッドを呼び出した後で <code>cipher</code> \nオブジェクトを使うことはできません。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "output_encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: Decipher",
          "type": "class",
          "name": "Decipher",
          "desc": "<!--\nClass for decrypting data.\n\nReturned by `crypto.createDecipher` and `crypto.createDecipheriv`.\n-->\n\n<p>データを復号化するためのクラスです。\n\n</p>\n<p><code>crypto.createDecipher</code> または <code>crypto.createDecipheriv</code> から返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "decipher.update(data, [input_encoding], [output_encoding])",
              "type": "method",
              "name": "update",
              "desc": "<!--\nUpdates the decipher with `data`, which is encoded in `'binary'`, `'base64'`\nor `'hex'`. Defaults to `'binary'`.\n\nThe `output_decoding` specifies in what format to return the deciphered\nplaintext: `'binary'`, `'ascii'` or `'utf8'`. Defaults to `'binary'`.\n-->\n\n<p><code>&apos;binary&apos;</code>、<code>&apos;base64&apos;</code> または <code>&apos;hex&apos;</code> のいずれかでエンコードされた復号を\n<code>data</code> で更新します。デフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<p><code>output_decoding</code> は復号化されたプレーンテキストのフォーマットを指定するもので、\n<code>&apos;binary&apos;</code>、<code>&apos;ascii&apos;</code> あるいは <code>&apos;utf8&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "input_encoding",
                      "optional": true
                    },
                    {
                      "name": "output_encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "decipher.final([output_encoding])",
              "type": "method",
              "name": "final",
              "desc": "<!--\nReturns any remaining plaintext which is deciphered,\nwith `output_encoding` being one of: `'binary'`, `'ascii'` or `'utf8'`.\nDefaults to `'binary'`.\n\nNote: `decipher` object can not be used after `final()` method been called.\n-->\n\n<p>復号化されたプレーンテキストの残りを返します。\n<code>output_decoding</code> は <code>&apos;binary&apos;</code>、<code>&apos;ascii&apos;</code> あるいは <code>&apos;utf8&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<p>注意: <code>final()</code> メソッドを呼び出した後で <code>decipher</code> \nオブジェクトを使うことはできません。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "output_encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: Signer",
          "type": "class",
          "name": "Signer",
          "desc": "<!--\nClass for generating signatures.\n\nReturned by `crypto.createSign`.\n-->\n\n<p>署名を生成するためのクラスです。\n\n</p>\n<p><code>crypto.createSign()</code> から返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "signer.update(data)",
              "type": "method",
              "name": "update",
              "desc": "<!--\nUpdates the signer object with data.\nThis can be called many times with new data as it is streamed.\n-->\n\n<p>署名オブジェクトをデータで更新します。\nこれは新しいデータがストリームに流される際に何度も呼び出されます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "signer.sign(private_key, [output_format])",
              "type": "method",
              "name": "sign",
              "desc": "<!--\nCalculates the signature on all the updated data passed through the signer.\n`private_key` is a string containing the PEM encoded private key for signing.\n-->\n\n<p>署名オブジェクトに渡された全ての更新データで署名を計算します。\n<code>private_key</code> は PEM でエンコードされた秘密鍵を内容とする文字列です。\n\n</p>\n<!--\nReturns the signature in `output_format` which can be `'binary'`, `'hex'` or\n`'base64'`. Defaults to `'binary'`.\n\nNote: `signer` object can not be used after `sign()` method been called.\n-->\n\n<p><code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、あるいは <code>&apos;base64&apos;</code> のいずれかを指定した <code>output_format</code>\nによる署名を返します。デフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<p>注意: <code>sign()</code> メソッドを呼び出した後で <code>signer</code> \nオブジェクトを使うことはできません。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "private_key"
                    },
                    {
                      "name": "output_format",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: Verify",
          "type": "class",
          "name": "Verify",
          "desc": "<!--\nClass for verifying signatures.\n\nReturned by `crypto.createVerify`.\n-->\n\n<p>署名を検証するクラスです。\n\n</p>\n<p><code>crypto.createVerify()</code> から返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "verifier.update(data)",
              "type": "method",
              "name": "update",
              "desc": "<!--\nUpdates the verifier object with data.\nThis can be called many times with new data as it is streamed.\n-->\n\n<p>検証オブジェクトをデータで更新します。\nこれは新しいデータがストリームに流される際に何度も呼び出されます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "verifier.verify(object, signature, [signature_format])",
              "type": "method",
              "name": "verify",
              "desc": "<!--\nVerifies the signed data by using the `object` and `signature`. `object` is  a\nstring containing a PEM encoded object, which can be one of RSA public key,\nDSA public key, or X.509 certificate. `signature` is the previously calculated\nsignature for the data, in the `signature_format` which can be `'binary'`,\n`'hex'` or `'base64'`. Defaults to `'binary'`.\n-->\n\n<p>署名されたデータを <code>object</code> と <code>signature</code> で検証します。\n<code>object</code> は RSA 公開鍵、DSA 公開鍵、X.509証明書のいずれかを\nPEM でエンコードしたオブジェクトです。\n<code>signature</code> は先に計算したデータの署名で、\nその <code>signature_format</code> は <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code>\nのいずれかです。デフォルトは <code>&apos;binary&apos;</code> です。\n\n</p>\n<!--\nReturns true or false depending on the validity of the signature for the data and public key.\n\nNote: `verifier` object can not be used after `verify()` method been called.\n-->\n\n<p>署名されたデータと公開鍵による検証の結果によって true または false を返します。\n\n</p>\n<p>注意: <code>verify()</code> メソッドを呼び出した後で <code>verifier</code> \nオブジェクトを使うことはできません。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "object"
                    },
                    {
                      "name": "signature"
                    },
                    {
                      "name": "signature_format",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: DiffieHellman",
          "type": "class",
          "name": "DiffieHellman",
          "desc": "<!--\nThe class for creating Diffie-Hellman key exchanges.\n\nReturned by `crypto.createDiffieHellman`.\n-->\n\n<p>ディフィー・ヘルマン鍵交換を生成するためのクラスです。\n\n</p>\n<p><code>crypto.createDiffieHellman()</code> から返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "diffieHellman.generateKeys([encoding])",
              "type": "method",
              "name": "generateKeys",
              "desc": "<!--\nGenerates private and public Diffie-Hellman key values, and returns the\npublic key in the specified encoding. This key should be transferred to the\nother party. Encoding can be `'binary'`, `'hex'`, or `'base64'`.\nDefaults to `'binary'`.\n-->\n\n<p>ディフィー・ヘルマン法で秘密および公開鍵を作成し、\n指定の方法でエンコーディングされた公開鍵を返します。\nこの鍵は相手側に渡されるものです。\nエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])",
              "type": "method",
              "name": "computeSecret",
              "desc": "<!--\nComputes the shared secret using `other_public_key` as the other party's\npublic key and returns the computed shared secret. Supplied key is\ninterpreted using specified `input_encoding`, and secret is encoded using\nspecified `output_encoding`. Encodings can be `'binary'`, `'hex'`, or\n`'base64'`. The input encoding defaults to `'binary'`.\nIf no output encoding is given, the input encoding is used as output encoding.\n-->\n\n<p><code>other_public_key</code> を相手側の公開鍵として共有の秘密鍵を計算して返します。\n与えられた公開鍵は指定の <code>input_encoding</code> を使って解釈され、\n秘密鍵は <code>output_encoding</code> で指定された方法でエンコードされます。\nエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\n入力エンコーディングのデフォルトは <code>&apos;binary&apos;</code> です。\n出力のエンコーディングが与えられなかった場合は、入力のエンコーディングが\n出力エンコーディングとして使われます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "other_public_key"
                    },
                    {
                      "name": "input_encoding",
                      "optional": true
                    },
                    {
                      "name": "output_encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "diffieHellman.getPrime([encoding])",
              "type": "method",
              "name": "getPrime",
              "desc": "<!--\nReturns the Diffie-Hellman prime in the specified encoding, which can be\n`'binary'`, `'hex'`, or `'base64'`. Defaults to `'binary'`.\n-->\n\n<p>ディフィー・ヘルマン法の素数を指定のエンコーディングで返します。\nエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "diffieHellman.getGenerator([encoding])",
              "type": "method",
              "name": "getGenerator",
              "desc": "<!--\nReturns the Diffie-Hellman prime in the specified encoding, which can be\n`'binary'`, `'hex'`, or `'base64'`. Defaults to `'binary'`.\n-->\n\n<p>ディフィー・ヘルマン法の生成元を指定のエンコーディングで返します。\nエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "diffieHellman.getPublicKey([encoding])",
              "type": "method",
              "name": "getPublicKey",
              "desc": "<!--\nReturns the Diffie-Hellman public key in the specified encoding, which can\nbe `'binary'`, `'hex'`, or `'base64'`. Defaults to `'binary'`.\n-->\n\n<p>ディフィー・ヘルマン法による公開鍵を指定のエンコーディングで返します。\nエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "diffieHellman.getPrivateKey([encoding])",
              "type": "method",
              "name": "getPrivateKey",
              "desc": "<!--\nReturns the Diffie-Hellman private key in the specified encoding, which can\nbe `'binary'`, `'hex'`, or `'base64'`. Defaults to `'binary'`.\n-->\n\n<p>ディフィー・ヘルマン法による秘密鍵を指定のエンコーディングで返します。\nエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "diffieHellman.setPublicKey(public_key, [encoding])",
              "type": "method",
              "name": "setPublicKey",
              "desc": "<!--\nSets the Diffie-Hellman public key. Key encoding can be `'binary'`, `'hex'`,\nor `'base64'`. Defaults to `'binary'`.\n-->\n\n<p>ディフィー・ヘルマン法による公開鍵を設定します。\n鍵のエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "public_key"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "diffieHellman.setPrivateKey(public_key, [encoding])",
              "type": "method",
              "name": "setPrivateKey",
              "desc": "<!--\nSets the Diffie-Hellman private key. Key encoding can be `'binary'`, `'hex'`,\nor `'base64'`. Defaults to `'binary'`.\n-->\n\n<p>ディフィー・ヘルマン法による秘密鍵を設定します。\n鍵のエンコーディングは <code>&apos;binary&apos;</code>、<code>&apos;hex&apos;</code>、または <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>&apos;binary&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "public_key"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Crypto"
    },
    {
      "textRaw": "TLS (SSL)",
      "name": "tls_(ssl)",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nUse `require('tls')` to access this module.\n-->\n\n<p><code>require(&apos;tls&apos;)</code> でこのモジュールにアクセスします。\n\n</p>\n<!--\nThe `tls` module uses OpenSSL to provide Transport Layer Security and/or\nSecure Socket Layer: encrypted stream communication.\n-->\n\n<p><code>tls</code> モジュールは OpenSSL を使用することで Transport Layer Security および\nSecure Socket Layer: 暗号化されたストリーム通信を提供します。\n\n</p>\n<!--\nTLS/SSL is a public/private key infrastructure. Each client and each\nserver must have a private key. A private key is created like this\n-->\n\n<p>TLS/SSL は公開／秘密鍵を基礎とします。\nどのクライアントとサーバも秘密鍵が必要です。\n秘密鍵は次のように作成します\n\n</p>\n<pre><code>openssl genrsa -out ryans-key.pem 1024</code></pre>\n<!--\nAll severs and some clients need to have a certificate. Certificates are public\nkeys signed by a Certificate Authority or self-signed. The first step to\ngetting a certificate is to create a \"Certificate Signing Request\" (CSR)\nfile. This is done with:\n-->\n\n<p>全てのサーバと一部のクライアントは証明書を必要とします。\n証明書は認証局の公開鍵または自身によって署名されます。\n証明書を作成する最初のステップは「証明書署名要求 (CSR)」ファイルです。\n次のようにします:\n\n</p>\n<pre><code>openssl req -new -key ryans-key.pem -out ryans-csr.pem</code></pre>\n<!--\nTo create a self-signed certificate with the CSR, do this:\n-->\n\n<p>CSR から自己署名証明書を作成するには次のようにします:\n\n</p>\n<pre><code>openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem</code></pre>\n<!--\nAlternatively you can send the CSR to a Certificate Authority for signing.\n-->\n\n<p>他に CSR を認証局に送って署名してもらうこともできます。\n\n</p>\n<!--\n(TODO: docs on creating a CA, for now interested users should just look at\n`test/fixtures/keys/Makefile` in the Node source code)\n-->\n\n<p>(TODO: CA を作るドキュメント、現在は興味あるユーザは Node のソースコードから\n<code>test/fixtures/keys/Makefile</code> を見る必要がある)\n\n</p>\n<!--\nTo create .pfx or .p12, do this:\n-->\n\n<p>.pfx または .p12 を作成するには、次のようにします。\n\n</p>\n<pre><code>openssl pkcs12 -export -in agent5-cert.pem -inkey agent5-key.pem \\\n    -certfile ca-cert.pem -out agent5.pfx</code></pre>\n<!--\n  - `in`:  certificate\n  - `inkey`: private key\n  - `certfile`: all CA certs concatenated in one file like\n    `cat ca1-cert.pem ca2-cert.pem > ca-cert.pem`\n-->\n\n<ul>\n<li><code>in</code>: 証明書</li>\n<li><code>inkey</code>: 秘密鍵</li>\n<li><code>certfile</code>: 全ての認証局が含まれた、次のようなファイル。\n<code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>\n</ul>\n",
      "miscs": [
        {
          "textRaw": "Client-initiated renegotiation attack mitigation",
          "name": "Client-initiated renegotiation attack mitigation",
          "type": "misc",
          "desc": "<!--\nThe TLS protocol lets the client renegotiate certain aspects of the TLS session.\nUnfortunately, session renegotiation requires a disproportional amount of\nserver-side resources, which makes it a potential vector for denial-of-service\nattacks.\n\nTo mitigate this, renegotiations are limited to three times every 10 minutes. An\nerror is emitted on the [CleartextStream](#tls.CleartextStream) instance when\nthe threshold is exceeded. The limits are configurable:\n\n  - `tls.CLIENT_RENEG_LIMIT`: renegotiation limit, default is 3.\n\n  - `tls.CLIENT_RENEG_WINDOW`: renegotiation window in seconds, default is\n                               10 minutes.\n\nDon't change the defaults unless you know what you are doing.\n\nTo test your server, connect to it with `openssl s_client -connect address:port`\nand tap `R<CR>` (that's the letter `R` followed by a carriage return) a few\ntimes.\n-->\n\n<p>TLS では、クライアントから TLS セッションの再ネゴシエーションが可能です。\n\n</p>\n<p>残念なことに、セッションの再ネゴシエーションは過度な量のサーバサイドリソースを\n要求し、それは潜在的にサービスを強制停止する攻撃となります。\n\n</p>\n<p>これを緩和するために、再ネゴシエーションは 10 分あたり 3 回までに\n制限されています。この閾値を超えると、<a href=\"#tls.CleartextStream\">CleartextStream</a>\nのインスタンスで <code>&apos;error&apos;</code> が生成されます。\nこの制限はコンフィグレーション可能です:\n\n</p>\n<ul>\n<li><p><code>tls.CLIENT_RENEG_LIMIT</code>: 再ネゴシエーションの上限、デフォルトは 3 です。</p>\n</li>\n<li><p><code>tls.CLIENT_RENEG_WINDOW</code>: 再ネゴシエーションのウィンドウサイズ (秒単位)、\nデフォルトは 10 分です。</p>\n</li>\n</ul>\n<p>あなたが何をしたいのか理解していない限り、デフォルトを変更しないでください。\n\n</p>\n<p>サーバをテストするために、<code>openssl s_client -connect address:port</code> で\n接続して <code>R&lt;CR&gt;</code> (これは <code>R</code> の後に復帰改行を続けます)\nを、数回試すことができます。\n\n</p>\n"
        },
        {
          "textRaw": "NPN and SNI",
          "name": "NPN and SNI",
          "type": "misc",
          "desc": "<!--\nNPN (Next Protocol Negotiation) and SNI (Server Name Indication) are TLS\nhandshake extensions allowing you:\n-->\n\n<p>NPN (Next Protocol Negotitation) と SNI (Server Name Indication) は\nTLS の拡張で、以下を可能にします。\n\n</p>\n<!--\n  * NPN - to use one TLS server for multiple protocols (HTTP, SPDY)\n  * SNI - to use one TLS server for multiple hostnames with different SSL\n    certificates.\n-->\n\n<ul>\n<li>NPN - 一つの TLS サーバで複数のプロトコル (HTTP、SPDY) を使用。</li>\n<li>SNI - 一つの TLS サーバでホスト名の異なる複数の証明書を使用。</li>\n</ul>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "tls.createServer(options, [secureConnectionListener])",
          "type": "method",
          "name": "createServer",
          "desc": "<!--\nCreates a new [tls.Server](#tls.Server).\nThe `connectionListener` argument is automatically set as a listener for the\n[secureConnection](#event_secureConnection_) event.\nThe `options` object has these possibilities:\n-->\n\n<p>新しい <a href=\"#tls.Server\">tls.Server</a> を作成します。\n<code>connectionListener</code> は <a href=\"#event_secureConnection_\">secureConnection</a>\nイベントのリスナとして自動的に登録されます。\n<code>options</code> は以下を持つことができます:\n\n\n</p>\n<!--\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format. (Mutually exclusive with\n    the `key`, `cert` and `ca` options.)\n\n  - `key`: A string or `Buffer` containing the private key of the server in\n    PEM format. (Required)\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the server in\n    PEM format. (Required)\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates. If this is\n    omitted several well known \"root\" CAs will be used, like VeriSign.\n    These are used to authorize connections.\n\n  - `ciphers`: A string describing the ciphers to use or exclude. Consult\n    <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT> for\n    details on the format.\n\n  - `requestCert`: If `true` the server will request a certificate from\n    clients that connect and attempt to verify that certificate. Default:\n    `false`.\n\n  - `rejectUnauthorized`: If `true` the server will reject any connection\n    which is not authorized with the list of supplied CAs. This option only\n    has an effect if `requestCert` is `true`. Default: `false`.\n\n  - `NPNProtocols`: An array or `Buffer` of possible NPN protocols. (Protocols\n    should be ordered by their priority).\n\n  - `SNICallback`: A function that will be called if client supports SNI TLS\n    extension. Only one argument will be passed to it: `servername`. And\n    `SNICallback` should return SecureContext instance.\n    (You can use `crypto.createCredentials(...).context` to get proper\n    SecureContext). If `SNICallback` wasn't provided - default callback with\n    high-level API will be used (see below).\n\n  - `sessionIdContext`: A string containing a opaque identifier for session\n    resumption. If `requestCert` is `true`, the default is MD5 hash value\n    generated from command-line. Otherwise, the default is not provided.\n-->\n\n<ul>\n<li><p><code>pfx</code>: サーバの秘密鍵、証明書、および認証局を含む、PFX または PKCS12\nフォーマットの文字列または <code>Buffer</code> です。\n(<code>key</code>、<code>cert</code> および <code>ca</code> オプションとは相互排他です)。</p>\n</li>\n<li><p><code>key</code>: PEM フォーマットによるサーバの秘密鍵を表す文字列または <code>Buffer</code> です\n(必須)。</p>\n</li>\n<li><p><code>passphrase</code>: 秘密鍵のパスフレーズを表す文字列です。</p>\n</li>\n<li><p><code>cert</code>: PEM フォーマットによる証明書の鍵を表す文字列または <code>Buffer</code> です\n(必須)。</p>\n</li>\n<li><p><code>ca</code>: 信頼できる証明書の文字列または <code>Buffer</code> の配列です。\n省略された場合、ベリサインなどのよく知られた「ルート」認証局が使われます。\nこれらはコネクションの認証に使われます。</p>\n</li>\n<li><p><code>ciphers</code>: 使用または除外する暗号を記述した文字列。\n詳細は <a href=\"http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT\">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT</a>\nを参照してください。</p>\n</li>\n<li><p><code>requestCert</code>: <code>true</code> の場合、サーバは接続しようとするクライアントからの\n証明書を要求します。デフォルトは <code>false</code> です。</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: <code>true</code> の場合、サーバは提供された認証局の\nリストによって認証されていないコネクションを破棄します．\nこのオプションは <code>requestCert</code> が <code>true</code> の場合だけ効果があります。\nデフォルトは <code>false</code> です。</p>\n</li>\n<li><p><code>NPNProtocols</code>: NPN プロトコルで使用可能な文字列または <code>Buffer</code> の配列\n(プロトコルはその優先度に応じて並んでいる必要があります)。</p>\n</li>\n<li><p><code>SNICallback</code>: クライアントが TLS 拡張の SNI をサポートしている場合に\n呼び出される関数です。\n<code>servername</code> が唯一の引数として渡されます。\n<code>SNICallback</code> は SecureContext のインスタンスを返す必要があります\n(SecureContext を取得するために <code>crypto.createCredentials(...).context</code>\nを使用することができます)。\n<code>SNICallback</code> が渡されなかった場合は、デフォルトのコールバックとして\n後述する高水準 API が使用されます。</p>\n</li>\n<li><p><code>sessionIdContext</code>: セッション再開のための識別子となる文字列です。\n<code>requestCedrt</code> が <code>true</code> の場合、デフォルトはコマンドライン引数から\n生成された MD5 ハッシュ値となります。\nそうでない場合はデフォルトは提供されません。</p>\n</li>\n</ul>\n<!--\nHere is a simple example echo server:\n\n\n    var tls = require('tls');\n    var fs = require('fs');\n\n    var options = {\n      key: fs.readFileSync('server-key.pem'),\n      cert: fs.readFileSync('server-cert.pem'),\n\n      // This is necessary only if using the client certificate authentication.\n      requestCert: true,\n\n      // This is necessary only if the client uses the self-signed certificate.\n      ca: [ fs.readFileSync('client-cert.pem') ]\n    };\n\n    var server = tls.createServer(options, function(cleartextStream) {\n      console.log('server connected',\n                  cleartextStream.authorized ? 'authorized' : 'unauthorized');\n      cleartextStream.write(\"welcome!\\n\");\n      cleartextStream.setEncoding('utf8');\n      cleartextStream.pipe(cleartextStream);\n    });\n    server.listen(8000, function() {\n      console.log('server bound');\n    });\n-->\n\n<p>これはシンプルはエコーサーバの例です:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;),\n\nvar tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  key: fs.readFileSync(&apos;server-key.pem&apos;),\n  cert: fs.readFileSync(&apos;server-cert.pem&apos;),\n\n  // これはクライアント証明書を用いた認証を行う場合だけ必要です\n  requestCert: true,\n\n  // これは自己署名のクライアント証明書を認証する場合だけ必要です\n  ca: [ fs.readFileSync(&apos;client-cert.pem&apos;) ]\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&apos;server connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&apos;utf8&apos;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nOr\n-->\n\n<p>または\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;),\n\n  // これはクライアント証明書を用いた認証を行う場合だけ必要です\n  requestCert: true,\n\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&apos;server connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&apos;utf8&apos;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nYou can test this server by connecting to it with `openssl s_client`:\n-->\n\n<p><code>openssl s_client</code> を使用してこのサーバに接続するテストを行うことができます。\n\n\n</p>\n<pre><code>openssl s_client -connect 127.0.0.1:8000</code></pre>\n",
          "var tls": "require('tls');\n    var fs = require('fs');\n\n    var options = {\n      pfx: fs.readFileSync('server.pfx'),\n\n      // This is necessary only if using the client certificate authentication.\n      requestCert: true,\n\n    };\n\n    var server = tls.createServer(options, function(cleartextStream) {\n      console.log('server connected',\n                  cleartextStream.authorized ? 'authorized' : 'unauthorized');\n      cleartextStream.write(\"welcome!\\n\");\n      cleartextStream.setEncoding('utf8');\n      cleartextStream.pipe(cleartextStream);\n    });\n    server.listen(8000, function() {\n      console.log('server bound');\n    });",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "secureConnectionListener",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "tls.connect(port, [host], [options], [secureConnectListener])",
          "type": "method",
          "name": "connect",
          "desc": "<!--\nCreates a new client connection to the given `port` and `host`. (If `host`\ndefaults to `localhost`.) `options` should be an object which specifies\n-->\n\n<p>与えられた <code>port</code> と <code>host</code> で新しいクライアントコネクションを作成します\n(<code>host</code> のデフォルトは <code>localhost</code> です)。\n<code>options</code> は以下を指定したオブジェクトです。\n\n</p>\n<!--\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format.\n\n  - `key`: A string or `Buffer` containing the private key of the client in\n    PEM format.\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the client in\n    PEM format.\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates. If this is\n    omitted several well known \"root\" CAs will be used, like VeriSign.\n    These are used to authorize connections.\n\n  - `NPNProtocols`: An array of string or `Buffer` containing supported NPN\n    protocols. `Buffer` should have following format: `0x05hello0x05world`,\n    where first byte is next protocol name's length. (Passing array should\n    usually be much simpler: `['hello', 'world']`.)\n\n  - `servername`: Servername for SNI (Server Name Indication) TLS extension.\n\n  - `socket`: Establish secure connection on a given socket rather than\n    creating a new socket. If this option is specified, `host` and `port`\n    are ignored.  This is intended FOR INTERNAL USE ONLY.  As with all\n    undocumented APIs in Node, they should not be used.\n-->\n\n<ul>\n<li><p><code>pfx</code>: サーバの秘密鍵、証明書、および認証局を含む、PFX または PKCS12\nフォーマットの文字列または <code>Buffer</code> です。</p>\n</li>\n<li><p><code>key</code>: PEM フォーマットによるサーバの秘密鍵を表す文字列または\n<code>Buffer</code> です。</p>\n</li>\n<li><p><code>passphrase</code>: 秘密鍵または pfx のパスフレーズを表す文字列です。</p>\n</li>\n<li><p><code>cert</code>: PEM フォーマットによる証明書の鍵を表す文字列または <code>Buffer</code> です。</p>\n</li>\n<li><p><code>ca</code>: 信頼できる証明書の文字列または <code>Buffer</code> の配列です。\n省略された場合、ベリサインなどのよく知られた「ルート」認証局が使われます。\nこれらはコネクションの認証に使われます。</p>\n</li>\n<li><p><code>NPNProtocols</code>: サポートする NPN プロトコルの文字列または <code>Buffer</code> \nの配列です。\n<code>Buffer</code> は次のような形式です: <code>0x05hello0x5world</code>\n最初のバイトは次のプロトコル名の長さです\n(通常、配列を渡す方がシンプルです: <code>[&apos;hello&apos;, &apos;world&apos;]</code>)。</p>\n</li>\n<li><p><code>servername</code>: TLS 拡張である SNI (Server Name Indication) のサーバ名です。</p>\n</li>\n<li><p><code>socket</code>: 新しいソケットを生成するのではなく、与えられたソケット上で\nセキュアな接続を確立します。\nこのオプションが指定された場合、<code>host</code> および <code>port</code> は無視されます。\nこれは内部的な利用のみを意図しています。他のアンドキュメンテッドな\nAPI と同様、これを使用すべきではありません。</p>\n</li>\n</ul>\n<!--\nThe `secureConnectListener` parameter will be added as a listener for the\n['secureConnect'](#event_secureConnect_) event.\n\n`tls.connect()` returns a [CleartextStream](#tls.CleartextStream) object.\n\nHere is an example of a client of echo server as described previously:\n-->\n\n<p><code>secureConnectLister</code> 引数は <a href=\"#event_secureConnect_\">&apos;secureConnect&apos;</a>\nイベントのリスナとして加えられます。\n\n</p>\n<p><code>tls.connect()</code> は <a href=\"#tls.CleartextStream\">CleartextStream</a>\nオブジェクトを返します。\n\n</p>\n<p>これは前述のエコーサーバに接続するクライアントの例です:\n\n</p>\n<!--\n    var tls = require('tls');\n    var fs = require('fs');\n\n    var options = {\n      // These are necessary only if using the client certificate authentication\n      key: fs.readFileSync('client-key.pem'),\n      cert: fs.readFileSync('client-cert.pem'),\n\n      // This is necessary only if the server uses the self-signed certificate\n      ca: [ fs.readFileSync('server-cert.pem') ]\n    };\n\n    var cleartextStream = tls.connect(8000, options, function() {\n      console.log('client connected',\n                  cleartextStream.authorized ? 'authorized' : 'unauthorized');\n      process.stdin.pipe(cleartextStream);\n      process.stdin.resume();\n    });\n    cleartextStream.setEncoding('utf8');\n    cleartextStream.on('data', function(data) {\n      console.log(data);\n    });\n    cleartextStream.on('end', function() {\n      server.close();\n    });\n-->\n\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  // これらはクライアント証明書による認証を行う場合だけ必要ですn\n  key: fs.readFileSync(&apos;client-key.pem&apos;),\n  cert: fs.readFileSync(&apos;client-cert.pem&apos;),\n\n  // これはサーバが自己署名証明書を使う場合だけ必要です\n  ca: [ fs.readFileSync(&apos;server-cert.pem&apos;) ]\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n<!--\nOr\n-->\n\n<p>または\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;client.pfx&apos;)\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "port"
                },
                {
                  "name": "host",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "secureConnectListener",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])",
          "type": "method",
          "name": "createSecurePair",
          "desc": "<!--\nCreates a new secure pair object with two streams, one of which reads/writes\nencrypted data, and one reads/writes cleartext data.\nGenerally the encrypted one is piped to/from an incoming encrypted data stream,\nand the cleartext one is used as a replacement for the initial encrypted stream.\n - `credentials`: A credentials object from crypto.createCredentials( ... )\n\n - `isServer`: A boolean indicating whether this tls connection should be\n   opened as a server or a client.\n\n - `requestCert`: A boolean indicating whether a server should request a\n   certificate from a connecting client. Only applies to server connections.\n\n - `rejectUnauthorized`: A boolean indicating whether a server should\n   automatically reject clients with invalid certificates. Only applies to\n   servers with `requestCert` enabled.\n\n`tls.createSecurePair()` returns a SecurePair object with\n[cleartext](#tls.CleartextStream) and `encrypted` stream properties.\n-->\n\n<p>二つのストリームを持つセキュアペアオブジェクトを作成します。\n一つは暗号化されたデータを読み書きし、もう一つは平文のデータを読み書きします。\n通常、暗号化されたストリームに外部からの暗号化されたデータが連結され、\n暗号化されたストリームの代わりに平文のストリームが使われます。\n\n</p>\n<ul>\n<li><p><code>credentials</code>: <code>crypto.createCredentials( ... )</code> で作成された\n証明書オブジェクト。</p>\n</li>\n<li><p><code>isServer</code>: この TLS コネクションをサーバとしてオープンするかどうかを示す\nブーリアン値。</p>\n</li>\n<li><p><code>requestCert</code>: クライアントからの接続に対して、サーバがクライアントに\n証明書を要求するかどうかを示すブーリアン値。\nサーバコネクションにのみ適用されます。</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: クライアント認証が不正だった場合に、\n自動的にクライアントを破棄するかどうかを示すブーリアン値。\n<code>requestCert</code> が有効なサーバにのみ適用されます。</p>\n</li>\n</ul>\n<p><code>tls.createSequrePair()</code> は、<a href=\"#tls.CleartextStream\">cleartext</a> と <code>encrypted</code>\nをプロパティとして持つ <code>SecurePair</code> オブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "credentials",
                  "optional": true
                },
                {
                  "name": "isServer",
                  "optional": true
                },
                {
                  "name": "requestCert",
                  "optional": true
                },
                {
                  "name": "rejectUnauthorized",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: SecurePair",
          "type": "class",
          "name": "SecurePair",
          "desc": "<p>Returned by tls.createSecurePair.\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'secure'",
              "type": "event",
              "name": "secure",
              "desc": "<!--\nThe event is emitted from the SecurePair once the pair has successfully\nestablished a secure connection.\n\nSimilarly to the checking for the server 'secureConnection' event,\npair.cleartext.authorized should be checked to confirm whether the certificate\nused properly authorized.\n-->\n\n<p>SecurePair オブジェクトのペアが安全な接続を確立した場合に発生します。\n\n</p>\n<p>サーバの <code>&apos;secureConnection&apos;</code> イベントと同様に、\n<code>pari.cleartext.authorized</code> によって接続相手の証明書を承認できたかどうかを\nチェックすることができます。\n\n</p>\n",
              "params": []
            }
          ]
        },
        {
          "textRaw": "Class: tls.Server",
          "type": "class",
          "name": "tls.Server",
          "desc": "<!--\nThis class is a subclass of `net.Server` and has the same methods on it.\nInstead of accepting just raw TCP connections, this accepts encrypted\nconnections using TLS or SSL.\n-->\n\n<p>このクラスは <code>net.Server</code> のサブクラスで、同じメソッドを持っています。\n生の TCP コネクションを受け入れる代わりに、\nTLS または SSL を使った暗号化されたコネクションを受け付けます。\n\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'secureConnection'",
              "type": "event",
              "name": "secureConnection",
              "desc": "<p><code>function (cleartextStream) {}</code>\n\n</p>\n<!--\nThis event is emitted after a new connection has been successfully\nhandshaked. The argument is a instance of\n[CleartextStream](#tls.CleartextStream). It has all the common stream methods\nand events.\n-->\n\n<p>このイベントは、新しい接続のハンドシェークが成功した場合に生成されます。\n引数は <a href=\"#tls.CleartextStream\">CleartextStream</a> のインスタンスです。\nこれはストリームに共通する全てのメソッドとイベントを持っています。\n\n</p>\n<!--\n`cleartextStream.authorized` is a boolean value which indicates if the\nclient has verified by one of the supplied certificate authorities for the\nserver. If `cleartextStream.authorized` is false, then\n`cleartextStream.authorizationError` is set to describe how authorization\nfailed. Implied but worth mentioning: depending on the settings of the TLS\nserver, you unauthorized connections may be accepted.\n`cleartextStream.npnProtocol` is a string containing selected NPN protocol.\n`cleartextStream.servername` is a string containing servername requested with\nSNI.\n-->\n\n<p><code>cleartextStream.authorized</code> は提供された認証局のいずれかによって認証されたかを示す boolean 値です。\n<code>cleartextStream.authorized</code> が false の場合、\n<code>cleartextStream.authorizationError</code> にはどのように認証が失敗したのかが設定されます。\n暗黙的ですが言及する価値のあること:\nTLS サーバの設定に依存しますが、認証されていないコネクションも受け入れられることがあります。\n<code>cleartextStream.npnProtocol</code> は、選択された NPN プロトコルを持つ文字列です。\n<code>cleartextStream.servername</code> は、SNI でリクエストされたサーバ名を持つ\n文字列です。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'clientError'",
              "type": "event",
              "name": "clientError",
              "desc": "<p><code>function (exception) { }</code>\n\n</p>\n<!--\nWhen a client connection emits an 'error' event before secure connection is\nestablished - it will be forwarded here.\n-->\n\n<p>セキュアコネクションが確立される前にクライアントコネクションが\n<code>&apos;error&apos;</code> イベントを発した場合 － ここに転送されます。\n\n\n</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "server.listen(port, [host], [callback])",
              "type": "method",
              "name": "listen",
              "desc": "<!--\nBegin accepting connections on the specified `port` and `host`.  If the\n`host` is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`).\n-->\n\n<p>指定の <code>port</code> と <code>host</code> で接続の受け入れを開始します。\n<code>host</code> が省略されると、サーバはどんな IPv4 アドレスからのコネクションも受け入れます (<code>INADDR_ANY</code>)。\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be called\nwhen the server has been bound.\n-->\n\n<p>この関数は非同期です。\n最後の引数 <code>callback</code> はサーバがバインドされると呼び出されます。\n\n</p>\n<!--\nSee `net.Server` for more information.\n-->\n\n<p>より詳細は <code>net.Server</code> を参照してください。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "host",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.close()",
              "type": "method",
              "name": "close",
              "desc": "<!--\nStops the server from accepting new connections. This function is\nasynchronous, the server is finally closed when the server emits a `'close'`\nevent.\n-->\n\n<p>サーバが新しい接続を受け入れることを終了します。\nこの関数は非同期で、サーバが最終的にクローズされるとサーバは <code>&apos;close&apos;</code> イベントを生成します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "server.address()",
              "type": "method",
              "name": "address",
              "desc": "<!--\nReturns the bound address and port of the server as reported by the operating\nsystem.\nSee [net.Server.address()](net.html#server.address) for more information.\n-->\n\n<p>オペレーティングシステムから報告された、\nサーバにバインドされたアドレスとポートを返します。 \nより詳しくは <a href=\"net.html#server.address\">net.Server.address()</a>\nを参照してください。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "server.addContext(hostname, credentials)",
              "type": "method",
              "name": "addContext",
              "desc": "<!--\nAdd secure context that will be used if client request's SNI hostname is\nmatching passed `hostname` (wildcards can be used). `credentials` can contain\n`key`, `cert` and `ca`.\n-->\n\n<p>クライアントが要求してきた SNI ホスト名と <code>hostname</code> (ワイルドカードを使用可能)\nがマッチした場合のセキュリティコンテキストを追加します。\n<code>credentials</code> は <code>key</code>、<code>cert</code>、そして <code>ca</code> を含むことができます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "hostname"
                    },
                    {
                      "name": "credentials"
                    }
                  ]
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "server.maxConnections",
              "name": "maxConnections",
              "desc": "<!--\nSet this property to reject connections when the server's connection count\ngets high.\n-->\n\n<p>このプロパティを設定すると、サーバの接続数がこれを越えた場合に接続を破棄します。\n\n</p>\n"
            },
            {
              "textRaw": "server.connections",
              "name": "connections",
              "desc": "<!--\nThe number of concurrent connections on the server.\n-->\n\n<p>サーバの並行コネクションの数です。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: tls.CleartextStream",
          "type": "class",
          "name": "tls.CleartextStream",
          "desc": "<!--\nThis is a stream on top of the *Encrypted* stream that makes it possible to\nread/write an encrypted data as a cleartext data.\n\nThis instance implements a duplex [Stream](stream.html) interfaces.\nIt has all the common stream methods and events.\n\nA ClearTextStream is the `clear` member of a SecurePair object.\n-->\n\n<p>暗号化されたストリーム上で、暗号化されたデータを平文のデータとして\n読み書きすることができるストリームです。\n\n</p>\n<p>このインスタンスは双方向の <a href=\"stream.html#streams\">Stream</a> インタフェースを\n実装します。\nストリームに共通な全てのメソッドとイベントを持ちます。\n\n</p>\n<p>ClearText ストリームは SecurePair オブジェクトの <code>clear</code> メンバです。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'secureConnect'",
              "type": "event",
              "name": "secureConnect",
              "desc": "<!--\nThis event is emitted after a new connection has been successfully handshaked. \nThe listener will be called no matter if the server's certificate was\nauthorized or not. It is up to the user to test `cleartextStream.authorized`\nto see if the server certificate was signed by one of the specified CAs.\nIf `cleartextStream.authorized === false` then the error can be found in\n`cleartextStream.authorizationError`. Also if NPN was used - you can check\n`cleartextStream.npnProtocol` for negotiated protocol.\n-->\n\n<p>新しいコネクションの TLS/SSL ハンドシェークが成功すると生成されます。\nリスナはサーバの証明書が認証されたかどうかに関わらず呼び出されます。\nサーバ証明書が指定した認証局に承認されたかチェックするために\n<code>cleartextStream.authorized</code> を確認するかはユーザ次第です。\n<code>cleartextStream.authorized === false</code>の場合、\n<code>cleartextStream.authorizationError</code> からエラーを見つけることができます。\n同様に NPN が使われている場合は <code>cleartextStream.npnProtocol</code>\nから合意されたプロトコルをチェックすることが出来ます。\n\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "cleartextStream.authorized",
              "name": "authorized",
              "desc": "<!--\nA boolean that is `true` if the peer certificate was signed by one of the\nspecified CAs, otherwise `false`\n-->\n\n<p>接続相手の証明書が CA の一つによって署名されていれば <code>true</code>、\nそうでなければ <code>false</code> です。\n\n</p>\n"
            },
            {
              "textRaw": "cleartextStream.authorizationError",
              "name": "authorizationError",
              "The reason why the peer's certificate has not been verified. This property\nbecomes available only when `cleartextStream.authorized": "== false`.",
              "desc": "<p>接続相手の証明書が認証されなかった理由です。\nこのプロパティは <code>cleartextStream.authorized === false</code>\nの場合だけ利用可能になります。\n\n</p>\n"
            },
            {
              "textRaw": "cleartextStream.remoteAddress",
              "name": "remoteAddress",
              "desc": "<!--\nThe string representation of the remote IP address. For example,\n`'74.125.127.100'` or `'2001:4860:a005::68'`.\n-->\n\n<p>リモートの IP アドレスを表現する文字列です。\n例えば、<code>&apos;74.125.127.100&apos;</code> あるいは <code>&apos;2001:4860:a005::68&apos;</code>。\n\n</p>\n"
            },
            {
              "textRaw": "cleartextStream.remotePort",
              "name": "remotePort",
              "desc": "<!--\nThe numeric representation of the remote port. For example, `443`.\n-->\n\n<p>リモートポートの数値表現です。\n例えば、<code>443</code>。\n\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "cleartextStream.getPeerCertificate()",
              "type": "method",
              "name": "getPeerCertificate",
              "desc": "<!--\nReturns an object representing the peer's certificate. The returned object has\nsome properties corresponding to the field of the certificate.\n-->\n\n<p>接続相手の証明書を表現するオブジェクトを返します。\n返されるオブジェクトは証明書のフィールドに対応するプロパティを持ちます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>{ subject: \n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  issuer: \n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  valid_from: &apos;Nov 11 09:52:22 2009 GMT&apos;,\n  valid_to: &apos;Nov  6 09:52:22 2029 GMT&apos;,\n  fingerprint: &apos;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&apos; }</code></pre>\n<!--\nIf the peer does not provide a certificate, it returns `null` or an empty\nobject.\n-->\n\n<p>接続相手が証明書を提供しなかった場合は、\n<code>null</code> または空のオブジェクトを返します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "cleartextStream.address()",
              "type": "method",
              "name": "address",
              "desc": "<!--\nReturns the bound address and port of the underlying socket as reported by the\noperating system. Returns an object with two properties, e.g.\n`{\"address\":\"192.168.57.1\", \"port\":62053}`\n-->\n\n<p>オペレーティングシステムから報告された、\nソケットにバインドされたアドレスとポートを返します。\n返されるオブジェクトは二つのプロパティを持ちます。\n例えば、<code>{&quot;address&quot;:&quot;192.168.57.1&quot;, &quot;port&quot;:62053}</code>\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "TLS (SSL)"
    },
    {
      "textRaw": "File System",
      "name": "fs",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nFile I/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do `require('fs')`. All the methods have asynchronous and\nsynchronous forms.\n-->\n\n<p>File I/O は POSIX 標準の関数に対する単純なラッパーとして提供されます。\nこのモジュールを使用するには <code>require(&apos;fs&apos;)</code> してください。\n全てのメソッドは非同期と同期の形式があります。\n\n</p>\n<!--\nThe asynchronous form always take a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be `null` or `undefined`.\n\nWhen using the synchronous form any exceptions are immediately thrown.\nYou can use try/catch to handle exceptions or allow them to bubble up.\n-->\n\n<p>非同期の形式は常に最後の引数として完了コールバックを受け取ります。\n引数として渡される完了コールバックはメソッドに依存しますが、\n最初の引数は常に例外のために予約されています。\n操作が成功で完了すると最初の引数は <code>null</code> または <code>undefined</code> となります\n\n</p>\n<p>同期の形式では、全ての例外はすぐにスローされます。\n例外は try/catch で捕まえることも、そのまま通過させることもできます。\n\n</p>\n<!--\nHere is an example of the asynchronous version:\n-->\n\n<p>非同期バージョンの例です:\n\n</p>\n<pre><code>var fs = require(&apos;fs&apos;);\n\nfs.unlink(&apos;/tmp/hello&apos;, function (err) {\n  if (err) throw err;\n  console.log(&apos;successfully deleted /tmp/hello&apos;);\n});</code></pre>\n<!--\nHere is the synchronous version:\n-->\n\n<p>同期バージョンです:\n\n</p>\n<pre><code>var fs = require(&apos;fs&apos;);\n\nfs.unlinkSync(&apos;/tmp/hello&apos;)\nconsole.log(&apos;successfully deleted /tmp/hello&apos;);</code></pre>\n<!--\nWith the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:\n-->\n\n<p>非同期メソッドでは順序の保証はありません。\n以下のような傾向のエラーがあります。\n\n</p>\n<pre><code>fs.rename(&apos;/tmp/hello&apos;, &apos;/tmp/world&apos;, function (err) {\n  if (err) throw err;\n  console.log(&apos;renamed complete&apos;);\n});\nfs.stat(&apos;/tmp/world&apos;, function (err, stats) {\n  if (err) throw err;\n  console.log(&apos;stats: &apos; + JSON.stringify(stats));\n});</code></pre>\n<!--\nIt could be that `fs.stat` is executed before `fs.rename`.\nThe correct way to do this is to chain the callbacks.\n-->\n\n<p><code>fs.stat</code> は <code>fs.rename</code> より先に実行される可能性がありrます。\n正しい方法はコールバックをチェーンすることです。\n\n</p>\n<pre><code>fs.rename(&apos;/tmp/hello&apos;, &apos;/tmp/world&apos;, function (err) {\n  if (err) throw err;\n  fs.stat(&apos;/tmp/world&apos;, function (err, stats) {\n    if (err) throw err;\n    console.log(&apos;stats: &apos; + JSON.stringify(stats));\n  });\n});</code></pre>\n<!--\nIn busy processes, the programmer is _strongly encouraged_ to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete--halting all connections.\n\nRelative path to filename can be used, remember however that this path will be relative\nto `process.cwd()`.\n-->\n\n<p>忙しいプロセスでは、プログラマはこれらの非同期バージョンを使うことが<em>強く推奨</em>されます。\n同期バージョンはそれが完了するまでプロセス全体をブロックします － 全ての接続を停止します。\n\n</p>\n<p>ファイル名には相対パスを使うことが出来ます。しかし、このパスは\n<code>process.cwd()</code> からの相対パスであることを思い出してください。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "fs.rename(path1, path2, [callback])",
          "type": "method",
          "name": "rename",
          "desc": "<!--\nAsynchronous rename(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の rename(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path1"
                },
                {
                  "name": "path2"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.renameSync(path1, path2)",
          "type": "method",
          "name": "renameSync",
          "desc": "<!--\nSynchronous rename(2).\n-->\n\n<p>同期の rename(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path1"
                },
                {
                  "name": "path2"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.truncate(fd, len, [callback])",
          "type": "method",
          "name": "truncate",
          "desc": "<!--\nAsynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.\n-->\n\n<p>非同期の ftruncate(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "len"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.truncateSync(fd, len)",
          "type": "method",
          "name": "truncateSync",
          "desc": "<!--\nSynchronous ftruncate(2).\n-->\n\n<p>同期の ftruncate(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "len"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.chown(path, uid, gid, [callback])",
          "type": "method",
          "name": "chown",
          "desc": "<!--\nAsynchronous chown(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の chown(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.chownSync(path, uid, gid)",
          "type": "method",
          "name": "chownSync",
          "desc": "<!--\nSynchronous chown(2).\n-->\n\n<p>同期の chown(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fchown(fd, uid, gid, [callback])",
          "type": "method",
          "name": "fchown",
          "desc": "<!--\nAsynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の fchown(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fchownSync(fd, uid, gid)",
          "type": "method",
          "name": "fchownSync",
          "desc": "<!--\nSynchronous fchown(2).\n-->\n\n<p>同期の fchown(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.lchown(path, uid, gid, [callback])",
          "type": "method",
          "name": "lchown",
          "desc": "<!--\nAsynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の lchown(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.lchownSync(path, uid, gid)",
          "type": "method",
          "name": "lchownSync",
          "desc": "<!--\nSynchronous lchown(2).\n-->\n\n<p>同期の lchown(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.chmod(path, mode, [callback])",
          "type": "method",
          "name": "chmod",
          "desc": "<!--\nAsynchronous chmod(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の chmod(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.chmodSync(path, mode)",
          "type": "method",
          "name": "chmodSync",
          "desc": "<!--\nSynchronous chmod(2).\n-->\n\n<p>同期の chmod(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fchmod(fd, mode, [callback])",
          "type": "method",
          "name": "fchmod",
          "desc": "<!--\nAsynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.\n-->\n\n<p>非同期の fchmod(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "mode"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fchmodSync(fd, mode)",
          "type": "method",
          "name": "fchmodSync",
          "desc": "<!--\nSynchronous fchmod(2).\n-->\n\n<p>同期の fchmod(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "mode"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.lchmod(path, mode, [callback])",
          "type": "method",
          "name": "lchmod",
          "desc": "<!--\nAsynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.\n-->\n\n<p>非同期の lchmod(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.lchmodSync(path, mode)",
          "type": "method",
          "name": "lchmodSync",
          "desc": "<!--\nSynchronous lchmod(2).\n-->\n\n<p>同期の lchmod(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.stat(path, [callback])",
          "type": "method",
          "name": "stat",
          "desc": "<!--\nAsynchronous stat(2). The callback gets two arguments `(err, stats)` where\n`stats` is a [fs.Stats](#fs_class_fs_stats) object.  See the [fs.Stats](#fs_class_fs_stats)\nsection below for more information.\n-->\n\n<p>非同期の stat(2)。コールバックは 2 つの引数を受け取る <code>(err, stats)</code>で、\n<code>stats</code> は <a href=\"#fs.Stats\">fs.Stats</a> オブジェクトです。\n詳細は <a href=\"#fs.Stats\">fs.Stats</a> の節を参照してください。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.lstat(path, [callback])",
          "type": "method",
          "name": "lstat",
          "desc": "<!--\nAsynchronous lstat(2). The callback gets two arguments `(err, stats)` where\n`stats` is a `fs.Stats` object. `lstat()` is identical to `stat()`, except that if\n`path` is a symbolic link, then the link itself is stat-ed, not the file that it\nrefers to.\n-->\n\n<p>非同期の lstat(2)。コールバックは 2 つの引数を受け取る <code>(err, stats)</code>で、\n<code>stats</code> は <code>fs.Stats</code> オブジェクトです。\n<code>lstat()</code> はパスがシンボリックリンクだった場合に、\n参照先のファイルではなくそのリンク自身が調べられる点を除いて <code>stat()</code> と同じす。\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fstat(fd, [callback])",
          "type": "method",
          "name": "fstat",
          "desc": "<!--\nAsynchronous fstat(2). The callback gets two arguments `(err, stats)` where\n`stats` is a `fs.Stats` object. `fstat()` is identical to `stat()`, except that\nthe file to be stat-ed is specified by the file descriptor `fd`.\n-->\n\n<p>非同期の fstat(2)。コールバックは 2 つの引数を受け取る <code>(err, stats)</code> で、\n<code>stats</code> は <code>fs.Stats</code> オブジェクトです。\n状態を取得するファイルをファイル記述子 <code>fd</code> で指定することを除いて、\n<code>fstat()</code> は <code>stat()</code> と同じです。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.statSync(path)",
          "type": "method",
          "name": "statSync",
          "desc": "<!--\nSynchronous stat(2). Returns an instance of `fs.Stats`.\n-->\n\n<p>同期の stat(2)。<code>fs.Stats</code> のインスタンスを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.lstatSync(path)",
          "type": "method",
          "name": "lstatSync",
          "desc": "<!--\nSynchronous lstat(2). Returns an instance of `fs.Stats`.\n-->\n\n<p>同期の lstat(2)。<code>fs.Stats</code> のインスタンスを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fstatSync(fd)",
          "type": "method",
          "name": "fstatSync",
          "desc": "<!--\nSynchronous fstat(2). Returns an instance of `fs.Stats`.\n-->\n\n<p>同期の fstat(2)。<code>fs.Stats</code> のインスタンスを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.link(srcpath, dstpath, [callback])",
          "type": "method",
          "name": "link",
          "desc": "<!--\nAsynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.\n-->\n\n<p>非同期の link(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "srcpath"
                },
                {
                  "name": "dstpath"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.linkSync(srcpath, dstpath)",
          "type": "method",
          "name": "linkSync",
          "desc": "<!--\nSynchronous link(2).\n-->\n\n<p>同期の link(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "srcpath"
                },
                {
                  "name": "dstpath"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.symlink(linkdata, path, [type], [callback])",
          "type": "method",
          "name": "symlink",
          "desc": "<!--\nAsynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback.\n`type` argument can be either `'dir'` or `'file'` (default is `'file'`).  It is only \nused on Windows (ignored on other platforms).\n-->\n\n<p>非同期の symlink(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n<code>type</code> 引数は <code>&apos;dir&apos;</code> または <code>&apos;file&apos;</code> (デフォルトは <code>&apos;file&apos;</code>) です。\nこれは Windows でのみ使われます (他のプラットフォームでは無視されます)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "linkdata"
                },
                {
                  "name": "path"
                },
                {
                  "name": "type",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.symlinkSync(linkdata, path, [type])",
          "type": "method",
          "name": "symlinkSync",
          "desc": "<!--\nSynchronous symlink(2).\n-->\n\n<p>同期の symlink(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "linkdata"
                },
                {
                  "name": "path"
                },
                {
                  "name": "type",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readlink(path, [callback])",
          "type": "method",
          "name": "readlink",
          "desc": "<!--\nAsynchronous readlink(2). The callback gets two arguments `(err,\nlinkString)`.\n-->\n\n<p>非同期の readlink(2)。コールバックは 2 つの引数を受け取る <code>(err, linkString)</code>です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readlinkSync(path)",
          "type": "method",
          "name": "readlinkSync",
          "desc": "<!--\nSynchronous readlink(2). Returns the symbolic link's string value.\n-->\n\n<p>同期の readlink(2)。シンボリックリンクの持つ文字列値を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.realpath(path, [callback])",
          "type": "method",
          "name": "realpath",
          "desc": "<!--\nAsynchronous realpath(2).  The callback gets two arguments `(err,\nresolvedPath)`.  May use `process.cwd` to resolve relative paths.\n-->\n\n<p>非同期の realpath(2)。コールバックは 2 つの引数を受け取る <code>(err, resolvedPath)</code>です。\n相対パスを解決するために <code>process.cwd</code> を使用することができます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.realpathSync(path)",
          "type": "method",
          "name": "realpathSync",
          "desc": "<!--\nSynchronous realpath(2). Returns the resolved path.\n-->\n\n<p>同期の realpath(2)。解決されたパスを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.unlink(path, [callback])",
          "type": "method",
          "name": "unlink",
          "desc": "<!--\nAsynchronous unlink(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の unlink(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.unlinkSync(path)",
          "type": "method",
          "name": "unlinkSync",
          "desc": "<!--\nSynchronous unlink(2).\n-->\n\n<p>同期の unlink(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.rmdir(path, [callback])",
          "type": "method",
          "name": "rmdir",
          "desc": "<!--\nAsynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の rmdir(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.rmdirSync(path)",
          "type": "method",
          "name": "rmdirSync",
          "desc": "<!--\nSynchronous rmdir(2).\n-->\n\n<p>同期の rmdir(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.mkdir(path, [mode], [callback])",
          "type": "method",
          "name": "mkdir",
          "desc": "<!--\nAsynchronous mkdir(2). No arguments other than a possible exception are given\nto the completion callback. `mode` defaults to `0777`.\n-->\n\n<p>非同期の mkdir(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n<code>mode</code> のデフォルトは <code>0777</code> です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.mkdirSync(path, [mode])",
          "type": "method",
          "name": "mkdirSync",
          "desc": "<!--\nSynchronous mkdir(2).\n-->\n\n<p>同期の mkdir(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readdir(path, [callback])",
          "type": "method",
          "name": "readdir",
          "desc": "<!--\nAsynchronous readdir(3).  Reads the contents of a directory.\nThe callback gets two arguments `(err, files)` where `files` is an array of\nthe names of the files in the directory excluding `'.'` and `'..'`.\n-->\n\n<p>非同期の readdir(3)。ディレクトリの内容を読み込みます。\nコールバックは 2 つの引数を受け取る <code>(err, files)</code>で、\n<code>files</code> は <code>&apos;.&apos;</code> と <code>&apos;..&apos;</code> を除くディレクトリ内のファイル名の配列です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readdirSync(path)",
          "type": "method",
          "name": "readdirSync",
          "desc": "<!--\nSynchronous readdir(3). Returns an array of filenames excluding `'.'` and\n`'..'`.\n-->\n\n<p>同期の readdir(3)。<code>&apos;.&apos;</code> と <code>&apos;..&apos;</code> を除くディレクトリ内のファイル名の配列を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.close(fd, [callback])",
          "type": "method",
          "name": "close",
          "desc": "<!--\nAsynchronous close(2).  No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の close(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.closeSync(fd)",
          "type": "method",
          "name": "closeSync",
          "desc": "<!--\nSynchronous close(2).\n-->\n\n<p>同期の close(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.open(path, flags, [mode], [callback])",
          "type": "method",
          "name": "open",
          "desc": "<!--\nAsynchronous file open. See open(2). `flags` can be:\n\n* `'r'` - Open file for reading.\nAn exception occurs if the file does not exist.\n\n* `'r+'` - Open file for reading and writing.\nAn exception occurs if the file does not exist.\n\n* `'w'` - Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n\n* `'w+'` - Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n\n* `'a'` - Open file for appending.\nThe file is created if it does not exist.\n\n* `'a+'` - Open file for reading and appending.\nThe file is created if it does not exist.\n\n`mode` defaults to `0666`. The callback gets two arguments `(err, fd)`.\n-->\n\n<p>非同期のファイルオープン。open(2) を参照してください。\nフラグは以下になります:\n\n</p>\n<ul>\n<li><p><code>&apos;r&apos;</code> - 読み込み専用でオープンします。\nファイルが存在しない場合は例外が発生します。</p>\n</li>\n<li><p><code>&apos;r+&apos;</code> - 読み書き両用でオープンします。\nファイルが存在しない場合は例外が発生します。</p>\n</li>\n<li><p><code>&apos;w&apos;</code> - 書き込み専用でオープンします。\nファイルは作成される (存在しない場合) または長さ 0 に切り詰められます\n(存在する場合)。</p>\n</li>\n<li><p><code>&apos;r+&apos;</code> - 読み書き両用でオープンします。\nファイルは作成される (存在しない場合) または長さ 0 に切り詰められます\n(存在する場合)。</p>\n</li>\n<li><p><code>&apos;a&apos;</code> - 追記用でオープンします。\nファイルが存在しない場合は作成されます。</p>\n</li>\n<li><p><code>&apos;a+&apos;</code> - 読み込みおよび追記用でオープンします。\nファイルが存在しない場合は作成されます。</p>\n</li>\n</ul>\n<p><code>mode</code> のデフォルトは 0666 です。\nコールバックは 2 つの引数を受け取る <code>(err, fd)</code>です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "flags"
                },
                {
                  "name": "mode",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.openSync(path, flags, [mode])",
          "type": "method",
          "name": "openSync",
          "desc": "<!--\nSynchronous open(2).\n-->\n\n<p>同期の open(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "flags"
                },
                {
                  "name": "mode",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.utimes(path, atime, mtime, [callback])",
          "type": "method",
          "name": "utimes",
          "desc": "<!--\nChange file timestamps of the file referenced by the supplied path.\n-->\n\n<p>渡されたパスが参照するファイルのタイムスタンプを変更します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.utimesSync(path, atime, mtime)",
          "type": "method",
          "name": "utimesSync",
          "desc": "<!--\nChange file timestamps of the file referenced by the supplied path.\n-->\n\n<p>渡されたパスが参照するファイルのタイムスタンプを変更します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.futimes(fd, atime, mtime, [callback])",
          "type": "method",
          "name": "futimes",
          "desc": "<!--\nChange the file timestamps of a file referenced by the supplied file\ndescriptor.\n-->\n\n<p>渡されたファイル記述子が参照するファイルのタイムスタンプを変更します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.futimesSync(fd, atime, mtime)",
          "type": "method",
          "name": "futimesSync",
          "desc": "<!--\nChange the file timestamps of a file referenced by the supplied file\ndescriptor.\n-->\n\n<p>渡されたファイル記述子が参照するファイルのタイムスタンプを変更します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fsync(fd, [callback])",
          "type": "method",
          "name": "fsync",
          "desc": "<!--\nAsynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>非同期の fsync(2)。完了コールバックには発生し得る例外以外に引数が渡されることはありません。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.fsyncSync(fd)",
          "type": "method",
          "name": "fsyncSync",
          "desc": "<!--\nSynchronous fsync(2).\n-->\n\n<p>同期の fsync(2)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.write(fd, buffer, offset, length, position, [callback])",
          "type": "method",
          "name": "write",
          "desc": "<!--\nWrite `buffer` to the file specified by `fd`.\n-->\n\n<p><code>fd</code> で指定されたファイルに <code>buffer</code> を書き込みます。\n\n</p>\n<!--\n`offset` and `length` determine the part of the buffer to be written.\n-->\n<code>offset</code> と <code>length</code> は書き込まれるバッファの部分を決定します。\n\n<!--\n`position` refers to the offset from the beginning of the file where this data\nshould be written. If `position` is `null`, the data will be written at the\ncurrent position.\nSee pwrite(2).\n-->\n\n<p><code>position</code> はデータが書き込まれる位置をファイルの先頭からのオフセットで示します。\n<code>position</code> が <code>null</code> の場合、データは現在の位置から書き込まれます。\npwrite(2) を参照してください。\n\n</p>\n<!--\nThe callback will be given two arguments `(err, written)` where `written`\nspecifies how many _bytes_ were written.\nThe callback will be given three arguments `(err, written, buffer)` where `written`\nspecifies how many _bytes_ were written from `buffer`.\n-->\n\n<p>コールバックは 3 つの引数が与えられる <code>(err, written, buffer)</code> で、\n<code>written</code> は <code>buffer</code> から書き込まれた<em>バイト数</em>を示します。\n\n</p>\n<!--\nNote that it is unsafe to use `fs.write` multiple times on the same file\nwithout waiting for the callback. For this scenario,\n`fs.createWriteStream` is strongly recommended.\n-->\n\n<p>同じファイルに対してコールバックされるのを待つことなく <code>fs.write()</code> を何度も呼び出すことは、安全ではないことに注意してください。\nこのシナリオでは、 <code>fs.createWriteStream()</code> を強く推奨します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset"
                },
                {
                  "name": "length"
                },
                {
                  "name": "position"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.writeSync(fd, buffer, offset, length, position)",
          "type": "method",
          "name": "writeSync",
          "desc": "<!--\nSynchronous version of buffer-based `fs.write()`. Returns the number of bytes\nwritten.\n-->\n\n<p>バッファに基づく同期版の <code>fs.write()</code>。書き込まれたバイト数を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset"
                },
                {
                  "name": "length"
                },
                {
                  "name": "position"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.writeSync(fd, str, position, [encoding])",
          "type": "method",
          "name": "writeSync",
          "desc": "<!--\nSynchronous version of string-based `fs.write()`. `encoding` defaults to\n`'utf8'`. Returns the number of _bytes_ written.\n-->\n\n<p>文字列に基づく同期版の <code>fs.write()</code>。\n<code>encoding</code> のデフォルトは <code>&apos;utf8&apos;</code> です。\n書き込まれたバイト数を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "str"
                },
                {
                  "name": "position"
                },
                {
                  "name": "encoding",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.read(fd, buffer, offset, length, position, [callback])",
          "type": "method",
          "name": "read",
          "desc": "<!--\nRead data from the file specified by `fd`.\n-->\n\n<p><code>fd</code> で指定されたファイルからデータを読み込みます。\n\n</p>\n<!--\n`buffer` is the buffer that the data will be written to.\n-->\n\n<p><code>buffer</code> はデータが書き込まれるバッファです。\n\n</p>\n<!--\n`offset` is offset within the buffer where writing will start.\n-->\n\n<p><code>offset</code> は書き込みを開始するバッファ内のオフセットです。\n\n</p>\n<!--\n`length` is an integer specifying the number of bytes to read.\n-->\n\n<p><code>length</code> は読み込むバイト数を指定する整数です。\n\n</p>\n<!--\n`position` is an integer specifying where to begin reading from in the file.\nIf `position` is `null`, data will be read from the current file position.\n-->\n\n<p><code>position</code> はファイルの読み込みを開始する位置を指定する整数です。\n<code>position</code> が <code>null</code> の場合、データは現在の位置から読み込まれます。\n\n</p>\n<!--\nThe callback is given the three arguments, `(err, bytesRead, buffer)`.\n-->\n\n<p>コールバックは3つの引数が与えられる <code>(err, bytesRead, buffer)</code> です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset"
                },
                {
                  "name": "length"
                },
                {
                  "name": "position"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readSync(fd, buffer, offset, length, position)",
          "type": "method",
          "name": "readSync",
          "desc": "<!--\nSynchronous version of buffer-based `fs.read`. Returns the number of\n`bytesRead`.\n-->\n\n<p>バッファに基づく同期版の <code>fs.read</code>。<code>bytesRead</code> の数を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset"
                },
                {
                  "name": "length"
                },
                {
                  "name": "position"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readSync(fd, length, position, encoding)",
          "type": "method",
          "name": "readSync",
          "desc": "<!--\nSynchronous version of string-based `fs.read`. Returns the number of\n`bytesRead`.\n-->\n\n<p>文字列に基づく同期版の <code>fs.read</code>。<code>bytesRead</code> の数を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "length"
                },
                {
                  "name": "position"
                },
                {
                  "name": "encoding"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readFile(filename, [encoding], [callback])",
          "type": "method",
          "name": "readFile",
          "desc": "<!--\nAsynchronously reads the entire contents of a file. Example:\n-->\n\n<p>ファイル全体の内容を非同期に読み込みます。例:\n\n</p>\n<pre><code>fs.readFile(&apos;/etc/passwd&apos;, function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});</code></pre>\n<!--\nThe callback is passed two arguments `(err, data)`, where `data` is the\ncontents of the file.\n-->\n\n<p>コールバックは 2 つの引数が渡される <code>(err, data)</code> で、<code>data</code> はファイルの内容です。\n\n</p>\n<!--\nIf no encoding is specified, then the raw buffer is returned.\n-->\n\n<p>エンコーディングが指定されなければ、生のバッファが渡されます。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "encoding",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.readFileSync(filename, [encoding])",
          "type": "method",
          "name": "readFileSync",
          "desc": "<!--\nSynchronous version of `fs.readFile`. Returns the contents of the `filename`.\n-->\n\n<p>同期版の <code>fs.readFile</code>。<code>filename</code> の内容を返します。\n\n</p>\n<!--\nIf `encoding` is specified then this function returns a string. Otherwise it\nreturns a buffer.\n-->\n\n<p><code>encoding</code> が指定されるとこの関数は文字列を返します。\nそうでなければバッファを返します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "encoding",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.writeFile(filename, data, [encoding], [callback])",
          "type": "method",
          "name": "writeFile",
          "desc": "<!--\nAsynchronously writes data to a file, replacing the file if it already exists.\n`data` can be a string or a buffer. The `encoding` argument is ignored if\n`data` is a buffer. It defaults to `'utf8'`.\n-->\n\n<p>非同期にデータをファイルに書き込みます。\nファイルが既に存在する場合は置き換えられます。\n<code>data</code> は文字列またはバッファです。\n<code>data</code> がバッファの場合、<code>encoding</code> は無視されます。\nデフォルトは <code>&apos;utf8&apos;</code> です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>fs.writeFile(&apos;message.txt&apos;, &apos;Hello Node&apos;, function (err) {\n  if (err) throw err;\n  console.log(&apos;It\\&apos;s saved!&apos;);\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "data"
                },
                {
                  "name": "encoding",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.writeFileSync(filename, data, [encoding])",
          "type": "method",
          "name": "writeFileSync",
          "desc": "<!--\nThe synchronous version of `fs.writeFile`.\n-->\n\n<p>同期版の <code>fs.writeFile</code>。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "data"
                },
                {
                  "name": "encoding",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.watchFile(filename, [options], listener)",
          "type": "method",
          "name": "watchFile",
          "stability": 2,
          "stabilityText": "Unstable.  Use fs.watch instead, if available.",
          "desc": "<!--\nWatch for changes on `filename`. The callback `listener` will be called each\ntime the file is accessed.\n-->\n\n<p><code>filename</code> の変更を監視します。コールバックの <code>listener</code> はファイルがアクセスされる度に呼び出されます。\n\n</p>\n<!--\nThe second argument is optional. The `options` if provided should be an object\ncontaining two members a boolean, `persistent`, and `interval`. `persistent`\nindicates whether the process should continue to run as long as files are\nbeing watched. `interval` indicates how often the target should be polled,\nin milliseconds. (On Linux systems with inotify, `interval` is ignored.) The\ndefault is `{ persistent: true, interval: 0 }`.\n-->\n\n<p>第 2 引数はオプションです．\n<code>options</code> が与えられる場合、それは boolean の <code>persistent</code> と <code>interval</code>\nの二つのメンバを含むオブジェクトです。\n<code>persistent</code> はファイルが監視されている間、\nプロセスが実行し続けることを示します。\n<code>interval</code> は対象をポーリングする間隔をミリ秒で示します\n(inotify を備えた Linux システムでは <code>interval</code> は無視されます)。\nデフォルトは <code>{ persistent: true, interval: 0}</code> です。\n\n</p>\n<!--\nThe `listener` gets two arguments the current stat object and the previous\nstat object:\n-->\n\n<p><code>listener</code> は現在の状態オブジェクトと前の状態オブジェクトの 2 つの引数を受け取ります:\n\n</p>\n<pre><code>fs.watchFile(&apos;message.text&apos;, function (curr, prev) {\n  console.log(&apos;the current mtime is: &apos; + curr.mtime);\n  console.log(&apos;the previous mtime was: &apos; + prev.mtime);\n});</code></pre>\n<!--\nThese stat objects are instances of `fs.Stat`.\n\nIf you want to be notified when the file was modified, not just accessed\nyou need to compare `curr.mtime` and `prev.mtime`.\n-->\n\n<p>これらの状態オブジェクトは <code>fs.Stat</code> のインスタンスです。\n\n</p>\n<p>もしファイルがアクセスされただけでなく、変更された時の通知が必要であれば、<code>curr.mtime</code> と <code>prev.mtime</code> を比較する必要があります。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "listener"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.unwatchFile(filename)",
          "type": "method",
          "name": "unwatchFile",
          "stability": 2,
          "stabilityText": "Unstable.  Use fs.watch instead, if available.",
          "desc": "<!--\nStop watching for changes on `filename`.\n-->\n\n<p><code>filename</code> の変更に対する監視を終了します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "filename"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.watch(filename, [options], listener)",
          "type": "method",
          "name": "watch",
          "stability": 2,
          "stabilityText": "Unstable.  Not available on all platforms.",
          "desc": "<!--\nWatch for changes on `filename`, where `filename` is either a file or a\ndirectory.  The returned object is a [fs.FSWatcher](#fs_class_fs_fswatcher).\n\nThe second argument is optional. The `options` if provided should be an object\ncontaining a boolean member `persistent`, which indicates whether the process\nshould continue to run as long as files are being watched. The default is\n`{ persistent: true }`.\n\nThe listener callback gets two arguments `(event, filename)`.  `event` is either\n'rename' or 'change', and `filename` is the name of the file which triggered\nthe event.\n-->\n\n<p><code>filename</code> の変更を監視します。\n<code>filename</code> はファイルまたはディレクトリのどちらかです。\n戻り値のオブジェクトは <a href=\"#fs.FSWatcher\">fs.FSWatcher</a> です。\n\n</p>\n<p>第 2 引数はオプションです。\nもし指定されるなら、<code>options</code> は boolean の <code>persistent</code> プロパティを\n持つオブジェクトであるべきです。\n<code>persistent</code> はファイルが監視されている間、\nプロセスが実行し続けることを示します。\nデフォルトは <code>{ persistent: true }</code> です。\n\n</p>\n<p>リスナーコールバックは二つの引数 <code>(event, filename)</code> を与えられます。\n<code>event</code> は <code>&apos;rename&apos;</code> または <code>&apos;change&apos;</code>、そして <code>filename</code> はイベントを\n引き起こしたファイルの名前です。\n\n</p>\n",
          "miscs": [
            {
              "textRaw": "Caveats",
              "name": "Caveats",
              "type": "misc",
              "desc": "<!--\nThe `fs.watch` API is not 100% consistent across platforms, and is\nunavailable in some situations.\n-->\n\n<p><code>fs.watch</code> API はプラットフォーム間で 100% 完全ではありmせんし、\nいくつかのシチュエーションで利用不可能です。\n\n</p>\n",
              "miscs": [
                {
                  "textRaw": "Availability",
                  "name": "Availability",
                  "type": "misc",
                  "desc": "<!--\nThis feature depends on the underlying operating system providing a way\nto be notified of filesystem changes.\n\n* On Linux systems, this uses `inotify`.\n* On BSD systems (including OS X), this uses `kqueue`.\n* On SunOS systems (including Solaris and SmartOS), this uses `event ports`.\n* On Windows systems, this feature depends on `ReadDirectoryChangesW`.\n\nIf the underlying functionality is not available for some reason, then\n`fs.watch` will not be able to function.  You can still use\n`fs.watchFile`, which uses stat polling, but it is slower and less\nreliable.\n-->\n\n<p>この機能は下層のオペレーティングシステムが提供するファイルシステム変更の\n通知に依存します。\n\n</p>\n<ul>\n<li>Linux システムでは <code>inotify</code> が使われます。</li>\n<li>BSD システム (OS X を含みます) では <code>kqueue</code> が使われます。</li>\n<li>SunOS システム (Solaris および SmartOS を含みます) では <code>event ports</code>\nが使われます。</li>\n<li>Windows システムでは、この機能は <code>ReadDirectoryChangesW</code> に依存します。</li>\n</ul>\n<p>何らかの理由で下層の機能が使えない場合、<code>fs.watch</code> は使えません。\nstat をポーリングする <code>fs.watchFile</code> を使うことはできますが、\nそれは遅くて信頼性はより低くなります。\n\n</p>\n"
                },
                {
                  "textRaw": "Filename Argument",
                  "name": "Filename Argument",
                  "type": "misc",
                  "desc": "<p>Providing <code>filename</code> argument in the callback is not supported\non every platform (currently it&apos;s only supported on Linux and Windows).  Even\non supported platforms <code>filename</code> is not always guaranteed to be provided.\nTherefore, don&apos;t assume that <code>filename</code> argument is always provided in the\ncallback, and have some fallback logic if it is null.\n--&gt;\n\n</p>\n<p>コールバックに提供される <code>filename</code> 引数は、\n全てのプラットフォームでサポートされるわけではありません\n(現時点では Linux と Windows でのみサポートされます)。\nサポートされるプラットフォームであっても、<code>filename</code> が常に提供されることが\n保証されているわけではありません。\nそのため、コールバックは <code>filename</code> 引数が常に提供されると仮定せず、\nそれが <code>null</code> だったときの代替手段を持つべきです。\n\n</p>\n<pre><code>fs.watch(&apos;somedir&apos;, function (event, filename) {\n  console.log(&apos;event is: &apos; + event);\n  if (filename) {\n    console.log(&apos;filename provided: &apos; + filename);\n  } else {\n    console.log(&apos;filename not provided&apos;);\n  }\n});</code></pre>\n"
                }
              ]
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "listener"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.createReadStream(path, [options])",
          "type": "method",
          "name": "createReadStream",
          "desc": "<!--\nReturns a new ReadStream object (See `Readable Stream`).\n-->\n\n<p>新しい ReadStream オブジェクトを返します (<code>Readable Stream</code> を参照してください)。\n\n</p>\n<!--\n`options` is an object with the following defaults:\n-->\n\n<p><code>options</code> は以下のデフォルト値を持つオブジェクトです:\n\n</p>\n<pre><code>{ flags: &apos;r&apos;,\n  encoding: null,\n  fd: null,\n  mode: 0666,\n  bufferSize: 64 * 1024\n}</code></pre>\n<!--\n`options` can include `start` and `end` values to read a range of bytes from\nthe file instead of the entire file.  Both `start` and `end` are inclusive and\nstart at 0.\n-->\n\n<p>ファイル全体を読み込む代わりに一部の範囲を読み込むため、\n<code>options</code> に <code>start</code> および <code>end</code> を含めることができます。\n<code>start</code> と <code>end</code> はどちらも包含的で0から始まります。\n\n</p>\n<!--\nAn example to read the last 10 bytes of a file which is 100 bytes long:\n-->\n\n<p>100 バイトの長さを持つファイルの最後の 10 バイトを読み込む例:\n\n</p>\n<pre><code>fs.createReadStream(&apos;sample.txt&apos;, {start: 90, end: 99});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.createWriteStream(path, [options])",
          "type": "method",
          "name": "createWriteStream",
          "desc": "<!--\nReturns a new WriteStream object (See `Writable Stream`).\n-->\n\n<p>新しい WriteStream オブジェクトを返します (<code>Writable Stream</code> を参照してください)。\n\n</p>\n<!--\n`options` is an object with the following defaults:\n-->\n\n<p><code>options</code> は以下のデフォルト値を持つオブジェクトです:\n\n</p>\n<pre><code>{ flags: &apos;w&apos;,\n  encoding: null,\n  mode: 0666 }</code></pre>\n<!--\n`options` may also include a `start` option to allow writing data at\nsome position past the beginning of the file.  Modifying a file rather\nthan replacing it may require a `flags` mode of `r+` rather than the\ndefault mode `w`.\n-->\n\n<p><code>options</code> にはデータをファイルのどの位置に書き込むかを指定する\n<code>start</code> を含めることができます。\nファイルを置換するのではなく変更する場合は、 <code>flags</code> にデフォルトの\n<code>w</code> ではなく <code>r+</code> が必要となります。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: fs.Stats",
          "type": "class",
          "name": "fs.Stats",
          "desc": "<!--\nObjects returned from `fs.stat()`, `fs.lstat()` and `fs.fstat()` and their\nsynchronous counterparts are of this type.\n-->\n\n<p><code>fs.stat()</code>、<code>fs.lstat()</code>、<code>fs.fstat()</code>、そしてそれらの同期版 から返される\nオブジェクトはこの型です。\n\n</p>\n<!--\n - `stats.isFile()`\n - `stats.isDirectory()`\n - `stats.isBlockDevice()`\n - `stats.isCharacterDevice()`\n - `stats.isSymbolicLink()` (only valid with  `fs.lstat()`)\n - `stats.isFIFO()`\n - `stats.isSocket()`\n-->\n\n<ul>\n<li><code>stats.isFile()</code></li>\n<li><code>stats.isDirectory()</code></li>\n<li><code>stats.isBlockDevice()</code></li>\n<li><code>stats.isCharacterDevice()</code></li>\n<li><code>stats.isSymbolicLink()</code> (<code>fs.lstat()</code> でのみ有効)</li>\n<li><code>stats.isFIFO()</code></li>\n<li><code>stats.isSocket()</code></li>\n</ul>\n<!--\nFor a regular file `util.inspect(stats)` would return a string very\nsimilar to this:\n-->\n\n<p><code>util.inspect(stats)</code> は通常のファイルに対して次のような文字列を返します。\n\n</p>\n<pre><code>{ dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT }</code></pre>\n<!--\nPlease note that `atime`, `mtime` and `ctime` are instances\nof [Date][MDN-Date] object and to compare the values of\nthese objects you should use appropriate methods. For most\ngeneral uses [getTime()][MDN-Date-getTime] will return\nthe number of milliseconds elapsed since _1 January 1970\n00:00:00 UTC_ and this integer should be sufficient for\nany comparison, however there additional methods which can\nbe used for displaying fuzzy information. More details can\nbe found in the [MDN JavaScript Reference][MDN-Date] page.\n-->\n\n<p><code>atime</code>、<code>mtime</code>、そして <code>ctime</code> は [Date][MDN-Date] オブジェクトであり、\nその値を比較するには適切な方法があるということに注意してください。\nもっとも一般的に使われる [getTime()][MDN-Date-getTime] は <em>1970 年 1 月\n1 日</em>からの経過時間をミリ秒単位で返します。\nそれは比較には十分ですが、曖昧な情報を表示するには別の方法を使ってください。\nより詳しい情報は [MDN JavaScript Reference][MDN-Date] で探すことができます。\n\n</p>\n"
        },
        {
          "textRaw": "Class: fs.ReadStream",
          "type": "class",
          "name": "fs.ReadStream",
          "desc": "<!--\n`ReadStream` is a [Readable Stream](stream.html#stream_readable_stream).\n-->\n\n<p><code>ReadStream</code> は <a href=\"stream.html#stream_readable_stream\">Readable Stream</a> です。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'open'",
              "type": "event",
              "name": "open",
              "desc": "<!--\n* `fd` {Integer} file descriptor used by the ReadStream.\n\nEmitted when the ReadStream's file is opened.\n-->\n\n<ul>\n<li><code>fd</code> {Integer} ReadStream で使われる ファイル記述子。</li>\n</ul>\n<p>ReadStream のファイルがオープンされた場合に生成されます。\n\n</p>\n",
              "params": []
            }
          ]
        },
        {
          "textRaw": "Class: fs.FSWatcher",
          "type": "class",
          "name": "fs.FSWatcher",
          "desc": "<!--\nObjects returned from `fs.watch()` are of this type.\n-->\n\n<p><code>fs.watch()</code> が返すオブジェクトはこの型です。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "watcher.close()",
              "type": "method",
              "name": "close",
              "desc": "<!--\nStop watching for changes on the given `fs.FSWatcher`.\n-->\n\n<p><code>fs.FSWatcher</code> に与えられたファイルの監視を終了します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "events": [
            {
              "textRaw": "Event: 'change'",
              "type": "event",
              "name": "change",
              "desc": "<!--\n* `event` {String} The type of fs change\n* `filename` {String} The filename that changed (if relevant/available)\n-->\n\n<ul>\n<li><code>event</code> {String} 変更の種類</li>\n<li><code>filename</code> {String} 変更されたファイル名 (もし可能であれば)</li>\n</ul>\n<!--\nEmitted when something changes in a watched directory or file.\nSee more details in [fs.watch](#fs_fs_watch_filename_options_listener).\n-->\n\n<p>監視しているファイルまたはディレクトリに変更があると生成されます。\n詳しくは <a href=\"#fs_fs_watch_filename_options_listener\">fs.watch</a> を参照してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "params": [],
              "desc": "<!--\nEmitted when an error occurs.\n-->\n\n<p>エラーが発生すると生成されます。\n\n</p>\n"
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "fs.WriteStream",
          "name": "WriteStream",
          "desc": "<!--\n`WriteStream` is a [Writable Stream](stream.html#stream_writable_stream).\n-->\n\n<p><code>WriteStream</code> は <a href=\"stream.html#stream_writable_stream\">Writable Stream</a> です。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'open'",
              "type": "event",
              "name": "open",
              "desc": "<!--\n* `fd` {Integer} file descriptor used by the ReadStream.\n\nEmitted when the WriteStream's file is opened.\n-->\n\n<ul>\n<li><code>fd</code> {Integer} WriteStream で使われる ファイル記述子。</li>\n</ul>\n<p>WriteStream のファイルがオープンされた場合に生成されます。\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "file.bytesWritten",
              "name": "bytesWritten",
              "desc": "<!--\nThe number of bytes written so far. Does not include data that is still queued\nfor writing.\n-->\n\n<p>これまでに書き込まれたバイト数。\n書き込みがキューイングされたままのデータは含まれません。\n\n</p>\n<p> <code>fd</code> is the file descriptor used by the ReadStream.\n\n</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "fs"
    },
    {
      "textRaw": "Path",
      "name": "path",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nThis module contains utilities for handling and transforming file\npaths.  Almost all these methods perform only string transformations.\nThe file system is not consulted to check whether paths are valid.\n\n`path.exists` and `path.existsSync` are the exceptions, and should\nlogically be found in the fs module as they do access the file system.\n\nUse `require('path')` to use this module.  The following methods are provided:\n-->\n\n<p>このモジュールはファイルのパスに対する処理や変換を行うユーティリティを含みます。\nほとんどのメソッドは文字列の変換だけを行います。\nパスが正しいか検証するためにファイルシステムに尋ねることはありません。\n\n</p>\n<p>例外は <code>path.exists</code> および <code>path.existsSync</code> で、\nこれらはファイルシステムにアクセスするため、\n論理的には fs モジュールにあるべきです。\n\n</p>\n<p>このモジュールを利用するには<code>require(&apos;path&apos;)</code>を呼び出してください。\nこのモジュールは以下のメソッドを提供します。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "path.normalize(p)",
          "type": "method",
          "name": "normalize",
          "desc": "<!--\nNormalize a string path, taking care of `'..'` and `'.'` parts.\n\n->\n文字列によるパスを正規化します。`'..'` と `'.'` の要素には注意してください。\n\n<!--\nWhen multiple slashes are found, they're replaced by a single one;\nwhen the path contains a trailing slash, it is preserved.\nOn windows backslashes are used. \n-->\n\n<p>複数のスラッシュが見つかると、それらは一つに置換されます;\nパスの最後にスラッシュが含まれていると、それは維持されます。\nWindows ではバックスラッシュが使われます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "p"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.join([path1], [path2], [...])",
          "type": "method",
          "name": "join",
          "desc": "<!--\nJoin all arguments together and normalize the resulting path.\nNon-string arguments are ignored.\n-->\n\n<p>全ての引数を一つに結合し、結果として得られるパスを正規化します。\n文字列でない引数は無視されます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>path.join(&apos;/foo&apos;, &apos;bar&apos;, &apos;baz/asdf&apos;, &apos;quux&apos;, &apos;..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;\n\npath.join(&apos;foo&apos;, {}, &apos;bar&apos;)\n// returns\n&apos;foo/bar&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "path1",
                  "optional": true
                },
                {
                  "name": "path2",
                  "optional": true
                },
                {
                  "name": "...",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.resolve([from ...], to)",
          "type": "method",
          "name": "resolve",
          "desc": "<!--\nResolves `to` to an absolute path.\n-->\n\n<p><code>to</code> の絶対パスを解決します。\n\n</p>\n<!--\nIf `to` isn't already absolute `from` arguments are prepended in right to left\norder, until an absolute path is found. If after using all `from` paths still\nno absolute path is found, the current working directory is used as well. The\nresulting path is normalized, and trailing slashes are removed unless the path \ngets resolved to the root directory. Non-string arguments are ignored.\n-->\n\n<p>もし <code>to</code> が既に絶対パスでなければ、絶対パスが見つかるまで <code>from</code> 引数を右から左の順で先頭に加えます。\n全ての <code>from</code> を加えた後、パスがまだ絶対パスでなければ、カレントワーキングディレクトリが同様に使われます。\n結果のパスは正規化され、解決されたパスがルートディレクトリでない限り末尾のスラッシュは削除されます。\n文字列でない引数は無視されます。\n\n</p>\n<!--\nAnother way to think of it is as a sequence of `cd` commands in a shell.\n-->\n\n<p>それはシェルにおける <code>cd</code> コマンドの列だと考えることができます。\n\n</p>\n<!--\nExamples:\n-->\n\n<p>例:\n\n</p>\n<pre><code>path.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)</code></pre>\n<!--\nIs similar to:\n-->\n\n<p>これは以下と同様です。\n\n</p>\n<pre><code>cd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subfile\npwd</code></pre>\n<!--\nThe difference is that the different paths don't need to exist and may also be\nfiles.\n-->\n\n<p>違いは、それぞれのパスが必ずしも存在する必要がないことと、ファイルでも構わないことです。\n\n</p>\n<!--\nExamples:\n-->\n\n<p>例:\n\n</p>\n<pre><code>path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)\n// returns\n&apos;/foo/bar/baz&apos;\n\npath.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)\n// returns\n&apos;/tmp/file&apos;\n\npath.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)\n// if currently in /home/myself/node, it returns\n&apos;/home/myself/node/wwwroot/static_files/gif/image.gif&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "from ...",
                  "optional": true
                },
                {
                  "name": "to"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.relative(from, to)",
          "type": "method",
          "name": "relative",
          "desc": "<!--\nSolve the relative path from `from` to `to`.\n-->\n\n<p><code>from</code> から <code>to</code> への相対パスを解決します。\n\n</p>\n<!--\nAt times we have two absolute paths, and we need to derive the relative\npath from one to the other.  This is actually the reverse transform of\n`path.resolve`, which means we see that:\n-->\n\n<p>二つの絶対パスがあり、一方から他方への相対パスを得なければならない場合があります。\nこれは実際のところ、<code>path.resolve()</code> とは逆の変換です。\nそれは以下を意味します:\n\n\n\n</p>\n<pre><code>path.resolve(from, path.relative(from, to)) == path.resolve(to)</code></pre>\n<!--\nExamples:\n-->\n\n<p>例:\n\n</p>\n<pre><code>path.relative(&apos;C:\\\\orandea\\\\test\\\\aaa&apos;, &apos;C:\\\\orandea\\\\impl\\\\bbb&apos;)\n// returns\n&apos;..\\\\..\\\\impl\\\\bbb&apos;\n\npath.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)\n// returns\n&apos;../../impl/bbb&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "from"
                },
                {
                  "name": "to"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.dirname(p)",
          "type": "method",
          "name": "dirname",
          "desc": "<!--\nReturn the directory name of a path.  Similar to the Unix `dirname` command.\n-->\n\n<p>パスに含まれるディレクトリ名を返します。Unixの <code>dirname</code> コマンドと同様です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>path.dirname(&apos;/foo/bar/baz/asdf/quux&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "p"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.basename(p, [ext])",
          "type": "method",
          "name": "basename",
          "desc": "<!--\nReturn the last portion of a path.  Similar to the Unix `basename` command.\n-->\n\n<p>パスの最後の要素を返します。Unixの <code>basename</code> コマンドと同様です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;)\n// returns\n&apos;quux.html&apos;\n\npath.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;, &apos;.html&apos;)\n// returns\n&apos;quux&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "p"
                },
                {
                  "name": "ext",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.extname(p)",
          "type": "method",
          "name": "extname",
          "desc": "<!--\nReturn the extension of the path, from the last '.' to end of string\nin the last portion of the path.  If there is no '.' in the last portion\nof the path or the first character of it is '.', then it returns\nan empty string.  Examples:\n-->\n\n<p>パスの最後の要素について、最後の &apos;.&apos; から文字列の最後までのパスの拡張子を返します。\n最後の要素に &apos;.&apos; が含まれていなかった場合、もしくは &apos;.&apos; が最初の文字だった場合は、空の文字列を返します。\n例:\n\n</p>\n<pre><code>path.extname(&apos;index.html&apos;)\n// returns\n&apos;.html&apos;\n\npath.extname(&apos;index.&apos;)\n// returns\n&apos;.&apos;\n\npath.extname(&apos;index&apos;)\n// returns\n&apos;&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "p"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.exists(p, [callback])",
          "type": "method",
          "name": "exists",
          "desc": "<!--\nTest whether or not the given path exists by checking with the file system.\nThen call the `callback` argument with either true or false.  Example:\n-->\n\n<p>与えられたパスがファイルシステム上に存在するかどうか検査します。\nそして引数の <code>callback</code> を真か偽か検査の結果とともに呼び出します。\n例:\n\n</p>\n<pre><code>path.exists(&apos;/etc/passwd&apos;, function (exists) {\n  util.debug(exists ? &quot;it&apos;s there&quot; : &quot;no passwd!&quot;);\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "p"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "path.existsSync(p)",
          "type": "method",
          "name": "existsSync",
          "desc": "<!--\nSynchronous version of `path.exists`.\n-->\n\n<p>同期版の <code>path.exists</code> です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "p"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Path"
    },
    {
      "textRaw": "net",
      "name": "net",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nThe `net` module provides you with an asynchronous network wrapper. It contains\nmethods for creating both servers and clients (called streams). You can include\nthis module with `require('net');`\n-->\n\n<p><code>net</code> モジュールは非同期なネットワークのラッパーを提供します。\nそれはサーバとクライアントの両方 (ストリームと呼ばれます) を作成するための方法を含みます。\nこのモジュールは<code>require(&quot;net&quot;);</code>によって取り込むことができます。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "net.createServer([options], [connectionListener])",
          "type": "method",
          "name": "createServer",
          "desc": "<!--\nCreates a new TCP server. The `connectionListener` argument is\nautomatically set as a listener for the ['connection'](#event_connection_)\nevent.\n\n`options` is an object with the following defaults:\n-->\n\n<p>新しい TCP サーバを作成します。\n<code>connectionListener</code> 引数は <a href=\"#event_connection_\">&apos;connection&apos;</a>\nイベントに対するリスナーとして自動的に加えられます。\n\n</p>\n<p><code>options</code> は以下のデフォルト値を持つオブジェクトです:\n\n</p>\n<pre><code>{ allowHalfOpen: false\n}</code></pre>\n<!--\nIf `allowHalfOpen` is `true`, then the socket won't automatically send FIN\npacket when the other end of the socket sends a FIN packet. The socket becomes\nnon-readable, but still writable. You should call the `end()` method explicitly.\nSee ['end'](#event_end_) event for more information.\n-->\n\n<p><code>allowHalfOpen</code> が <code>true</code> だと、反対側のソケットが FIN パケットを送信してきても自動的に FIN を送信しなくなります。\nソケットは読み込み可能ではなくなりますが、書き込み可能のままです。\n明示的に <code>end()</code> を呼び出す必要があります。\n<a href=\"#event_end_\">&apos;end&apos;</a> イベントにより多くの情報があります。\n\n</p>\n<!--\nHere is an example of a echo server which listens for connections\non port 8124:\n-->\n\n<p>8124 番のポートへの接続を待ち受けるエコーサーバの例:\n\n</p>\n<pre><code>var net = require(&apos;net&apos;);\nvar server = net.createServer(function(c) { //&apos;connection&apos; listener\n  console.log(&apos;server connected&apos;);\n  c.on(&apos;end&apos;, function() {\n    console.log(&apos;server disconnected&apos;);\n  });\n  c.write(&apos;hello\\r\\n&apos;);\n  c.pipe(c);\n});\nserver.listen(8124, function() { //&apos;listening&apos; listener\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nTest this by using `telnet`:\n-->\n\n<p><code>telnet</code> を使ってテストします:\n\n</p>\n<pre><code>telnet localhost 8124</code></pre>\n<!--\nTo listen on the socket `/tmp/echo.sock` the third line from the last would\njust be changed to\n-->\n\n<p><code>&apos;/tmp/echo.sock&apos;</code> へのソケットを待ち受けるには、最後から三行目をこのように変更します。\n\n</p>\n<pre><code>server.listen(&apos;/tmp/echo.sock&apos;, function() { //&apos;listening&apos; listener</code></pre>\n<!--\nUse `nc` to connect to a UNIX domain socket server:\n-->\n\n<p><code>nc</code> を使って UNIX ドメインソケットサーバへ接続します:\n\n</p>\n<pre><code>nc -U /tmp/echo.sock</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "connectionListener",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.connect(arguments...)",
          "type": "method",
          "name": "connect",
          "desc": "<!--\nConstruct a new socket object and opens a socket to the given location. When\nthe socket is established the ['connect'](#event_connect_) event will be\nemitted.\n-->\n\n<p>新しいソケットオブジェクトを構築し、与えられたロケーションへのソケットをオープンします。\nソケットが確立されると、<a href=\"#event_connect_\">&apos;connect&apos;</a> イベントが生成されます。\n\n</p>\n<!--\nThe arguments for these methods change the type of connection:\n-->\n\n<p>このメソッドの引数はコネクションの種類によって変わります。\n\n</p>\n<ul>\n<li><code>net.connect(port, [host], [connectListener])</code></li>\n<li><code>net.createConnection(port, [host], [connectListener])</code></li>\n</ul>\n<!--\n  Creates a TCP connection to `port` on `host`. If `host` is omitted,\n  `'localhost'` will be assumed.\n-->\n\n<p>  <code>host</code> 上の <code>port</code> に対する TCP コネクションを作成します。\n  <code>host</code> が省略されると <code>localhost</code> が仮定されます。\n\n</p>\n<ul>\n<li><code>net.connect(path, [connectListener])</code></li>\n<li><code>net.createConnection(path, [connectListener])</code></li>\n</ul>\n<!--\n  Creates unix socket connection to `path`.\n-->\n\n<p>  <code>path</code> に対する UNIX ドメインソケットを作成します。\n\n</p>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'](#event_connect_) event.\n-->\n\n<p><code>connectListener</code> 引数は <a href=\"#event_connect_\">&apos;connect&apos;</a>\nイベントのリスナとして追加されます。\n\n</p>\n<!--\nHere is an example of a client of echo server as described previously:\n-->\n\n<p>前述のエコーサーバに接続するクライアントの例:\n\n</p>\n<pre><code>var net = require(&apos;net&apos;);\nvar client = net.connect(8124, function() { //&apos;connect&apos; listener\n  console.log(&apos;client connected&apos;);\n  client.write(&apos;world!\\r\\n&apos;);\n});\nclient.on(&apos;data&apos;, function(data) {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&apos;end&apos;, function() {\n  console.log(&apos;client disconnected&apos;);\n});</code></pre>\n<!--\nTo connect on the socket `/tmp/echo.sock` the second line would just be\nchanged to\n-->\n\n<p><code>&apos;/tmp/echo.sock&apos;</code> へのソケットに接続するには、2 行目をこのように変更します。\n\n</p>\n<pre><code>var client = net.connect(&apos;/tmp/echo.sock&apos;, function() { //&apos;connect&apos; listener</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "arguments..."
                }
              ]
            },
            {
              "params": [
                {
                  "name": "arguments..."
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.createConnection(arguments...)",
          "type": "method",
          "name": "createConnection",
          "desc": "<!--\nConstruct a new socket object and opens a socket to the given location. When\nthe socket is established the ['connect'](#event_connect_) event will be\nemitted.\n-->\n\n<p>新しいソケットオブジェクトを構築し、与えられたロケーションへのソケットをオープンします。\nソケットが確立されると、<a href=\"#event_connect_\">&apos;connect&apos;</a> イベントが生成されます。\n\n</p>\n<!--\nThe arguments for these methods change the type of connection:\n-->\n\n<p>このメソッドの引数はコネクションの種類によって変わります。\n\n</p>\n<ul>\n<li><code>net.connect(port, [host], [connectListener])</code></li>\n<li><code>net.createConnection(port, [host], [connectListener])</code></li>\n</ul>\n<!--\n  Creates a TCP connection to `port` on `host`. If `host` is omitted,\n  `'localhost'` will be assumed.\n-->\n\n<p>  <code>host</code> 上の <code>port</code> に対する TCP コネクションを作成します。\n  <code>host</code> が省略されると <code>localhost</code> が仮定されます。\n\n</p>\n<ul>\n<li><code>net.connect(path, [connectListener])</code></li>\n<li><code>net.createConnection(path, [connectListener])</code></li>\n</ul>\n<!--\n  Creates unix socket connection to `path`.\n-->\n\n<p>  <code>path</code> に対する UNIX ドメインソケットを作成します。\n\n</p>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'](#event_connect_) event.\n-->\n\n<p><code>connectListener</code> 引数は <a href=\"#event_connect_\">&apos;connect&apos;</a>\nイベントのリスナとして追加されます。\n\n</p>\n<!--\nHere is an example of a client of echo server as described previously:\n-->\n\n<p>前述のエコーサーバに接続するクライアントの例:\n\n</p>\n<pre><code>var net = require(&apos;net&apos;);\nvar client = net.connect(8124, function() { //&apos;connect&apos; listener\n  console.log(&apos;client connected&apos;);\n  client.write(&apos;world!\\r\\n&apos;);\n});\nclient.on(&apos;data&apos;, function(data) {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&apos;end&apos;, function() {\n  console.log(&apos;client disconnected&apos;);\n});</code></pre>\n<!--\nTo connect on the socket `/tmp/echo.sock` the second line would just be\nchanged to\n-->\n\n<p><code>&apos;/tmp/echo.sock&apos;</code> へのソケットに接続するには、2 行目をこのように変更します。\n\n</p>\n<pre><code>var client = net.connect(&apos;/tmp/echo.sock&apos;, function() { //&apos;connect&apos; listener</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "arguments..."
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.isIP(input)",
          "type": "method",
          "name": "isIP",
          "desc": "<!--\nTests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.\n-->\n\n<p><code>input</code> が IP アドレスかテストします。\n不正な文字列だと 0、IP バージョン 4 アドレスだと 4，IP バージョン 6\nアドレスだと 6 が返されます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "input"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.isIPv4(input)",
          "type": "method",
          "name": "isIPv4",
          "desc": "<!--\nReturns true if input is a version 4 IP address, otherwise returns false.\n-->\n\n<p><code>input</code> が バージョン 4 の IP アドレスなら true、そうでなければ false を返します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "input"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.isIPv6(input)",
          "type": "method",
          "name": "isIPv6",
          "desc": "<!--\nReturns true if input is a version 6 IP address, otherwise returns false.\n-->\n\n<p><code>input</code> が バージョン 6 の IP アドレスなら true、そうでなければ false を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "input"
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: net.Server",
          "type": "class",
          "name": "net.Server",
          "desc": "<!--\nThis class is used to create a TCP or UNIX server.\nA server is a `net.Socket` that can listen for new incoming connections.\n-->\n\n<p>このクラスは TCP または UNIX ドメインのサーバを作成するために使われます。\nサーバは <code>net.Scoket</code> であり、新たに到着する接続を待ち受けることができます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "server.listen(port, [host], [listeningListener])",
              "type": "method",
              "name": "listen",
              "desc": "<!--\nBegin accepting connections on the specified `port` and `host`.  If the\n`host` is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`). A port value of zero will assign a random port.\n-->\n\n<p>指定された <code>port</code> と <code>host</code> でコネクションの受け入れを開始します。\n<code>host</code> が省略されると、サーバはどんな IPv4 アドレスへの接続も受け入れます\n(<code>INADDR_ANY</code>)。\nポート番号に 0 を指定すると、ランダムなポートが割り当てられます。\n\n</p>\n<!--\nThis function is asynchronous.  When the server has been bound,\n['listening'](#event_listening_) event will be emitted.\nthe last parameter `listeningListener` will be added as an listener for the\n['listening'](#event_listening_) event.\n-->\n\n<p>この関数は非同期です。\nサーバがバインドされると、<a href=\"#event_listening_\">&apos;listening&apos;</a>\nイベントが生成されます。\n最後の引数 <code>listeningListener</code> は <a href=\"#event_listening_\">&apos;listening&apos;</a>\nのリスナとして加えられます。\n\n</p>\n<!--\nOne issue some users run into is getting `EADDRINUSE` errors. This means that\nanother server is already running on the requested port. One way of handling this\nwould be to wait a second and then try again. This can be done with\n-->\n\n<p>一部のユーザが陥る問題の一つは、<code>EADDRINUSE</code> エラーです。\nこれは、他のサーバが要求されたポートを使っていることを意味します。\nこれに対照する方法の一つは、1秒待機してからリトライすることです。\nこれは次のようになります\n\n</p>\n<pre><code>server.on(&apos;error&apos;, function (e) {\n  if (e.code == &apos;EADDRINUSE&apos;) {\n    console.log(&apos;Address in use, retrying...&apos;);\n    setTimeout(function () {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});</code></pre>\n<!--\n(Note: All sockets in Node set `SO_REUSEADDR` already)\n-->\n\n<p>注意: Node の全てのソケットは <code>SO_REUSEADDR</code> が設定されます)\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "host",
                      "optional": true
                    },
                    {
                      "name": "listeningListener",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.listen(path, [listeningListener])",
              "type": "method",
              "name": "listen",
              "desc": "<!--\nStart a UNIX socket server listening for connections on the given `path`.\n-->\n\n<p>与えられた <code>path</code> へのコネクションを待ち受けるする UNIX ドメインソケットのサーバを開始します。\n\n</p>\n<!--\nThis function is asynchronous.  When the server has been bound,\n['listening'](#event_listening_) event will be emitted.\nthe last parameter `listeningListener` will be added as an listener for the\n['listening'](#event_listening_) event.\n-->\n\n<p>この関数は非同期です。\nサーバがバインドされると、<code>&apos;listening&apos;</code> イベントが生成されます。\n最後の引数 <code>listeningListener</code> は <a href=\"#event_listening_\">&apos;listening&apos;</a>\nのリスナとして加えられます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "listeningListener",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.close()",
              "type": "method",
              "name": "close",
              "desc": "<!--\nStops the server from accepting new connections. This function is\nasynchronous, the server is finally closed when the server emits a `'close'`\nevent.\n-->\n\n<p>サーバが新しいコネクションを受け付けるのを終了します。\nこの関数は非同期で、サーバは最終的に <code>&apos;close&apos;</code> イベントを生成した時にクローズされます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "server.address()",
              "type": "method",
              "name": "address",
              "desc": "<!--\nReturns the bound address and port of the server as reported by the operating system.\nUseful to find which port was assigned when giving getting an OS-assigned address.\nReturns an object with two properties, e.g. `{\"address\":\"127.0.0.1\", \"port\":2121}`\n-->\n\n<p>オペレーティングシステムから報告された、サーバにバインドされたアドレスとポートを返します。\nOSによって割り当てられたアドレスが渡された時に、どのポートに割り当てられたものかを調べるのに便利です。\n返されるオブジェクトは二つのプロパティを持ちます。\n例えば <code>{&quot;address&quot;:&quot;127.0.0.1&quot;, &quot;port&quot;:2121}</code>\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var server = net.createServer(function (socket) {\n  socket.end(&quot;goodbye\\n&quot;);\n});\n\n// grab a random port.\nserver.listen(function() {\n  address = server.address();\n  console.log(&quot;opened server on %j&quot;, address);\n});</code></pre>\n<!--\nDon't call `server.address()` until the `'listening'` event has been emitted.\n-->\n\n<p><code>&apos;listening&apos;</code> イベントが生成される前に <code>server.address()</code> を呼び出してはいけません。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "server.maxConnections",
              "name": "maxConnections",
              "desc": "<!--\nSet this property to reject connections when the server's connection count gets\nhigh.\n-->\n\n<p>サーバの接続数が大きくなった時に接続を拒否するためにこのプロパティを設定します。\n</p>\n"
            },
            {
              "textRaw": "server.connections",
              "name": "connections",
              "desc": "<!--\nThe number of concurrent connections on the server.\n-->\n\n<p>このサーバ上の並行コネクションの数です。\n\n</p>\n<!--\n`net.Server` is an `EventEmitter` with the following events:\n-->\n\n<p><code>net.Server</code> は以下のイベントを持つ <code>EventEmitter</code> です:\n\n</p>\n"
            }
          ],
          "events": [
            {
              "textRaw": "Event: 'listening'",
              "type": "event",
              "name": "listening",
              "desc": "<!--\nEmitted when the server has been bound after calling `server.listen`.\n-->\n\n<p><code>server.listen()</code> が呼ばれた後、サーバがバインドされると生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connection'",
              "type": "event",
              "name": "connection",
              "desc": "<!--\n* {Socket object} The connection object\n-->\n\n<ul>\n<li>{Socket object} コネクションオブジェクト</li>\n</ul>\n<!--\nEmitted when a new connection is made. `socket` is an instance of\n`net.Socket`.\n-->\n\n<p>新しいコネクションが作成されると生成されます。\n<code>socket</code> は <code>net.Socket</code> のインスタンスです。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<!--\nEmitted when the server closes.\n-->\n\n<p>サーバがクローズした時に生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "params": [],
              "desc": "<!--\nEmitted when an error occurs.  The `'close'` event will be called directly\nfollowing this event.  See example in discussion of `server.listen`.\n-->\n\n<p>エラーが発生すると生成されます。\nこのイベントに続いて <code>&apos;close&apos;</code> イベントが直接生成される場合があります。\n<code>server.listen()</code> の例を参照してください。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: net.Socket",
          "type": "class",
          "name": "net.Socket",
          "desc": "<!--\nThis object is an abstraction of a TCP or UNIX socket.  `net.Socket`\ninstances implement a duplex Stream interface.  They can be created by the\nuser and used as a client (with `connect()`) or they can be created by Node\nand passed to the user through the `'connection'` event of a server.\n-->\n\n<p>このオブジェクトは TCP または UNIX ドメインのソケットを抽象化したものです。\n<code>net.Socket</code> のインスタンスは双方向のストリームインタフェースを実装します。\nそれらはユーザによって (<code>connect()</code> によって) 作成されてクライアントとして使われるか、\nNode によって作成されてサーバの <code>&apos;connection&apos;</code> イベントを通じてユーザに渡されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "new net.Socket([options])",
              "type": "method",
              "name": "Socket",
              "desc": "<!--\nConstruct a new socket object.\n-->\n\n<p>新しいソケットオブジェクトを構築します。\n\n</p>\n<!--\n`options` is an object with the following defaults:\n-->\n\n<p><code>options</code> は以下のデフォルト値を持つオブジェクトです。\n\n</p>\n<pre><code>{ fd: null\n  type: null\n  allowHalfOpen: false\n}</code></pre>\n<!--\n\n`fd` allows you to specify the existing file descriptor of socket. `type`\nspecified underlying protocol. It can be `'tcp4'`, `'tcp6'`, or `'unix'`.\nAbout `allowHalfOpen`, refer to `createServer()` and `'end'` event.\n-->\n\n<p><code>fd</code> に既存のソケットのファイル記述子を指定することができます。\n<code>type</code> にはプロトコルを指定することができます。\n指定できるのは <code>&apos;tcp4&apos;</code>、<code>&apos;tcp6&apos;</code> または <code>&apos;unix&apos;</code> のいずれかです。\n<code>allowHalfOpen</code> については <code>createServer()</code> および <code>&apos;end&apos;</code> イベントを参照してください。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.connect(port, [host], [connectListener])",
              "type": "method",
              "name": "connect",
              "desc": "<!--\nOpens the connection for a given socket. If `port` and `host` are given,\nthen the socket will be opened as a TCP socket, if `host` is omitted,\n`localhost` will be assumed. If a `path` is given, the socket will be\nopened as a unix socket to that path.\n-->\n\n<p>与えられたソケットでコネクションをオープンします。\n<code>port</code> と <code>host</code> が与えられた場合、\nソケットは TCP ソケットとしてオープンされます。\n<code>host</code> が省略された場合は <code>localhost</code> が仮定されます。\n<code>path</code> が与えられた場合は、\nソケットはそのパスへの UNIX ドメインソケットとしてオープンされます。\n\n</p>\n<!--\nNormally this method is not needed, as `net.createConnection` opens the\nsocket. Use this only if you are implementing a custom Socket or if a\nSocket is closed and you want to reuse it to connect to another server.\n-->\n\n<p>通常このメソッドは必要なく、<code>net.createConnection</code> でソケットをオープンします。\nこれを使うのは、カスタマイズされたソケットを実装している場合や、\nソケットがクローズされた後にコネクションを再利用して別のサーバに接続する場合だけです。\n\n</p>\n<!--\nThis function is asynchronous. When the ['connect'](#event_connect_) event is\nemitted the socket is established. If there is a problem connecting, the\n`'connect'` event will not be emitted, the `'error'` event will be emitted with\nthe exception.\n-->\n\n<p>この関数は非同期です。ソケットが確立されると <a href=\"#event_connect_\">&apos;connect&apos;</a>\nイベントが生成されます。\n接続で問題があった場合は <code>&apos;connect&apos;</code> イベントは生成されず、\n例外とともに <code>&apos;error&apos;</code> イベントが生成されます。\n\n</p>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'](#event_connect_) event.\n-->\n\n<p><code>connectListener</code> 引数は <a href=\"#event_connect_\">&apos;connect&apos;</a>\nイベントのリスナに加えられます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "host",
                      "optional": true
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.connect(path, [connectListener])",
              "type": "method",
              "name": "connect",
              "desc": "<!--\nOpens the connection for a given socket. If `port` and `host` are given,\nthen the socket will be opened as a TCP socket, if `host` is omitted,\n`localhost` will be assumed. If a `path` is given, the socket will be\nopened as a unix socket to that path.\n-->\n\n<p>与えられたソケットでコネクションをオープンします。\n<code>port</code> と <code>host</code> が与えられた場合、\nソケットは TCP ソケットとしてオープンされます。\n<code>host</code> が省略された場合は <code>localhost</code> が仮定されます。\n<code>path</code> が与えられた場合は、\nソケットはそのパスへの UNIX ドメインソケットとしてオープンされます。\n\n</p>\n<!--\nNormally this method is not needed, as `net.createConnection` opens the\nsocket. Use this only if you are implementing a custom Socket or if a\nSocket is closed and you want to reuse it to connect to another server.\n-->\n\n<p>通常このメソッドは必要なく、<code>net.createConnection</code> でソケットをオープンします。\nこれを使うのは、カスタマイズされたソケットを実装している場合や、\nソケットがクローズされた後にコネクションを再利用して別のサーバに接続する場合だけです。\n\n</p>\n<!--\nThis function is asynchronous. When the ['connect'](#event_connect_) event is\nemitted the socket is established. If there is a problem connecting, the\n`'connect'` event will not be emitted, the `'error'` event will be emitted with\nthe exception.\n-->\n\n<p>この関数は非同期です。ソケットが確立されると <a href=\"#event_connect_\">&apos;connect&apos;</a>\nイベントが生成されます。\n接続で問題があった場合は <code>&apos;connect&apos;</code> イベントは生成されず、\n例外とともに <code>&apos;error&apos;</code> イベントが生成されます。\n\n</p>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'](#event_connect_) event.\n-->\n\n<p><code>connectListener</code> 引数は <a href=\"#event_connect_\">&apos;connect&apos;</a>\nイベントのリスナに加えられます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.setEncoding([encoding])",
              "type": "method",
              "name": "setEncoding",
              "desc": "<!--\nSets the encoding (either `'ascii'`, `'utf8'`, or `'base64'`) for data that is\nreceived. Defaults to `null`.\n-->\n\n<p>受信したデータのエンコーディングを設定します (<code>&apos;ascii&apos;</code>、<code>&apos;utf8&apos;</code>、\nあるいは <code>&apos;base64&apos;</code> のいずれかです)。デフォルトは <code>null</code> です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.setSecure()",
              "type": "method",
              "name": "setSecure",
              "desc": "<!--\nThis function has been removed in v0.3. It used to upgrade the connection to\nSSL/TLS. See the [TLS section](tls.html#tLS_) for the new API.\n-->\n\n<p>この関数は v0.3 で削除されました。\nこれはコネクションを SSL/TLS にアップグレードするために使われていました。\n新しい API である <a href=\"tls.html#tLS_\">TLS の章</a> を参照してください。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "socket.write(data, [encoding], [callback])",
              "type": "method",
              "name": "write",
              "desc": "<!--\nSends data on the socket. The second parameter specifies the encoding in the\ncase of a string--it defaults to UTF8 encoding.\n-->\n\n<p>ソケットにデータを送信します。\n文字列の場合、第 2 引数はエンコーディングを指定します － デフォルトは UTF-8 です。\n\n</p>\n<!--\nReturns `true` if the entire data was flushed successfully to the kernel\nbuffer. Returns `false` if all or part of the data was queued in user memory.\n`'drain'` will be emitted when the buffer is again free.\n-->\n\n<p>データ全体のカーネルバッファへのフラッシュが成功すると <code>true</code> を返します。\nデータ全体または一部がユーザメモリ内のキューに入れられた場合は <code>false</code> を返します。\n再びバッファが空いた場合は <code>&apos;drain&apos;</code> イベントが生成されます。\n\n</p>\n<!--\nThe optional `callback` parameter will be executed when the data is finally\nwritten out - this may not be immediately.\n-->\n\n<p>オプションの <code>callback</code> 引数はデータが最終的に出力された時に実行されます\n－ これはすぐには起きないでしょう。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.end([data], [encoding])",
              "type": "method",
              "name": "end",
              "desc": "<!--\nHalf-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.\n-->\n\n<p>ソケットをハーフクローズします。例えば FIN パケットを送信します。\nサーバはまだデータを送り続けてくることができます。\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling\n`socket.write(data, encoding)` followed by `socket.end()`.\n-->\n\n<p><code>data</code> が指定された場合は、\n<code>socket.write(data, encoding)</code> に続けて <code>socket.end()</code> を呼び出すのと等価です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.destroy()",
              "type": "method",
              "name": "destroy",
              "desc": "<!--\nEnsures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).\n-->\n\n<p>このソケット上でどんな I/O も起こらないことを保証します。\n(パースエラーなどの) エラーの場合にだけ必要です。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "socket.pause()",
              "type": "method",
              "name": "pause",
              "desc": "<!--\nPauses the reading of data. That is, `'data'` events will not be emitted.\nUseful to throttle back an upload.\n-->\n\n<p>データの読み込みを中断します。つまり、<code>&apos;data&apos;</code> イベントは生成されません。\nアップロード速度を落とすために便利です。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "socket.resume()",
              "type": "method",
              "name": "resume",
              "desc": "<!--\nResumes reading after a call to `pause()`.\n-->\n\n<p><code>pause()</code> を呼び出した後で読み込みを再開します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "socket.setTimeout(timeout, [callback])",
              "type": "method",
              "name": "setTimeout",
              "desc": "<!--\nSets the socket to timeout after `timeout` milliseconds of inactivity on\nthe socket. By default `net.Socket` do not have a timeout.\n-->\n\n<p>このソケットが非アクティブになってから <code>timeout</code> ミリ秒後にタイムアウト\nするように設定します。デフォルトでは <code>net.Socket</code> はタイムアウトしません。\n\n</p>\n<!--\nWhen an idle timeout is triggered the socket will receive a `'timeout'`\nevent but the connection will not be severed. The user must manually `end()`\nor `destroy()` the socket.\n-->\n\n<p>アイドルタイムアウトが引き起こされると、ソケットは <code>&apos;timeout&apos;</code> イベントを受信しますが、\nコネクションは切断されません。\nユーザは手動で <code>end()</code> または <code>destroy()</code> を呼び出す必要があります。\n\n</p>\n<!--\nIf `timeout` is 0, then the existing idle timeout is disabled.\n-->\n\n<p><code>timeout</code> が 0 の場合、アイドルタイムアウトは無効にされます。\n\n</p>\n<!--\nThe optional `callback` parameter will be added as a one time listener for the\n`'timeout'` event.\n-->\n\n<p>オプションの <code>callback</code> 引数は、<code>timeouot</code> イベントの一回限りのリスナを追加します。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "timeout"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.setNoDelay([noDelay])",
              "type": "method",
              "name": "setNoDelay",
              "desc": "<!--\nDisables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting `true` for\n`noDelay` will immediately fire off data each time `socket.write()` is called.\n`noDelay` defaults to `true`.\n-->\n\n<p>Nagle アルゴリズムを無効にします。\nデフォルトでは TCP コネクションは Nagle アルゴリズムを使用し、データを送信する前にバッファリングします。\n<code>noDelay</code> に <code>true</code> を設定すると、データは <code>socket.write()</code>\nを呼び出す度に即座に送信されます。デフォルトは <code>true</code> です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "noDelay",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.setKeepAlive([enable], [initialDelay])",
              "type": "method",
              "name": "setKeepAlive",
              "desc": "<!--\nEnable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.\n`enable` defaults to `false`.\n\nSet `initialDelay` (in milliseconds) to set the delay between the last\ndata packet received and the first keepalive probe. Setting 0 for\ninitialDelay will leave the value unchanged from the default\n(or previous) setting. Defaults to `0`.\n-->\n\n<p>キープアライブ機能を有効/無効にします。\nオプションで最初の keepalive probe がアイドルソケットに送信されるまでの初期遅延を設定します。\n<code>enable</code> のデフォルトは <code>false</code> です。\n\n</p>\n<p><code>initialDelay</code> (ミリ秒) が設定されると、\n最後にデータパケットを受信してから最初の keepalive probe までの遅延が設定されます。\n初期遅延に 0 が設定されると、デフォルト設定から値を変更されないようにします。\nデフォルトは <code>0</code> です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "enable",
                      "optional": true
                    },
                    {
                      "name": "initialDelay",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.address()",
              "type": "method",
              "name": "address",
              "desc": "<!--\nReturns the bound address and port of the socket as reported by the operating\nsystem. Returns an object with two properties, e.g.\n`{\"address\":\"192.168.57.1\", \"port\":62053}`\n-->\n\n<p>オペレーティングシステムから報告された、ソケットにバインドされたアドレスとポートを返します。\n返されるオブジェクトは二つのプロパティを持ちます。\n例えば <code>{&quot;address&quot;:&quot;192.168.57.1&quot;, &quot;port&quot;:62053}</code>\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "socket.bufferSize",
              "name": "bufferSize",
              "desc": "<!--\n`net.Socket` has the property that `socket.write()` always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket - the network connection\nsimply might be too slow. Node will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket's file descriptor for being writable).\n\nThe consequence of this internal buffering is that memory may grow. This\nproperty shows the number of characters currently buffered to be written.\n(Number of characters is approximately equal to the number of bytes to be\nwritten, but the buffer may contain strings, and the strings are lazily\nencoded, so the exact number of bytes is not known.)\n\nUsers who experience large or growing `bufferSize` should attempt to\n\"throttle\" the data flows in their program with `pause()` and `resume()`.\n-->\n\n<p><code>net.Socket</code> には、<code>socket.write()</code> と常に協調するプロパティがあります。\nこれはユーザが実行速度を向上させる手助けになります。\nコンピュータは、ソケットに書き込まれるデータ量についていくことはできません。\n- ネットワーク接続は、単純に遅すぎます。\nNode は、ソケットに書き込まれるデータを内部のキューに入れ、可能になった時にワイヤ上に送信します (内部ではソケットのファイル記述子が書き込み可能になるのをポーリングします)。\n\n</p>\n<p>内部的なバッファリングの結果、メモリ消費が増大するかもしれません。\nこのプロパティは、現在書き込みのためにバッファリングされている文字数を示します。\n(文字数は書き込まれるバイト数とほぼ同じですが、バッファが文字列を含んでいる場合、文字列は遅延的にエンコードされるため、正確なバイト数は分かっていません)\n\n</p>\n<p>大きな、あるいは増大する <code>bufferSize</code> を体験したユーザは、そのプログラムで <code>pause()</code> および <code>resume()</code> を使ってデータフローを「抑えよう」としなければなりません。\n\n</p>\n"
            },
            {
              "textRaw": "socket.remoteAddress",
              "name": "remoteAddress",
              "desc": "<!--\nThe string representation of the remote IP address. For example,\n`'74.125.127.100'` or `'2001:4860:a005::68'`.\n-->\n\n<p>リモートの IP アドレスを表現する文字列です。\n例えば、<code>&apos;74.125.127.100&apos;</code> あるいは <code>&apos;2001:4860:a005::68&apos;</code>。\n\n</p>\n<!--\nThis member is only present in server-side connections.\n-->\n\n<p>このメンバはサーバサイドのコネクションにのみ与えられます。\n\n</p>\n"
            },
            {
              "textRaw": "socket.remotePort",
              "name": "remotePort",
              "desc": "<!--\nThe numeric representation of the remote port. For example,\n`80` or `21`.\n-->\n\n<p>リモートポートの数値表現です。\nたとえば、<code>80</code> や <code>21</code>。\n\n</p>\n"
            },
            {
              "textRaw": "socket.bytesRead",
              "name": "bytesRead",
              "desc": "<!--\nThe amount of received bytes.\n-->\n\n<p>受信したバイトの合計です。\n\n</p>\n"
            },
            {
              "textRaw": "socket.bytesWritten",
              "name": "bytesWritten",
              "desc": "<!--\nThe amount of bytes sent.\n-->\n\n<p>送信したバイトの合計です。\n\n</p>\n<!--\n`net.Socket` instances are EventEmitters with the following events:\n-->\n\n<p><code>net.Socket</code> のインスタンスは以下のイベントを持つ EventEmitter です:\n\n</p>\n"
            }
          ],
          "events": [
            {
              "textRaw": "Event: 'connect'",
              "type": "event",
              "name": "connect",
              "desc": "<!--\nEmitted when a socket connection is successfully established.\nSee `connect()`.\n-->\n\n<p>ソケットコネクションの確立が成功した場合に生成されます。\n<code>connect()</code> を参照してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'data'",
              "type": "event",
              "name": "data",
              "params": [],
              "desc": "<!--\nEmitted when data is received.  The argument `data` will be a `Buffer` or\n`String`.  Encoding of data is set by `socket.setEncoding()`.\n(See the [Readable Stream](stream.html#readable_stream) section for more\ninformation.)\n\nNote that the __data will be lost__ if there is no listener when a `Socket`\nemits a `'data'` event.\n-->\n\n<p>データを受信した場合に生成されます。\n<code>data</code> 引数は <code>Buffer</code> または <code>String</code> です。\nデータのエンコーディングは <code>socket.setEncoding()</code> で設定されます。\n(より詳しい情報は <a href=\"stream.html#readable_Stream\">Readable Stream</a> を参照してください)。\n\n</p>\n<p><code>Socket</code> が <code>&apos;data&apos;</code> イベントを生成した時にリスナが存在しなければ、\n<strong>データは失われる</strong>ことに注意してください。\n\n</p>\n"
            },
            {
              "textRaw": "Event: 'end'",
              "type": "event",
              "name": "end",
              "desc": "<!--\nEmitted when the other end of the socket sends a FIN packet.\n-->\n\n<p>ソケットの相手側が FIN パケットを送信した場合に生成されます。\n\n</p>\n<p>デフォルト (<code>allowHalfOpen == false</code>) では、\n保留されていた書き込みキューが出力されるとソケットはファイル識別子を破棄します。\nしかし、<code>allowHalfOpen == true</code> が設定されていると、\nユーザがデータを書き込めるようにしておくために、ソケットは自動的に <code>end()</code> を呼び出さないので、\nユーザが <code>end()</code> を呼び出す必要があります。\n\n\n</p>\n",
              "By default (`allowHalfOpen": "= false`) the socket will destroy its file\ndescriptor  once it has written out its pending write queue.  However, by\nsetting `allowHalfOpen == true` the socket will not automatically `end()`\nits side allowing the user to write arbitrary amounts of data, with the\ncaveat that the user is required to `end()` their side now.",
              "params": []
            },
            {
              "textRaw": "Event: 'timeout'",
              "type": "event",
              "name": "timeout",
              "desc": "<!--\nEmitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.\n\nSee also: `socket.setTimeout()`\n-->\n\n<p>ソケットがタイムアウトして非アクティブになった場合に生成されます。\nこれはソケットがアイドルになったことを通知するだけです。\n利用者は手動でコネクションをクローズする必要があります。\n\n</p>\n<p><code>socket.setTimeout()</code> を参照してください。\n\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'drain'",
              "type": "event",
              "name": "drain",
              "desc": "<!--\nEmitted when the write buffer becomes empty. Can be used to throttle uploads.\n\nSee also: the return values of `socket.write()`\n-->\n\n<p>書き込みバッファが空になった場合に生成されます。アップロード速度を落とすために使うことができます。\n\n</p>\n<p><code>socket.write()</code> の戻り値を参照してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "params": [],
              "desc": "<!--\nEmitted when an error occurs.  The `'close'` event will be called directly\nfollowing this event.\n-->\n\n<p>エラーが発生した場合に生成されます。<code>&apos;close&apos;</code> イベントはこのイベントの後に直接呼び出されます。\n\n</p>\n"
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "params": [],
              "desc": "<!--\nEmitted once the socket is fully closed. The argument `had_error` is a boolean\nwhich says if the socket was closed due to a transmission error.\n-->\n\n<p>ソケットが完全にクローズした場合に生成されます。\n引数 <code>had_error</code> は boolean で、ソケットが転送エラーでクローズされたのかどうかを示します。\n\n</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "net"
    },
    {
      "textRaw": "UDP / Datagram Sockets",
      "name": "dgram",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nDatagram sockets are available through `require('dgram')`.\n-->\n\n<p>データグラムソケットは <code>require(&apos;dgram&apos;)</code> で利用可能になります。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "dgram.createSocket(type, [callback])",
          "type": "method",
          "name": "createSocket",
          "desc": "<!--\n* `type` String. Either 'udp4' or 'udp6'\n* `callback` Function. Attached as a listener to `message` events.\n  Optional\n* Returns: Socket object\n-->\n\n<ul>\n<li><code>type</code> String. &apos;udp4&apos; または &apos;udp6&apos; のいずれか</li>\n<li><code>callback</code> Function. <code>&apos;message&apos;</code> イベントのリスナとして割り当てられる、\nOptional</li>\n<li>Returns: Socket object</li>\n</ul>\n<!--\nCreates a datagram Socket of the specified types.  Valid types are `udp4`\nand `udp6`.\n\nTakes an optional callback which is added as a listener for `message` events.\n\nCall `socket.bind` if you want to receive datagrams. `socket.bind()` will bind\nto the \"all interfaces\" address on a random port (it does the right thing for\nboth `udp4` and `udp6` sockets). You can then retrieve the address and port\nwith `socket.address().address` and `socket.address().port`.\n-->\n\n<p>指定された種類のデータグラムソケットを作成します。\n妥当な種類は <code>udp4</code> と <code>udp6</code>です。\n\n</p>\n<p>オプションのコールバックは <code>message</code> イベントのリスナーとして加えられます。\n\n</p>\n<p>データグラムを受信したい場合は <code>socket.bind()</code> を呼び出します。\n<code>socket.bind()</code> は「全てのインタフェース」のアドレスにランダムなポート\n(<code>udp4</code> と <code>udp6</code> ソケットの両方で正しいものです) をバインドします。\nそのアドレスとポートは <code>socket.address().address</code> および\n<code>socket.address().port</code> で取得することができます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "type"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Socket",
          "type": "class",
          "name": "Socket",
          "desc": "<!--\nThe dgram Socket class encapsulates the datagram functionality.  It\nshould be created via `dgram.createSocket(type, [callback])`.\n-->\n\n<p>dgram Scoket クラスはデータグラム機能をカプセル化します。\nそれは <code>dgram.createSocket(type, [callback])</code> を通じて生成されます。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'message'",
              "type": "event",
              "name": "message",
              "desc": "<!--\n* `msg` Buffer object. The message\n* `rinfo` Object. Remote address information\n-->\n\n<ul>\n<li><code>msg</code> Buffer object. メッセージ</li>\n<li><code>rinfo</code> Object. リモートアドレスの情報</li>\n</ul>\n<!--\nEmitted when a new datagram is available on a socket.  `msg` is a `Buffer` and `rinfo` is\nan object with the sender's address information and the number of bytes in the datagram.\n-->\n\n<p>ソケット上で新しいデータグラムが到着した時に生成されます。<code>msg</code> は <code>Buffer</code> で、\n<code>rinfo</code> は送信者のアドレス情報とデータグラムのバイト数を持ったオブジェクトです。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'listening'",
              "type": "event",
              "name": "listening",
              "desc": "<!--\nEmitted when a socket starts listening for datagrams.  This happens as soon as UDP sockets\nare created.\n-->\n\n<p>ソケットでデータグラムの待ち受けを開始すると生成されます。\nこれは UDP ソケットが作成されるとすぐに発生します。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<!--\nEmitted when a socket is closed with `close()`.  No new `message` events will be emitted\non this socket.\n-->\n\n<p><code>close()</code> によってソケットがクローズすると生成されます。\nこのソケットでは新しい <code>message</code> イベントは生成されなくなります。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "params": [],
              "desc": "<!--\nEmitted when an error occurs.\n-->\n\n<p>エラーが発生すると生成されます。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "dgram.send(buf, offset, length, port, address, [callback])",
              "type": "method",
              "name": "send",
              "desc": "<!--\n* `buf` Buffer object.  Message to be sent\n* `offset` Integer. Offset in the buffer where the message starts.\n* `length` Integer. Number of bytes in the message.\n* `port` Integer. destination port\n* `address` String. destination IP\n* `callback` Function. Callback when message is done being delivered.\n  Optional.\n-->\n\n<ul>\n<li><code>buf</code> Buffer object.  送信されるメッセージ</li>\n<li><code>offset</code> Integer. メッセージの開始位置となるバッファ内のオフセット</li>\n<li><code>length</code> Integer. メッセージのバイト長</li>\n<li><code>port</code> Integer. 接続先のポート番号</li>\n<li><code>address</code> String. 接続先の IP</li>\n<li><code>callback</code> Function. メッセージの配信が完了した後にコールバックされる、\nOptional.</li>\n</ul>\n<!--\nFor UDP sockets, the destination port and IP address must be specified.  A string\nmay be supplied for the `address` parameter, and it will be resolved with DNS.  An\noptional callback may be specified to detect any DNS errors and when `buf` may be\nre-used.  Note that DNS lookups will delay the time that a send takes place, at\nleast until the next tick.  The only way to know for sure that a send has taken place\nis to use the callback.\n\nIf the socket has not been previously bound with a call to `bind`, it's\nassigned a random port number and bound to the \"all interfaces\" address\n(0.0.0.0 for `udp4` sockets, ::0 for `udp6` sockets).\n-->\n\n<p>UDP ソケット用です。相手先のポートと IP アドレスは必ず指定しなければなりません。\n<code>address</code> パラメータに文字列を提供すると、それは DNS によって解決されます。\nDNS エラーと <code>buf</code> が再利用可能になった時のためにオプションのコールバックを指定することができます。\nDNS ルックアップは送信を少なくとも次の機会まで遅らせることに注意してください。\n送信が行われたことを確実に知る唯一の手段はコールバックを使うことです。\n\n</p>\n<p>ソケットが以前に <code>bind</code> の呼び出しによってバインドされていない場合は、\nランダムなポート番号が「全てのインタフェース」アドレスに対してバインドされます\n(<code>udp4</code> ソケットでは 0.0.0.0、<code>udp6</code> では ::0)。\n<!--\nExample of sending a UDP packet to a random port on `localhost`;\n-->\n\n</p>\n<p><code>localhost</code> の適当なポートに UDP パケットを送信する例;\n\n</p>\n<pre><code>var dgram = require(&apos;dgram&apos;);\nvar message = new Buffer(&quot;Some bytes&quot;);\nvar client = dgram.createSocket(&quot;udp4&quot;);\nclient.send(message, 0, message.length, 41234, &quot;localhost&quot;, function(err, bytes) {\n  client.close();\n});</code></pre>\n<!--\n**A Note about UDP datagram size**\n\nThe maximum size of an `IPv4/v6` datagram depends on the `MTU` (_Maximum Transmission Unit_)\nand on the `Payload Length` field size.\n\n- The `Payload Length` field is `16 bits` wide, which means that a normal payload\n  cannot be larger than 64K octets including internet header and data\n  (65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);\n  this is generally true for loopback interfaces, but such long datagrams\n  are impractical for most hosts and networks.\n\n- The `MTU` is the largest size a given link layer technology can support for datagrams.\n  For any link, `IPv4` mandates a minimum `MTU` of `68` octets, while the recommended `MTU`\n  for IPv4 is `576` (typically recommended as the `MTU` for dial-up type applications),\n  whether they arrive whole or in fragments.\n\n  For `IPv6`, the minimum `MTU` is `1280` octets, however, the mandatory minimum\n  fragment reassembly buffer size is `1500` octets.\n  The value of `68` octets is very small, since most current link layer technologies have\n  a minimum `MTU` of `1500` (like Ethernet).\n\nNote that it's impossible to know in advance the MTU of each link through which\na packet might travel, and that generally sending a datagram greater than\nthe (receiver) `MTU` won't work (the packet gets silently dropped, without\ninforming the source that the data did not reach its intended recipient).\n-->\n\n<p><strong>UDP データグラムのサイズについて</strong>\n\n</p>\n<p><code>IPv4/v6</code> データグラムの最大のサイズは <code>MTU</code> (<em>Maximum Transmission Unit</em>) と、\n<code>Payload Length</code> フィールドサイズに依存します。\n\n</p>\n<ul>\n<li><p><code>Payload Length</code> フィールドサイズは 16bit 長で、これは通常のペイロードが\nIP ヘッダとデータ含めて 64K オクテットより長くなれないことを意味します\n(65,507 バイト = 65,535 − 8 バイトの UDP ヘッダ − 20 バイトの IP ヘッダ);\nこれは一般的にループバックインタフェースでは正しいものの、\nほとんどのホストとネットワークにとって長大なデータグラムは\n現実的ではありません。</p>\n</li>\n<li><p><code>MTU</code> はリンク層により大きなサイズを与える技術で、\nデータグラムもサポートできます。\nどんなリンクでも、それらが全体として到着するか断片化されるかに関わらず、\n<code>IPv4</code> は最低 <code>69</code> オクテット必要で、推奨される <code>IPv4</code> の <code>MTU</code> は <code>576</code> です\n(典型的なダイヤルアップ型アプリケーションの <code>MUT</code> 推奨値)。</p>\n<p><code>IPv6</code> では最小の <code>MTU</code> は <code>1280</code> オクテットですが、フラグメントを再構築する\nバッファサイズは最低 <code>1500</code> オクテットが必要です。\n<code>68</code> オクテットはとても小さいので、もっとも現代的なリンク層技術では、\n最小の <code>MTU</code> は <code>1500</code> です (イーサネットと同じです)。</p>\n</li>\n</ul>\n<p>パケットが通過する各リンクの MTU をあらかじめ知ることは\nできないこと、(受信側の) <code>MTU</code> より大きなデータグラムを送信しても\n通常は動作しないことに注意してください\n(パケットは送り主に知らされることなく黙って捨てられ、\n意図した受信者に到達することはありません)。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "buf"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "length"
                    },
                    {
                      "name": "port"
                    },
                    {
                      "name": "address"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "dgram.bind(port, [address])",
              "type": "method",
              "name": "bind",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`port` Integer ",
                      "name": "port",
                      "desc": "Integer"
                    },
                    {
                      "textRaw": "`address` String, Optional ",
                      "name": "address",
                      "optional": true,
                      "desc": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "address",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nFor UDP sockets, listen for datagrams on a named `port` and optional `address`. If\n`address` is not specified, the OS will try to listen on all addresses.\n-->\n\n<p>UDP ソケット用です。<code>port</code> とオプションの <code>address</code> でデータグラムを待ち受けます。\n<code>address</code> が指定されなければ、OS は全てのアドレスからの待ち受けを試みます。\n\n</p>\n<!--\nExample of a UDP server listening on port 41234:\n-->\n\n<p>41234 番ポートを待ち受ける UDP サーバの例:\n\n</p>\n<pre><code>var dgram = require(&quot;dgram&quot;);\n\nvar server = dgram.createSocket(&quot;udp4&quot;);\n\nserver.on(&quot;message&quot;, function (msg, rinfo) {\n  console.log(&quot;server got: &quot; + msg + &quot; from &quot; +\n    rinfo.address + &quot;:&quot; + rinfo.port);\n});\n\nserver.on(&quot;listening&quot;, function () {\n  var address = server.address();\n  console.log(&quot;server listening &quot; +\n      address.address + &quot;:&quot; + address.port);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234</code></pre>\n"
            },
            {
              "textRaw": "dgram.close()",
              "type": "method",
              "name": "close",
              "desc": "<!--\nClose the underlying socket and stop listening for data on it.\n-->\n\n<p>下層のソケットをクローズし、データの待ち受けを終了します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "dgram.address()",
              "type": "method",
              "name": "address",
              "desc": "<!--\nReturns an object containing the address information for a socket.  For UDP sockets,\nthis object will contain `address` and `port`.\n-->\n\n<p>オブジェクトが持っているソケットのアドレス情報を返します。\nこのオブジェクトは <code>address</code> と <code>port</code> を持っています。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "dgram.setBroadcast(flag)",
              "type": "method",
              "name": "setBroadcast",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`flag` Boolean ",
                      "name": "flag",
                      "desc": "Boolean"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "flag"
                    }
                  ]
                }
              ],
              "desc": "<!--\nSets or clears the `SO_BROADCAST` socket option.  When this option is set, UDP packets\nmay be sent to a local interface's broadcast address.\n-->\n\n<p>ソケットのオプション <code>SO_BROADCAST</code> を設定またはクリアします。\nこのオプションが設定されると、UDP パケットはローカルインタフェースのブロードキャスト用アドレスに送信されます。\n\n</p>\n"
            },
            {
              "textRaw": "dgram.setTTL(ttl)",
              "type": "method",
              "name": "setTTL",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`ttl` Integer ",
                      "name": "ttl",
                      "desc": "Integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "ttl"
                    }
                  ]
                }
              ],
              "desc": "<!--\nSets the `IP_TTL` socket option.  TTL stands for \"Time to Live,\" but in this context it\nspecifies the number of IP hops that a packet is allowed to go through.  Each router or\ngateway that forwards a packet decrements the TTL.  If the TTL is decremented to 0 by a\nrouter, it will not be forwarded.  Changing TTL values is typically done for network\nprobes or when multicasting.\n-->\n\n<p>ソケットオプションの <code>IP_TTL</code> を設定します。\nTTL は「生存期間」を表しますが、このコンテキストではパケットが通過を許可される IP のホップ数を指定します。\n各ルータまたはゲートウェイはパケットを送出する際 TTL をデクリメントします。\nルータによって TTL がデクリメントされて 0 になるとそれは送出されません。\nTTL 値の変更は通常、ネットワークの調査やマルチキャストで使われます。\n\n</p>\n<!--\nThe argument to `setTTL()` is a number of hops between 1 and 255.  The default on most\nsystems is 64.\n-->\n\n<p><code>setTTL()</code> の引数は 1 から 255 のホップ数でです。ほとんどのシステムでデフォルトは 64 です。\n\n</p>\n"
            },
            {
              "textRaw": "dgram.setMulticastTTL(ttl)",
              "type": "method",
              "name": "setMulticastTTL",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`ttl` Integer ",
                      "name": "ttl",
                      "desc": "Integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "ttl"
                    }
                  ]
                }
              ],
              "desc": "<!--\nSets the `IP_MULTICAST_TTL` socket option.  TTL stands for \"Time to Live,\" but in this\ncontext it specifies the number of IP hops that a packet is allowed to go through,\nspecifically for multicast traffic.  Each router or gateway that forwards a packet\ndecrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\n\nThe argument to `setMulticastTTL()` is a number of hops between 0 and 255.  The default on most\nsystems is 64.\n-->\n\n<p><code>IP_MULTICAST_TTL</code> ソケットオプションを設定します。\nTTL は「生存期間」を表しますが、この文脈では特にマルチキャストのトラフィックにおいてパケットが通過できるIPホップの数を指定します。\nそれぞれのルーターまたはゲートウェイは、パケットを転送する際に TTL をデクリメントします。\nTTL がルーターによって 0 までデクリメントされると、それは転送されません。\n<code>setMulticastTTL()</code> の引数はホップを表す数値で、0 から 255 の間です。\nほとんどのシステムでデフォルトは 64 です。\n\n</p>\n"
            },
            {
              "textRaw": "dgram.setMulticastLoopback(flag)",
              "type": "method",
              "name": "setMulticastLoopback",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`flag` Boolean ",
                      "name": "flag",
                      "desc": "Boolean"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "flag"
                    }
                  ]
                }
              ],
              "desc": "<!--\nSets or clears the `IP_MULTICAST_LOOP` socket option.  When this option is set, multicast\npackets will also be received on the local interface.\n-->\n\n<p><code>IP_MULTICAST_LOOP</code> ソケットオプションを設定またはクリアします。\nこのオプションが設定されると、マルチキャストのパケットはローカルインタフェースでも受信できるようになります。\n\n</p>\n"
            },
            {
              "textRaw": "dgram.addMembership(multicastAddress, [multicastInterface])",
              "type": "method",
              "name": "addMembership",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`multicastAddress` String ",
                      "name": "multicastAddress",
                      "desc": "String"
                    },
                    {
                      "textRaw": "`multicastInterface` String, Optional ",
                      "name": "multicastInterface",
                      "optional": true,
                      "desc": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "multicastAddress"
                    },
                    {
                      "name": "multicastInterface",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nTells the kernel to join a multicast group with `IP_ADD_MEMBERSHIP` socket option.\n\nIf `multicastInterface` is not specified, the OS will try to add membership to all valid\ninterfaces.\n-->\n\n<p><code>IP_ADD_MEMBERSHIP</code> ソケットオプションを設定し、マルチキャストグループに参加することをカーネルに伝えます。\n\n</p>\n<p><code>multicastInterface</code> が指定されなかった場合は、全ての妥当なインタフェースをメンバーシップに加えようとします。\n\n</p>\n"
            },
            {
              "textRaw": "dgram.dropMembership(multicastAddress, [multicastInterface])",
              "type": "method",
              "name": "dropMembership",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`multicastAddress` String ",
                      "name": "multicastAddress",
                      "desc": "String"
                    },
                    {
                      "textRaw": "`multicastInterface` String, Optional ",
                      "name": "multicastInterface",
                      "optional": true,
                      "desc": "String"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "multicastAddress"
                    },
                    {
                      "name": "multicastInterface",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nOpposite of `addMembership` - tells the kernel to leave a multicast group with\n`IP_DROP_MEMBERSHIP` socket option. This is automatically called by the kernel\nwhen the socket is closed or process terminates, so most apps will never need to call\nthis.\n\nIf `multicastInterface` is not specified, the OS will try to drop membership to all valid\ninterfaces.\n-->\n\n<p><code>addMembership</code> の反対です - <code>IP_DROP_MEMBERSHIP</code> ソケットオプションによって、マルチキャストグループから抜けることをカーネルに伝えます。\nこれはソケットのクローズ時やプロセスの終了時にカーネルによって自動的に呼び出されるため、ほとんどのアプリケーションはこれを呼び出す必要がありません。\n\n</p>\n<p><code>multicastInterface</code> が指定されなかった場合は、全ての妥当なインタフェースをメンバーシップから削除しようとします。\n\n</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "dgram"
    },
    {
      "textRaw": "DNS",
      "name": "dns",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nUse `require('dns')` to access this module. All methods in the dns module\nuse C-Ares except for `dns.lookup` which uses `getaddrinfo(3)` in a thread\npool. C-Ares is much faster than `getaddrinfo` but the system resolver is\nmore constant with how other programs operate. When a user does\n`net.connect(80, 'google.com')` or `http.get({ host: 'google.com' })` the\n`dns.lookup` method is used. Users who need to do a large number of look ups\nquickly should use the methods that go through C-Ares.\n-->\n\n<p>このモジュールにアクセスするには <code>require(&apos;dns&apos;)</code> を使用します。\ndns モジュールの全てのメソッドは C-Ares を使用します。\nただし、<code>dns.lookup</code> はスレッドプール上で <code>getaddrinfo(3)</code> を使用します。\nC-Ares は <code>getaddrinfo</code> よりずっと速いものの、\n他のシステムと連携するにはシステムリゾルバの方が安定しています。\nユーザが <code>net.connect(80, &apos;google.com&apos;)</code> または\n<code>http.get({ host: &apos;google.com&apos; })</code> を行った時、<code>dns.lookup</code>\nメソッドが使われます。\n多数のルックアップを素早く実行したいユーザは、\nC-Ares を呼び出すメソッドを使用すべきです。\n\n</p>\n<!--\nHere is an example which resolves `'www.google.com'` then reverse\nresolves the IP addresses which are returned.\n-->\n\n<p>これは <code>&apos;www.google.com&apos;</code> を解決して、返された IP アドレスを逆引きで解決する例です。\n\n</p>\n<pre><code>var dns = require(&apos;dns&apos;);\n\ndns.resolve4(&apos;www.google.com&apos;, function (err, addresses) {\n  if (err) throw err;\n\n  console.log(&apos;addresses: &apos; + JSON.stringify(addresses));\n\n  addresses.forEach(function (a) {\n    dns.reverse(a, function (err, domains) {\n      if (err) {\n        console.log(&apos;reverse for &apos; + a + &apos; failed: &apos; +\n          err.message);\n      } else {\n        console.log(&apos;reverse for &apos; + a + &apos;: &apos; +\n          JSON.stringify(domains));\n      }\n    });\n  });\n});</code></pre>\n",
      "methods": [
        {
          "textRaw": "dns.lookup(domain, [family], callback)",
          "type": "method",
          "name": "lookup",
          "desc": "<!--\nResolves a domain (e.g. `'google.com'`) into the first found A (IPv4) or\nAAAA (IPv6) record.\nThe `family` can be the integer `4` or `6`. Defaults to `null` that indicates\nboth Ip v4 and v6 address family.\n-->\n\n<p>ドメイン (例 <code>&apos;google.com&apos;</code>) を解決して最初に見つかった\nA (IPv4) または AAAA (IPv6) レコードにします。\n<code>family</code> は整数の <code>4</code> または <code>6</code> を指定することができます。\nデフォルトは <code>null</code> で、IP v4 と v6 の両方をアドレスファミリーを意味します。\n\n</p>\n<!--\nThe callback has arguments `(err, address, family)`.  The `address` argument\nis a string representation of a IP v4 or v6 address. The `family` argument\nis either the integer 4 or 6 and denotes the family of `address` (not\nnecessarily the value initially passed to `lookup`).\n-->\n\n<p>コールバックは引数 <code>(err, address, family)</code> を持ちます。\n<code>address</code> 引数は IP v4 または v6 アドレスを表現する文字列です。\n<code>family</code> 引数は整数の 4 または 6 で、<code>address</code> のファミリーを意味します\n(この値は必ずしも最初に <code>lookup</code> に渡す必要はありません)。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "family",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolve(domain, [rrtype], callback)",
          "type": "method",
          "name": "resolve",
          "desc": "<!--\nResolves a domain (e.g. `'google.com'`) into an array of the record types\nspecified by rrtype. Valid rrtypes are `'A'` (IPV4 addresses, default),\n`'AAAA'` (IPV6 addresses), `'MX'` (mail exchange records), `'TXT'` (text\nrecords), `'SRV'` (SRV records), `'PTR'` (used for reverse IP lookups),\n`'NS'` (name server records) and `'CNAME'` (canonical name records).\n-->\n\n<p>ドメイン (例 <code>&apos;google.com&apos;</code>) を解決して <code>rrtype</code> で指定されたレコードタイプの配列にします。\n妥当な <code>rrtype</code> は <code>&apos;A&apos;</code> (IPV4アドレス)、<code>&apos;AAAA&apos;</code> (IPV6アドレス)、\n<code>&apos;MX&apos;</code> (mail exchangeレコード), <code>&apos;TXT&apos;</code> (テキストレコード)、\n<code>&apos;SRV&apos;</code> (SRVレコード)、<code>&apos;PTR&apos;</code> (IP を逆引きでルックアップするために使われる)、\n<code>&apos;NS&apos;</code> (ネームサーバレコード)、そして <code>&apos;CNAME&apos;</code> (別名レコード) です。\n\n</p>\n<!--\nThe callback has arguments `(err, addresses)`.  The type of each item\nin `addresses` is determined by the record type, and described in the\ndocumentation for the corresponding lookup methods below.\n-->\n\n<p>コールバックは引数 <code>(err, addresses)</code> を持ちます。\n<code>addresses</code> の各要素の種類はレコードの種類によって決まり、\n対応する後述のルックアップメソッドで記述されます。\n\n</p>\n<!--\nOn error, `err` would be an instanceof `Error` object, where `err.errno` is\none of the error codes listed below and `err.message` is a string describing\nthe error in English.\n-->\n\n<p>エラー発生時、<code>err</code> は <code>Error</code> オブジェクトのインスタンスであり、\n<code>err.errno</code> は後述するエラーコードのいずれか、\n<code>err.message</code> はエラーを英語で説明する文字列となります。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "rrtype",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolve4(domain, callback)",
          "type": "method",
          "name": "resolve4",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for IPv4 queries (`A` records).\n`addresses` is an array of IPv4 addresses (e.g.\n`['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、IPv4 アドレス (<code>A</code> レコード) だけを問い合わせます。\n<code>addresses</code> は IPv4 アドレスの配列です (例<br />\n<code>[&apos;74.125.79.104&apos;, &apos;74.125.79.105&apos;, &apos;74.125.79.106&apos;]</code>)\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolve6(domain, callback)",
          "type": "method",
          "name": "resolve6",
          "desc": "<!--\nThe same as `dns.resolve4()` except for IPv6 queries (an `AAAA` query).\n-->\n\n<p>IPv6 (<code>AAAA</code> レコード) を問い合わせることを除いて <code>dns.resolve4()</code> と同じです。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveMx(domain, callback)",
          "type": "method",
          "name": "resolveMx",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for mail exchange queries (`MX` records).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、mail exchange (<code>MX</code> レコード) だけを問い合わせます。\n\n</p>\n<!--\n`addresses` is an array of MX records, each with a priority and an exchange\nattribute (e.g. `[{'priority': 10, 'exchange': 'mx.example.com'},...]`).\n-->\n\n<p><code>addresses</code> は MX レコードの配列で、それぞれは priority と exchange の属性を持ちます\n(例 <code>[{&apos;priority&apos;: 10, &apos;exchange&apos;: &apos;mx.example.com&apos;},...]</code>)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveTxt(domain, callback)",
          "type": "method",
          "name": "resolveTxt",
          "The same as `dns.resolve()`, but only for text queries (`TXT` records).\n`addresses` is an array of the text records available for `domain` (e.g.,\n`['v": "spf1 ip4:0.0.0.0 ~all']`).",
          "desc": "<p><code>dns.resolve()</code> と同じですが、テキスト (<code>TXT</code> レコード) だけを問い合わせます。\n<code>addresses</code> は <code>domain</code> で利用可能なテキストレコードの配列です。\n(例、<code>[&apos;v=spf1 ip4:0.0.0.0 ~all&apos;]</code>)\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveSrv(domain, callback)",
          "type": "method",
          "name": "resolveSrv",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for service records (`SRV` records).\n`addresses` is an array of the SRV records available for `domain`. Properties\nof SRV records are priority, weight, port, and name (e.g.,\n`[{'priority': 10, {'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、サービスレコード (<code>SRV</code> レコード) だけを問い合わせます。\n<code>addresses</code> は <code>domain</code> で利用可能な SRV レコードの配列です。\nSRV レコードのプロパティは priority、weight、port、そして name です\n(例 <code>[{&apos;priority&apos;: 10, {&apos;weight&apos;: 5, &apos;port&apos;: 21223, &apos;name&apos;: &apos;service.example.com&apos;}, ...]</code>)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.reverse(ip, callback)",
          "type": "method",
          "name": "reverse",
          "desc": "<!--\nReverse resolves an ip address to an array of domain names.\n-->\n\n<p>IP アドレスからドメイン名の配列へ逆引きで解決します。\n\n</p>\n<!--\nThe callback has arguments `(err, domains)`.\n-->\n\n<p>コールバックは引数 <code>(err, domains)</code> を持ちます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "ip"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveNs(domain, callback)",
          "type": "method",
          "name": "resolveNs",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for name server records (`NS` records).\n`addresses` is an array of the name server records available for `domain`\n(e.g., `['ns1.example.com', 'ns2.example.com']`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、ネームサーバレコード (<code>NS</code> レコード) \nだけを問い合わせます。\n<code>address</code> は <code>domain</code> で利用可能なネームサーバレコードの配列です\n(例 <code>[&apos;ns1.example.com&apos;, &apos;ns2.example.com&apos;]</code>)。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "dns.resolveCname(domain, callback)",
          "type": "method",
          "name": "resolveCname",
          "desc": "<!--\nThe same as `dns.resolve()`, but only for canonical name records (`CNAME`\nrecords). `addresses` is an array of the canonical name records available for\n`domain` (e.g., `['bar.example.com']`).\n-->\n\n<p><code>dns.resolve()</code> と同じですが、別名レコード (<code>CNAME</code> レコード) \nだけを問い合わせます。\n<code>address</code> は <code>domain</code> で利用可能な別名レコードの配列です\n<code>domain</code> (e.g., <code>[&apos;bar.example.com&apos;]</code>)。\n\n</p>\n<!--\nIf there an an error, `err` will be non-null and an instanceof the Error\nobject.\n-->\n\n<p>エラーがあった場合、<code>err</code> は非 null で Error オブジェクトのインスタンスとなります。\n\n</p>\n<!--\nEach DNS query can return an error code.\n-->\n\n<p>どの DNS 問い合わせもエラーコードを返せます。\n\n</p>\n<!--\n- `dns.TEMPFAIL`: timeout, SERVFAIL or similar.\n- `dns.PROTOCOL`: got garbled reply.\n- `dns.NXDOMAIN`: domain does not exists.\n- `dns.NODATA`: domain exists but no data of reqd type.\n- `dns.NOMEM`: out of memory while processing.\n- `dns.BADQUERY`: the query is malformed.\n-->\n\n<ul>\n<li><code>dns.TEMPFAIL</code>: タイムアウト、SERVFAIL あるいは同様のもの。</li>\n<li><code>dns.PROTOCOL</code>: 応答が不正。</li>\n<li><code>dns.NXDOMAIN</code>: ドメインが存在しない。</li>\n<li><code>dns.NODATA</code>: ドメインは存在するが、要求された種類のデータがない。</li>\n<li><code>dns.NOMEM</code>: 処理中にメモリが不足。</li>\n<li><code>dns.BADQUERY</code>: 問い合わせが不正な形式。</li>\n</ul>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "DNS"
    },
    {
      "textRaw": "HTTP",
      "name": "http",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nTo use the HTTP server and client one must `require('http')`.\n-->\n\n<p>HTTP サーバおよびクライアントを使用するにはいずれも <code>require(&apos;http&apos;)</code> が必要です。\n\n</p>\n<!--\nThe HTTP interfaces in Node are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.\n-->\n\n<p>Node の HTTP インタフェースは、\n伝統的に扱いが難しかったプロトコルの多くの機能をサポートするように設計されています。\nとりわけ大きくて、場合によってはチャンク化されたメッセージです。\nインタフェースは決してリクエストまたはレスポンス全体をバッファリングしないように気をつけています\n－ 利用者はストリームデータを使うことができます。\n\n</p>\n<!--\nHTTP message headers are represented by an object like this:\n-->\n\n<p>HTTP メッセージヘッダはこのようなオブジェクトとして表現されます:\n\n</p>\n<pre><code>{ &apos;content-length&apos;: &apos;123&apos;,\n  &apos;content-type&apos;: &apos;text/plain&apos;,\n  &apos;connection&apos;: &apos;keep-alive&apos;,\n  &apos;accept&apos;: &apos;*/*&apos; }</code></pre>\n<!--\nKeys are lowercased. Values are not modified.\n-->\n\n<p>キーは小文字化されます。値は変更されません。\n\n</p>\n<!--\nIn order to support the full spectrum of possible HTTP applications, Node's\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.\n-->\n\n<p>考えられる HTTP アプリケーションを完全にサポートするために、\nNode の HTTP API はとても低水準です。それはストリームのハンドリングとメッセージの解析だけに対処します。\n解析はメッセージをヘッダとボディに分けますが、実際のヘッダとボディは解析しません。\n\n\n</p>\n",
      "methods": [
        {
          "textRaw": "http.createServer([requestListener])",
          "type": "method",
          "name": "createServer",
          "desc": "<!--\nReturns a new web server object.\n-->\n\n<p>新しい Web サーバオブジェクトを返します。\n\n</p>\n<!--\nThe `requestListener` is a function which is automatically\nadded to the `'request'` event.\n-->\n\n<p><code>requestListener</code> は自動的に <code>&apos;request&apos;</code> イベントに加えられる関数です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "requestListener",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "http.request(options, callback)",
          "type": "method",
          "name": "request",
          "desc": "<!--\nNode maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.  `options` align\nwith [url.parse()](url.html#url.parse).\n-->\n\n<p>Node は HTTP リクエストを行うために、サーバごとにいくつかのコネクションを保持します。\nこの関数はその一つを使って透過的にリクエストを発行できるようにします。\n\n</p>\n<!--\nOptions:\n-->\n\n<p>オプション:\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n  Defaults to `'localhost'`.\n- `hostname`: To support `url.parse()` `hostname` is preferred over `host`\n- `port`: Port of remote server. Defaults to 80.\n- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)\n- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.\n- `path`: Request path. Defaults to `'/'`. Should include query string if any.\n  E.G. `'/index.html?page=12'`\n- `headers`: An object containing request headers.\n- `auth`: Basic authentication i.e. `'user:password'` to compute an\n  Authorization header.\n- `agent`: Controls [Agent](#http.Agent) behavior. When an Agent is used\n  request will default to `Connection: keep-alive`. Possible values:\n - `undefined` (default): use [global Agent](#http.globalAgent) for this host\n   and port.\n - `Agent` object: explicitly use the passed in `Agent`.\n - `false`: opts out of connection pooling with an Agent, defaults request to\n   `Connection: close`.\n-->\n\n<ul>\n<li><code>host</code>: リクエストを発行するサーバのドメイン名または IP アドレス。</li>\n<li><code>hostname</code>: <code>url.parse()</code> サポート。<code>hostname</code> は <code>host</code> を上書きします。</li>\n<li><code>port</code>: リモートサーバのポート。デフォルトは 80 です。</li>\n<li><code>socketPath</code>: Unix ドメインソケット (host:port または socketPath のどちらか)</li>\n<li><code>method</code>: HTTP リクエストのメソッドの文字列。デフォルトは <code>&apos;GET&apos;</code> です。</li>\n<li><code>path</code>: リクエストのパス。デフォルトは <code>&apos;/&apos;</code> です。\n必要なら問い合わせ文字列を含めるべきです．\n例 <code>&apos;/index.html?page=12&apos;</code></li>\n<li><code>headers</code>: リクエストヘッダを含むオブジェクト。</li>\n<li><code>auth</code>: ベーシック認証すなわち Authorization ヘッダのための\n<code>&apos;user:password&apos;</code>。</li>\n<li><code>agent</code>: <code>Agent</code> の振る舞いを制御します。\nエージェントが使われる場合、Connection:keep-alive がデフォルトになります。\n可能な値は:<ul>\n<li><code>undefined</code> (デフォルト): ホストとポートで\n<a href=\"#http.globalAgent\">グローバル Agent</a> を使用します。</li>\n<li><code>Agent</code> オブジェクト: 明示的に渡された <code>Agent</code> を使用します。</li>\n<li><code>false</code>: Agent によるコネクションプーリングを使用しません。\n Connection:close の場合のデフォルトです。</li>\n</ul>\n</li>\n</ul>\n<!--\n`http.request()` returns an instance of the `http.ClientRequest`\nclass. The `ClientRequest` instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the `ClientRequest` object.\n-->\n\n<p><code>http.request()</code> は <code>http.ClientRequest</code> クラスのインスタンスを返します。\n<code>http.ClientRequest</code> のインスタンスは書き込み可能なストリームです。\nもし POST リクエストでファイルのアップロードがしたければ、\n<code>http.ClientRequest</code> オブジェクトに出力してください。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var options = {\n  host: &apos;www.google.com&apos;,\n  port: 80,\n  path: &apos;/upload&apos;,\n  method: &apos;POST&apos;\n};\n\nvar req = http.request(options, function(res) {\n  console.log(&apos;STATUS: &apos; + res.statusCode);\n  console.log(&apos;HEADERS: &apos; + JSON.stringify(res.headers));\n  res.setEncoding(&apos;utf8&apos;);\n  res.on(&apos;data&apos;, function (chunk) {\n    console.log(&apos;BODY: &apos; + chunk);\n  });\n});\n\nreq.on(&apos;error&apos;, function(e) {\n  console.log(&apos;problem with request: &apos; + e.message);\n});\n\n// write data to request body\nreq.write(&apos;data\\n&apos;);\nreq.write(&apos;data\\n&apos;);\nreq.end();</code></pre>\n<!--\nNote that in the example `req.end()` was called. With `http.request()` one\nmust always call `req.end()` to signify that you're done with the request -\neven if there is no data being written to the request body.\n-->\n\n<p>この例で <code>req.end()</code> が呼ばれていることに注意してください。\n<code>http.request()</code> では、リクエストが終了したことを示すために、\n常に <code>req.end()</code> を呼び出さなければなりません\n- リクエストのボディに出力するデータがなかったとしても。\n\n</p>\n<!--\nIf any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an `'error'` event is emitted\non the returned request object.\n-->\n\n<p>リクエスト中に何らかのエラー (DNS 解決、TCP レベルのエラー、HTTP パースエラーなど) が発生すると、戻り値のリクエストオブジェクトで <code>&apos;error&apos;</code> イベントが生成されます。\n\n\n</p>\n<!--\nThere are a few special headers that should be noted.\n-->\n\n<p>いくつかの特別なヘッダに注意が必要です。\n\n</p>\n<!--\n* Sending a 'Connection: keep-alive' will notify Node that the connection to\n  the server should be persisted until the next request.\n\n* Sending a 'Content-length' header will disable the default chunked encoding.\n\n* Sending an 'Expect' header will immediately send the request headers.\n  Usually, when sending 'Expect: 100-continue', you should both set a timeout\n  and listen for the `continue` event. See RFC2616 Section 8.2.3 for more\n  information.\n\n* Sending an Authorization header will override using the `auth` option\n  to compute basic authentication.\n-->\n\n<ul>\n<li><p>&apos;Connection: keep-alive&apos; の送信は、サーバへのコネクションを次のリクエストまで持続することを Node に通知します。</p>\n</li>\n<li><p>&apos;Content-length&apos; ヘッダの送信は、デフォルトのチャンクエンコーディングを無効にします。</p>\n</li>\n<li><p>&apos;Expect&apos; ヘッダの送信は、リクエストヘッダを即時に送信します。\n通常、&apos;Expect: 100-continue&apos; を送信すると、タイムアウトと <code>continue</code> イベントを待ち受けます。詳細は RFC2616 の 8.2.3 節を参照してください。</p>\n</li>\n<li><p>Authorization ヘッダの送信は、<code>auth</code> オプションによるベーシック認証を\n上書きします。</p>\n</li>\n</ul>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "http.get(options, callback)",
          "type": "method",
          "name": "get",
          "desc": "<!--\nSince most requests are GET requests without bodies, Node provides this\nconvenience method. The only difference between this method and `http.request()` is\nthat it sets the method to GET and calls `req.end()` automatically.\n-->\n\n<p>ほとんどのリクエストは本文のない GET リクエストであるため、\nNode は便利なメソッドを提供します。\nこのメソッドと <code>http.request()</code> の間の違いは、メソッドを GET に設定して <code>req.end()</code> を自動的に呼び出すことだけです。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var options = {\n  host: &apos;www.google.com&apos;,\n  port: 80,\n  path: &apos;/index.html&apos;\n};\n\nhttp.get(options, function(res) {\n  console.log(&quot;Got response: &quot; + res.statusCode);\n}).on(&apos;error&apos;, function(e) {\n  console.log(&quot;Got error: &quot; + e.message);\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: http.Server",
          "type": "class",
          "name": "http.Server",
          "desc": "<!--\nThis is an `EventEmitter` with the following events:\n-->\n\n<p>これは以下のイベントを持つ <code>EventEmitter</code> です:\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'request'",
              "type": "event",
              "name": "request",
              "desc": "<p><code>function (request, response) { }</code>\n\n</p>\n<!--\nEmitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of keep-alive connections).\n-->\n\n<p>リクエストの度に生成されます。\nコネクションごとに複数のリクエストがあるかもしれないことに注意してください\n(Keep Alive なコネクションの場合)。\n\n</p>\n<!--\n `request` is an instance of `http.ServerRequest` and `response` is\n an instance of `http.ServerResponse`\n-->\n\n<p><code>request</code> は <code>http.ServerRequest</code> のインスタンス、\n<code>response</code> は <code>http.ServerResponse</code> のインスタンスです。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connection'",
              "type": "event",
              "name": "connection",
              "desc": "<p><code>function (socket) { }</code>\n\n</p>\n<!--\n When a new TCP stream is established. `socket` is an object of type\n `net.Socket`. Usually users will not want to access this event. The\n `socket` can also be accessed at `request.connection`.\n-->\n\n<p>新しい TCP ストリームが確立した時。\n<code>socket</code> は <code>net.Socket</code> 型のオブジェクトです。\n通常の利用者がこのイベントにアクセスしたくなることはないでしょう。\n<code>socket</code> は <code>request.connection</code> からアクセスすることもできます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\n Emitted when the server closes.\n-->\n\n<p>サーバがクローズした時に生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'checkContinue'",
              "type": "event",
              "name": "checkContinue",
              "desc": "<p><code>function (request, response) { }</code>\n\n</p>\n<!--\nEmitted each time a request with an http Expect: 100-continue is received.\nIf this event isn't listened for, the server will automatically respond\nwith a 100 Continue as appropriate.\n-->\n\n<p>httpの Expect: 100-continue リクエストを受信する度に生成されます。\nこのイベントが監視されない場合、サーバは自動的に 100 Continue を応答します。\n\n</p>\n<!--\nHandling this event involves calling `response.writeContinue` if the client\nshould continue to send the request body, or generating an appropriate HTTP\nresponse (e.g., 400 Bad Request) if the client should not continue to send the\nrequest body.\n-->\n\n<p>このイベントを処理する場合、クライアントがリクエストボディを送信し続けるべきなら\n<code>response.writeContinue</code> を呼び出す必要があります。\nあるいは、クライアントがリクエストボディを送信し続けるべきでないなら、\n適切な HTTP レスポンス (例えば 400 Bad Request) を生成します。\n\n</p>\n<!--\nNote that when this event is emitted and handled, the `request` event will\nnot be emitted.\n-->\n\n<p>このイベントが生成されて処理された場合、<code>request</code>イベントは生成されないことに注意してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'upgrade'",
              "type": "event",
              "name": "upgrade",
              "desc": "<p><code>function (request, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a client requests a http upgrade. If this event isn't\nlistened for, then clients requesting an upgrade will have their connections\nclosed.\n-->\n\n<p>クライアントが HTTP のアップグレードを要求する度に生成されます。\nこのイベントが監視されない場合、アップグレードを要求したクライアントのコネクションはクローズされます。\n\n</p>\n<!--\n* `request` is the arguments for the http request, as it is in the request event.\n* `socket` is the network socket between the server and client.\n* `head` is an instance of Buffer, the first packet of the upgraded stream, this may be empty.\n-->\n\n<ul>\n<li><code>request</code> はリクエストイベントと同様に HTTP リクエストへの引数です。</li>\n<li><code>socket</code> はサーバとクライアントの間のネットワークソケットです。</li>\n<li><code>head</code> はアップグレードストリームの最初のパケットを持つ Buffer のインスタンスです。\n空の場合もあります。</li>\n</ul>\n<!--\nAfter this event is emitted, the request's socket will not have a `data`\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.\n-->\n\n<p>このイベントが生成された後、リクエスト元のソケットはもう <code>data</code> イベントリスナーを持ちません。\nこのソケットでサーバへ送られたデータを扱うためにそれをバインドしなければならないことを意味します。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'clientError'",
              "type": "event",
              "name": "clientError",
              "desc": "<p><code>function (exception) { }</code>\n\n</p>\n<!--\nIf a client connection emits an 'error' event - it will forwarded here.\n-->\n\n<p>クライアントコネクションが &apos;error&apos; イベントを発した場合 － ここに転送されます。\n\n</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "server.listen(port, [hostname], [callback])",
              "type": "method",
              "name": "listen",
              "desc": "<!--\nBegin accepting connections on the specified port and hostname.  If the\nhostname is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`).\n-->\n\n<p>指定されたポートとホスト名でコネクションの受け入れを開始します。\nホスト名が省略されると、サーバはどんな IPv4 アドレスへの接続も受け入れます (<code>INADDR_ANY</code>)。\n\n</p>\n<!--\nTo listen to a unix socket, supply a filename instead of port and hostname.\n-->\n\n<p>UNIX ドメインソケットを待ち受ける場合、ポートとホスト名ではなくファイル名を提供します。\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'](net.html#event_listening_) event.\nSee also [net.Server.listen()](net.html#server.listen).\n-->\n\n<p>この関数は非同期です。最後の引数の <code>callback</code> は\n<a href=\"net.html#event_listening_\">&apos;listening&apos;</a> イベントのリスナとして加えられます。\n詳細は <a href=\"net.html#server.listen\">net.Server.listen()</a> を参照してください。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "hostname",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.listen(path, [callback])",
              "type": "method",
              "name": "listen",
              "desc": "<!--\nStart a UNIX socket server listening for connections on the given `path`.\n-->\n\n<p><code>path</code> で与えられたコネクションを待ち受ける UNIX ドメインソケットのサーバを開始します。\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'](net.html#event_listening_) event.\nSee also [net.Server.listen()](net.html#server.listen).\n-->\n\n<p>この関数は非同期です。最後の引数の <code>callback</code> は\n<a href=\"net.html#event_listening_\">&apos;listening&apos;</a> イベントのリスナとして加えられます。\n詳細は <a href=\"net.html#server.listen\">net.Server.listen()</a> を参照してください。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "server.close()",
              "type": "method",
              "name": "close",
              "desc": "<!--\nStops the server from accepting new connections.\nSee [net.Server.close()](net.html#server.close).\n-->\n\n<p>サーバが新しいコネクションを受け付けるのを終了します。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: http.ServerRequest",
          "type": "class",
          "name": "http.ServerRequest",
          "desc": "<!--\nThis object is created internally by a HTTP server -- not by\nthe user -- and passed as the first argument to a `'request'` listener.\n-->\n\n<p>このオブジェクトは HTTP サーバ内部 － ユーザではなく － で作成され、\n<code>&apos;request&apos;</code> リスナーの第1引数として渡されます。\n\n</p>\n<!--\nThe request implements the [Readable Stream](stream.html#readable_stream)\ninterface. This is an `EventEmitter` with the following events:\n-->\n\n<p>リクエストは <a href=\"stream.html#readable_Stream\">Readable Stream</a>\nインタフェースを実装します。\nこれは以下のイベントを持つ <code>EventEmitter</code> です:\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'data'",
              "type": "event",
              "name": "data",
              "desc": "<p><code>function (chunk) { }</code>\n\n</p>\n<!--\nEmitted when a piece of the message body is received. The chunk is a string if\nan encoding has been set with `request.setEncoding()`, otherwise it's a\n[Buffer](buffer.html).\n-->\n\n<p>メッセージボディの断片を受信した場合に生成されます。\n<code>request.setEncoding()</code> によってエンコーディングが設定された場合、\n<code>chunk</code> は文字列です。それ以外の場合は <a href=\"buffer.html\">Buffer</a> です。\n\n</p>\n<!--\nExample: A chunk of the body is given as the single\nargument. The transfer-encoding has been decoded.  The\nbody chunk is a string.  The body encoding is set with\n`request.setEncoding()`.\n\nNote that the __data will be lost__ if there is no listener when a\n`ServerRequest` emits a `'data'` event.\n-->\n\n<p>例: 一つの引数としてボディのチャンクが与えられます。\n転送エンコーディングでデコードされます。\nボディのチャンクは文字列です。\nボディのエンコーディングは <code>request.setBodyEncoding()</code> で設定されます。\n\n</p>\n<p><code>ServerRequest</code> が <code>&apos;data&apos;</code> イベントを生成した時にリスナが存在しなければ、\n<strong>データは失われる</strong>ことに注意してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'end'",
              "type": "event",
              "name": "end",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted exactly once for each request. After that, no more `'data'` events\nwill be emitted on the request.\n-->\n\n<p>リクエストごとに厳密に一回生成されます。\nその後、このリクエストで <code>&apos;data&apos;</code> イベントが生成されることはありません。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nIndicates that the underlaying connection was terminated before\n`response.end()` was called or able to flush.\n-->\n\n<p><code>response.end()</code> が呼び出されたりフラッシュされる前に、\n下層の接続が切断されたことを示します。\n\n</p>\n<!--\nJust like `'end'`, this event occurs only once per request, and no more `'data'`\nevents will fire afterwards.\n-->\n\n<p><code>&apos;end&apos;</code> と同様、このイベントはリクエスト上で一度だけ発生し、その後ではもう\n<code>&apos;data&apos;</code> イベントが発生することはありません。\n\n</p>\n<!--\nNote: `'close'` can fire after `'end'`, but not vice versa.\n-->\n\n<p>注意: <code>&apos;close&apos;</code> は <code>&apos;end&apos;</code> の後で発生することがあります。\nその逆もあります。\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "request.method",
              "name": "method",
              "desc": "<!--\nThe request method as a string. Read only. Example:\n`'GET'`, `'DELETE'`.\n-->\n\n<p>リクエストメソッドを表す文字列です。参照のみ可能です。\n例: <code>&apos;GET&apos;</code>、<code>&apos;DELETE&apos;</code>\n\n\n</p>\n"
            },
            {
              "textRaw": "request.url",
              "name": "url",
              "desc": "<!--\nRequest URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:\n-->\n\n<p>リクエスト URL を表す文字列です。\nこれは実際の HTTP リクエストに存在する URL だけを含みます。\nリクエストがこうなら:\n\n</p>\n<pre><code>GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n</code></pre>\n<!--\nThen `request.url` will be:\n-->\n\n<p>この場合の <code>request.url</code> はこうなります:\n\n</p>\n<pre><code>&apos;/status?name=ryan&apos;</code></pre>\n<!--\nIf you would like to parse the URL into its parts, you can use\n`require('url').parse(request.url)`.  Example:\n-->\n\n<p>URL の要素を解析したい場合は、\n<code>require(&apos;url&apos;).parse(request.url)</code> を参照してください。例:\n\n</p>\n<pre><code>node&gt; require(&apos;url&apos;).parse(&apos;/status?name=ryan&apos;)\n{ href: &apos;/status?name=ryan&apos;,\n  search: &apos;?name=ryan&apos;,\n  query: &apos;name=ryan&apos;,\n  pathname: &apos;/status&apos; }</code></pre>\n<!--\nIf you would like to extract the params from the query string,\nyou can use the `require('querystring').parse` function, or pass\n`true` as the second argument to `require('url').parse`.  Example:\n-->\n\n<p>問い合わせ文字列からパラメータを取り出したい場合は、\n<code>require(&apos;querystring&apos;).parse</code> 関数を参照するか、\n<code>require(&apos;url&apos;).parse</code> の第 2 引数に <code>true</code> を渡してください。例:\n\n</p>\n<pre><code>node&gt; require(&apos;url&apos;).parse(&apos;/status?name=ryan&apos;, true)\n{ href: &apos;/status?name=ryan&apos;,\n  search: &apos;?name=ryan&apos;,\n  query: { name: &apos;ryan&apos; },\n  pathname: &apos;/status&apos; }</code></pre>\n"
            },
            {
              "textRaw": "request.headers",
              "name": "headers",
              "desc": "<!--\nRead only.\n-->\n\n<p>参照のみ可能です。\n\n</p>\n"
            },
            {
              "textRaw": "request.trailers",
              "name": "trailers",
              "desc": "<!--\nRead only; HTTP trailers (if present). Only populated after the 'end' event.\n-->\n\n<p>参照のみ可能です; HTTP のトレーラです (もしあれば)。&apos;end&apos; イベントの後にだけ発生します。\n\n</p>\n"
            },
            {
              "textRaw": "request.httpVersion",
              "name": "httpVersion",
              "desc": "<!--\nThe HTTP protocol version as a string. Read only. Examples:\n`'1.1'`, `'1.0'`.\nAlso `request.httpVersionMajor` is the first integer and\n`request.httpVersionMinor` is the second.\n-->\n\n<p>HTTP プロトコルのバージョンを表す文字列です。参照のみ可能です。例:\n<code>&apos;1.1&apos;</code>、<code>&apos;1.0&apos;</code>。\n同様に <code>request.httpVersionMajor</code> は最初の整数、\n<code>request.httpVersionMinor</code> は 2 番目の整数です。\n\n\n</p>\n"
            },
            {
              "textRaw": "request.connection",
              "name": "connection",
              "desc": "<!--\nThe `net.Socket` object associated with the connection.\n-->\n\n<p>コネクションに関連づけられた <code>net.Socket</code> オブジェクトです。\n\n\n</p>\n<!--\nWith HTTPS support, use request.connection.verifyPeer() and\nrequest.connection.getPeerCertificate() to obtain the client's\nauthentication details.\n-->\n\n<p>HTTPS では <code>request.connection.verifyPeer()</code> と\n<code>request.connection.getPeerCertificate()</code> で\nクライアントの認証の詳細を取得できます。\n\n\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "request.setEncoding([encoding])",
              "type": "method",
              "name": "setEncoding",
              "desc": "<!--\nSet the encoding for the request body. Either `'utf8'` or `'binary'`. Defaults\nto `null`, which means that the `'data'` event will emit a `Buffer` object..\n-->\n\n<p>リクエストボディのエンコーディングを設定します。\n<code>&apos;utf8&apos;</code> または <code>&apos;binary&apos;</code> のいずれかです。\nデフォルトは <code>null</code> で、<code>&apos;data&apos;</code> イベントが\n<code>Buffer</code> を生成することを意味します。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.pause()",
              "type": "method",
              "name": "pause",
              "desc": "<!--\nPauses request from emitting events.  Useful to throttle back an upload.\n-->\n\n<p>リクエストによるイベントの生成を中断します。アップロード速度を落とすのに便利です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "request.resume()",
              "type": "method",
              "name": "resume",
              "desc": "<!--\nResumes a paused request.\n-->\n\n<p>中断されたリクエストを再開します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: http.ServerResponse",
          "type": "class",
          "name": "http.ServerResponse",
          "desc": "<!--\nThis object is created internally by a HTTP server--not by the user. It is\npassed as the second parameter to the `'request'` event.\n\nThe response implements the [Writable  Stream](stream.html#writable_stream)\ninterface. This is an `EventEmitter` with the following events:\n-->\n\n<p>このオブジェクトは HTTP サーバ内部 － ユーザではなく － で作成されます。\n<code>&apos;request&apos;</code> リスナーの第 2 引数として渡されます。\n\n</p>\n<p>レスポンスは <a href=\"stream.html#writable_Stream\">Writable  Stream</a>\nインタフェースを実装します。\nこれは以下のイベントを持つ <code>EventEmitter</code> です:\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nIndicates that the underlaying connection was terminated before\n`response.end()` was called or able to flush.\n-->\n\n<p><code>response.end()</code> が呼び出されたりフラッシュされる前に、\n下層の接続が切断されたことを示します。\n\n</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "response.writeContinue()",
              "type": "method",
              "name": "writeContinue",
              "desc": "<!--\nSends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the [checkContinue](#event_checkContinue_) event on\n`Server`.\n-->\n\n<p>HTTP/1.1 の 100 Continue メッセージをクライアントに送信し、\nリクエストボディを送信してもよいことを示します。\n<code>Server</code>の <a href=\"#event_checkContinue_\">checkContinue</a> イベントを参照してください。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "response.writeHead(statusCode, [reasonPhrase], [headers])",
              "type": "method",
              "name": "writeHead",
              "desc": "<!--\nSends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like `404`. The last argument, `headers`, are the response headers.\nOptionally one can give a human-readable `reasonPhrase` as the second\nargument.\n-->\n\n<p>レスポンスヘッダを送信します。\nステータスコードは <code>404</code> のような 3 桁の数字による HTTP ステータスコードです。\n最後の引数 <code>headers</code> は、レスポンスヘッダです。\nオプションとして人に読める形式の <code>reasonPhrase</code> を第 2 引数で与えることができます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var body = &apos;hello world&apos;;\nresponse.writeHead(200, {\n  &apos;Content-Length&apos;: body.length,\n  &apos;Content-Type&apos;: &apos;text/plain&apos; });</code></pre>\n<!--\nThis method must only be called once on a message and it must\nbe called before `response.end()` is called.\n\nIf you call `response.write()` or `response.end()` before calling this, the\nimplicit/mutable headers will be calculated and call this function for you.\n-->\n\n<p>このメソッドはメッセージごとに 1 回だけ呼び出されなくてはならず、\n<code>response.end()</code> の前に呼び出されなければなりません。\n\n</p>\n<p>もしこのメソッドが呼び出される前に <code>response.write()</code> または <code>response.end()</code> が呼ばれると、暗黙的で可変のヘッダが算出されてこの関数が呼び出されます。\n\n</p>\n<!--\nNote: that Content-Length is given in bytes not characters. The above example\nworks because the string `'hello world'` contains only single byte characters.\nIf the body contains higher coded characters then `Buffer.byteLength()`\nshould be used to determine the number of bytes in a given encoding.\nAnd Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n-->\n\n<p>注意: <code>Content-Length</code> は文字数ではなくバイト数で与えられます。\n上の例が動作するのは <code>&apos;hello world&apos;</code> という文字列が単一バイト文字だけを含むためです。\nもしボディがより上位にコード化された文字を含む場合は、\n指定したエンコーディングによるバイト数を得るために <code>Buffer.byteLength()</code> を使うべきです。\nNode は、Content-Length と実際に送信されたレスポンスボディの長さが等しいかどうかチェックしません。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "statusCode"
                    },
                    {
                      "name": "reasonPhrase",
                      "optional": true
                    },
                    {
                      "name": "headers",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.setHeader(name, value)",
              "type": "method",
              "name": "setHeader",
              "desc": "<!--\nSets a single header value for implicit headers.  If this header already exists\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\nhere if you need to send multiple headers with the same name.\n-->\n\n<p>暗黙的ヘッダのヘッダ値を設定します。\n送信されようとしているレスポンスヘッダにこのヘッダが既に含まれている場合、\nその値は置き換えられます。\n同じ名前で複数のヘッダを送信したい場合は文字列の配列を使ってください。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>response.setHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);</code></pre>\n<p>or\n\n</p>\n<pre><code>response.setHeader(&quot;Set-Cookie&quot;, [&quot;type=ninja&quot;, &quot;language=javascript&quot;]);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "value"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.getHeader(name)",
              "type": "method",
              "name": "getHeader",
              "desc": "<!--\nReads out a header that's already been queued but not sent to the client.  Note\nthat the name is case insensitive.  This can only be called before headers get\nimplicitly flushed.\n-->\n\n<p>すでにキューに入れられているが未送信のヘッダを読み上げます．\n名前は大文字小文字を区別しないことに注意してください。\nこれはヘッダが暗黙的にフラッシュされる前だけ呼び出すことができます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var contentType = response.getHeader(&apos;content-type&apos;);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.removeHeader(name)",
              "type": "method",
              "name": "removeHeader",
              "desc": "<!--\nRemoves a header that's queued for implicit sending.\n-->\n\n<p>暗黙的に送信するためキューに入れられたヘッダを削除します。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>response.removeHeader(&quot;Content-Encoding&quot;);</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.write(chunk, [encoding])",
              "type": "method",
              "name": "write",
              "desc": "<!--\nIf this method is called and `response.writeHead()` has not been called, it will\nswitch to implicit header mode and flush the implicit headers.\n\nThis sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.\n-->\n\n<p>このメソッドが呼び出され、<code>response.writeHead()</code> が呼び出されなければ、\n暗黙的ヘッダモードに切り替わり、暗黙的ヘッダはフラッシュされます。\n\n</p>\n<p>これはレスポンスボディのチャンクを送信します。\nこのメソッドはボディの連続した部分を提供するために複数回呼び出されるかもしれません。\n\n</p>\n<!--\n`chunk` can be a string or a buffer. If `chunk` is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the `encoding` is `'utf8'`.\n-->\n\n<p><code>chunk</code> は文字列またはバッファにすることができます。\n<code>chunk</code> が文字列の場合、どのエンコードでバイトストリームにするかを第 2 引数で指定します。\nデフォルトの <code>encoding</code> は <code>&apos;utf8&apos;</code> です。\n\n</p>\n<!--\n**Note**: This is the raw HTTP body and has nothing to do with\nhigher-level multi-part body encodings that may be used.\n-->\n\n<p><strong>注意</strong>: これは生の HTTP ボディで、\n高水準のマルチパートボディエンコーディングで使われるものとは無関係です。\n\n</p>\n<!--\nThe first time `response.write()` is called, it will send the buffered\nheader information and the first body to the client. The second time\n`response.write()` is called, Node assumes you're going to be streaming\ndata, and sends that separately. That is, the response is buffered up to the\nfirst chunk of body.\n-->\n\n<p>初めて <code>response.write()</code> が呼び出されると、\nバッファリングされていたヘッダ情報と最初のボディがクライアントに送信されます。\n2 回目に <code>response.write()</code> が呼ばれると、\nNode はストリーミングデータを分割して送信しようとしていると仮定します。\nすなわち、レスポンスはボディの最初のチャンクまでバッファリングされます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "chunk"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.addTrailers(headers)",
              "type": "method",
              "name": "addTrailers",
              "desc": "<!--\nThis method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.\n-->\n\n<p>このメソッドは HTTP トレーラヘッダ (メッセージの最後に置かれるヘッダ) をレスポンスに追加します。\n\n</p>\n<!--\nTrailers will **only** be emitted if chunked encoding is used for the\nresponse; if it is not (e.g., if the request was HTTP/1.0), they will\nbe silently discarded.\n-->\n\n<p>トレーラはレスポンスがチャンク化されたエンコーディングで<strong>のみ</strong>生成されます;\nそうでなければ (例えばリクエストが HTTP/1.0)、黙って破棄されます。\n\n</p>\n<!--\nNote that HTTP requires the `Trailer` header to be sent if you intend to\nemit trailers, with a list of the header fields in its value. E.g.,\n-->\n\n<p>HTTP は、トレーラを生成するならそのヘッダフィールドのリストを値として\n<code>Trailer</code> ヘッダを送信することを要求していることに注意してください。\n\n</p>\n<pre><code>response.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos;,\n                          &apos;Trailer&apos;: &apos;Content-MD5&apos; });\nresponse.write(fileData);\nresponse.addTrailers({&apos;Content-MD5&apos;: &quot;7895bf4b8828b55ceaf47747b4bca667&quot;});\nresponse.end();</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "headers"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.end([data], [encoding])",
              "type": "method",
              "name": "end",
              "desc": "<!--\nThis method signals to the server that all of the response headers and body\nhas been sent; that server should consider this message complete.\nThe method, `response.end()`, MUST be called on each\nresponse.\n-->\n\n<p>このメソッドはレスポンスの全てのヘッダとボディを送信したことをサーバに伝えます;\nサーバはメッセージが終了したと考えるべきです。\nこの <code>response.end()</code> メソッドは各レスポンスごとに呼び出さなければ<em>なりません</em>。\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling `response.write(data, encoding)`\nfollowed by `response.end()`.\n-->\n\n<p><code>data</code> が指定された場合、\n<code>response.write(data, encoding)</code> に続けて <code>response.end()</code> を呼び出すのと等価です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "response.statusCode",
              "name": "statusCode",
              "desc": "<!--\nWhen using implicit headers (not calling `response.writeHead()` explicitly), this property\ncontrols the status code that will be send to the client when the headers get\nflushed.\n-->\n\n<p>(<code>response.writeHead()</code> が明示的に呼ばれないために) 暗黙的なヘッダが使われる場合、このプロパティはヘッダがフラッシュされる時にクライアントへ送信されるステータスコードを制御します。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>response.statusCode = 404;</code></pre>\n<!--\nAfter response header was sent to the client, this property indicates the\nstatus code which was sent out.\n-->\n\n<p>レスポンスヘッダがクライアントに送信された後、\nこのプロパティは送信されたステータスコードを示します。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: http.Agent",
          "type": "class",
          "name": "http.Agent",
          "desc": "<!--\nIn node 0.5.3+ there is a new implementation of the HTTP Agent which is used\nfor pooling sockets used in HTTP client requests.\n\nPreviously, a single agent instance help the pool for single host+port. The\ncurrent implementation now holds sockets for any number of hosts.\n\nThe current HTTP Agent also defaults client requests to using\nConnection:keep-alive. If no pending HTTP requests are waiting on a socket\nto become free the socket is closed. This means that node's pool has the\nbenefit of keep-alive when under load but still does not require developers\nto manually close the HTTP clients using keep-alive.\n\nSockets are removed from the agent's pool when the socket emits either a\n\"close\" event or a special \"agentRemove\" event. This means that if you intend\nto keep one HTTP request open for a long time and don't want it to stay in the\npool you can do something along the lines of:\n-->\n\n<p>Node 0.5.3 以降には、HTTP クライアントリクエストのソケットを\nプーリングするために新しい HTTP Agent の実装が存在します。\n\n</p>\n<p>以前は、エージェントの一つのインスタンスが一つのホスト + ポートのプールを\n助けていましたが、現在の実装では任意の数のホストに対するソケットを\n保持できるようになりました。\n\n</p>\n<p>現在の HTTP Agent では、クライアントリクエストはデフォルトで\nConnection:keep-alive を使うようにもなりました。\nソケットを待ってペンディングになっている HTTP リクエストがなければ、\nソケットはクローズされます。\nこれは、node のプールは高負荷時に keep-alive のメリットを持ちながら、\nkeep-alive を使用する HTTP クライアントを開発者が手動でクローズする\n必要がないことを意味します。\n\n</p>\n<p>ソケットは <code>&apos;close&apos;</code> イベントまたは特別な <code>&apos;agentRemove&apos;</code> イベントが\n生成された時にエージェントのプールから削除されます。\nこれは、一つの HTTP リクエストを長時間オープンしたままにするために、\nプールにソケットがとどまらないことを意図するなら、\n以下のようにすることができることを意味します:\n\n</p>\n<pre><code>http.get(options, function(res) {\n  // Do stuff\n}).on(&quot;socket&quot;, function (socket) {\n  socket.emit(&quot;agentRemove&quot;);\n});</code></pre>\n<!--\nAlternatively, you could just opt out of pooling entirely using `agent:false`:\n-->\n\n<p>別の方法として、 <code>agent: false</code> を指定することで、\nプーリングを使用しないこともできます:\n\n</p>\n<pre><code>http.get({host:&apos;localhost&apos;, port:80, path:&apos;/&apos;, agent:false}, function (res) {\n  // Do stuff\n})</code></pre>\n",
          "properties": [
            {
              "textRaw": "agent.maxSockets",
              "name": "maxSockets",
              "desc": "<!--\nBy default set to 5. Determines how many concurrent sockets the agent can have \nopen per host.\n-->\n\n<p>デフォルトでは 5 に設定されます。\nエージェントがいくつのソケットを並行にオープンするかを決定します。\n\n</p>\n"
            },
            {
              "textRaw": "agent.sockets",
              "name": "sockets",
              "desc": "<!--\nAn object which contains arrays of sockets currently in use by the Agent. Do not \nmodify.\n-->\n\n<p>エージェントが現在使っているソケットの配列です。\n変更しないでください。\n\n</p>\n"
            },
            {
              "textRaw": "agent.requests",
              "name": "requests",
              "desc": "<!--\nAn object which contains queues of requests that have not yet been assigned to \nsockets. Do not modify.\n-->\n\n<p>まだソケットが割り当てられていないリクエストのキューを含むオブジェクトです。\n変更しないでください。\n\n</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: http.ClientRequest",
          "type": "class",
          "name": "http.ClientRequest",
          "desc": "<!--\nThis object is created internally and returned from `http.request()`.  It\nrepresents an _in-progress_ request whose header has already been queued.  The\nheader is still mutable using the `setHeader(name, value)`, `getHeader(name)`,\n`removeHeader(name)` API.  The actual header will be sent along with the first\ndata chunk or when closing the connection.\n-->\n\n<p>このオブジェクトは HTTP サーバ内部で作成され、<code>http.request()</code> から返されます。\nそれはヘッダがキューに入れられた <em>進行中</em> のリクエストを表現します。\nヘッダは <code>setHeader(name, value)</code>, <code>getHeader(name)</code>, <code>removeHeader(name)</code> API によってまだ可変のままです。\n実際にヘッダが送信されるのは、最初のデータチャンクが送信される時またはコネクションがクローズされる時です。\n\n</p>\n<!--\nTo get the response, add a listener for `'response'` to the request object.\n`'response'` will be emitted from the request object when the response\nheaders have been received.  The `'response'` event is executed with one\nargument which is an instance of `http.ClientResponse`.\n-->\n\n<p>レスポンスを取得するには、<code>&apos;response&apos;</code> 用のリスナーをリクエストオブジェクトに加えます。\n<code>&apos;response&apos;</code> イベントはレスポンスヘッダを受信するとリクエストオブジェクトによって生成されます。\n<code>&apos;response&apos;</code> イベントは <code>http.ClientResponse</code> のインスタンスを唯一の引数として実行されます。\n\n</p>\n<!--\nDuring the `'response'` event, one can add listeners to the\nresponse object; particularly to listen for the `'data'` event. Note that\nthe `'response'` event is called before any part of the response body is received,\nso there is no need to worry about racing to catch the first part of the\nbody. As long as a listener for `'data'` is added during the `'response'`\nevent, the entire body will be caught.\n-->\n\n<p><code>&apos;response&apos;</code> イベントの間、レスポンスオブジェクトにリスナーを加えることができます;\nとりわけ <code>&apos;data&apos;</code> イベントのリスナーです。\n<code>&apos;response&apos;</code> イベントはレスポンスボディのどの部分を受信するよりも前に呼び出されることに注意してください。\nそのため、ボディの最初の部分の受信と競合することを心配する必要はありません。\n<code>&apos;response&apos;</code> イベントの間に <code>&apos;data&apos;</code> イベントのリスナーが加えられる限り、\nボディ全体を受信することができます。\n\n\n</p>\n<pre><code>// Good\nrequest.on(&apos;response&apos;, function (response) {\n  response.on(&apos;data&apos;, function (chunk) {\n    console.log(&apos;BODY: &apos; + chunk);\n  });\n});\n\n// Bad - misses all or part of the body\nrequest.on(&apos;response&apos;, function (response) {\n  setTimeout(function () {\n    response.on(&apos;data&apos;, function (chunk) {\n      console.log(&apos;BODY: &apos; + chunk);\n    });\n  }, 10);\n});</code></pre>\n<!--\nNote: Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n-->\n\n<p>注意: Node は Content-Length と実際に送信されたリクエストボディの長さが等しいかどうかチェックしません。\n\n</p>\n<!--\nThe request implements the [Writable  Stream](stream.html#writable_stream)\ninterface. This is an `EventEmitter` with the following events:\n-->\n\n<p>リクエストは <a href=\"stream.html#writable_Stream\">Writable  Stream</a>\nインタフェースを実装します。\nこれは以下のイベントを持つ <code>EventEmitter</code> です。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event 'response'",
              "type": "event",
              "name": "response",
              "desc": "<p><code>function (response) { }</code>\n\n</p>\n<!--\nEmitted when a response is received to this request. This event is emitted only once. The\n`response` argument will be an instance of `http.ClientResponse`.\n-->\n\n<p>このリクエストに対するレスポンスを受信した時に生成されます。\nこのイベントは一回だけ生成されます。\n<code>response</code> 引数は <code>http.ClientResponse</code> のインスタンスです。\n\n</p>\n<!--\nOptions:\n-->\n\n<p>オプション:\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n- `port`: Port of remote server.\n- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)\n-->\n\n<ul>\n<li><code>host</code>: リクエストを発行するサーバのドメイン名または IP アドレス。</li>\n<li><code>port</code>: リモートサーバのポート。</li>\n<li><code>soocketPath</code>: Unix ドメインソケット (host:port または socketPath のどちらか)</li>\n</ul>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'socket'",
              "type": "event",
              "name": "socket",
              "desc": "<p><code>function (socket) { }</code>\n\n</p>\n<!--\nEmitted after a socket is assigned to this request.\n-->\n\n<p>このリクエストにソケットが割り当てられた後に生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'upgrade'",
              "type": "event",
              "name": "upgrade",
              "desc": "<p><code>function (response, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a server responds to a request with an upgrade. If this\nevent isn't being listened for, clients receiving an upgrade header will have\ntheir connections closed.\n-->\n\n<p>サーバがアップグレード要求に応答する度に生成されます。\nこのイベントが監視されていない場合、クライアントがアップグレードヘッダを受信するとそのコネクションはクローズされます。\n\n</p>\n<!--\nA client server pair that show you how to listen for the `upgrade` event using `http.getAgent`:\n-->\n\n<p><code>http.getAget</code> を使ってどのように <code>upgrade</code> イベントを監視するかを示す、\nクライアントとサーバのペア:\n\n</p>\n<pre><code>var http = require(&apos;http&apos;);\nvar net = require(&apos;net&apos;);\n\n// Create an HTTP server\nvar srv = http.createServer(function (req, res) {\n  res.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  res.end(&apos;okay&apos;);\n});\nsrv.on(&apos;upgrade&apos;, function(req, socket, upgradeHead) {\n  socket.write(&apos;HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n&apos; +\n               &apos;Upgrade: WebSocket\\r\\n&apos; +\n               &apos;Connection: Upgrade\\r\\n&apos; +\n               &apos;\\r\\n\\r\\n&apos;);\n\n  socket.ondata = function(data, start, end) {\n    socket.write(data.toString(&apos;utf8&apos;, start, end), &apos;utf8&apos;); // echo back\n  };\n});\n\n// now that server is running\nsrv.listen(1337, &apos;127.0.0.1&apos;, function() {\n\n  // make a request\n  var options = {\n    port: 1337,\n    host: &apos;127.0.0.1&apos;,\n    headers: {\n      &apos;Connection&apos;: &apos;Upgrade&apos;,\n      &apos;Upgrade&apos;: &apos;websocket&apos;\n    }\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&apos;upgrade&apos;, function(res, socket, upgradeHead) {\n    console.log(&apos;got upgraded!&apos;);\n    socket.end();\n    process.exit(0);\n  });\n});</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'continue'",
              "type": "event",
              "name": "continue",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the server sends a '100 Continue' HTTP response, usually because\nthe request contained 'Expect: 100-continue'. This is an instruction that\nthe client should send the request body.\n-->\n\n<p>通常、リクエストが &apos;Expect: 100-continue&apos; を含んでいたことにより、\nサーバが &apos;100 Continue&apos; HTTP レスポンスを送信することで生成されます。\nこれはクライアントがリクエストボディを送信すべき事を示します。\n\n</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "request.write(chunk, [encoding])",
              "type": "method",
              "name": "write",
              "desc": "<!--\nSends a chunk of the body.  By calling this method\nmany times, the user can stream a request body to a\nserver--in that case it is suggested to use the\n`['Transfer-Encoding', 'chunked']` header line when\ncreating the request.\n-->\n\n<p>ボディのチャンクを送信します。\nこのメソッドを何回も呼び出すと、サーバへのリクエストボディをストリーム化できます － \nこのケースは <code>[&apos;Transfer-Encoding&apos;, &apos;chunked&apos;]</code> ヘッダでリクエストを生成したことを意味します。\n\n</p>\n<!--\nThe `chunk` argument should be a [buffer](buffer.html) or a string.\n-->\n\n<p><code>chunk</code> 引数は <a href=\"buffer.html\">buffer</a> または文字列です。\n\n</p>\n<!--\nThe `encoding` argument is optional and only applies when `chunk` is a string.\nDefaults to `'utf8'`.\n-->\n\n<p><code>encoding</code> 引数はオプションで、<code>chunk</code> が文字列の場合だけ適用されます。\nデフォルトは <code>&apos;utf8&apos;</code> です。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "chunk"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.end([data], [encoding])",
              "type": "method",
              "name": "end",
              "desc": "<!--\nFinishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating `'0\\r\\n\\r\\n'`.\n-->\n\n<p>リクエストの送信を終了します。\nボディのいくつかの部分がまだ送信されていない場合、それはストリームにフラッシュされます。\nリクエストがチャンク化されている場合、これは終端の <code>&apos;0\\r\\n\\r\\n&apos;</code> を送信します。\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling\n`request.write(data, encoding)` followed by `request.end()`.\n-->\n\n<p><code>data</code> が指定された場合は、\n<code>request.write(data, encoding)</code> に続けて <code>request.end()</code> を呼び出すのと等価です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.abort()",
              "type": "method",
              "name": "abort",
              "desc": "<!--\nAborts a request.  (New since v0.3.8.)\n-->\n\n<p>リクエストをアボートします (v0.3.8 からの新機能)\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "request.setTimeout(timeout, [callback])",
              "type": "method",
              "name": "setTimeout",
              "desc": "<!--\nOnce a socket is assigned to this request and is connected \n[socket.setTimeout(timeout, [callback])](net.html#socket.setTimeout)\nwill be called.\n-->\n\n<p>このリクエストにソケットが割り当てられて接続した際に、\n<a href=\"net.html#socket.setTimeout\">socket.setTimeout(timeout, [callback])</a>\nが呼び出されます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "timeout"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.setNoDelay([noDelay])",
              "type": "method",
              "name": "setNoDelay",
              "desc": "<!--\nOnce a socket is assigned to this request and is connected \n[socket.setNoDelay(noDelay)](net.html#socket.setNoDelay)\nwill be called.\n-->\n\n<p>このリクエストにソケットが割り当てられて接続した際に、\n<a href=\"net.html#socket.setNoDelay\">socket.setNoDelay(noDelay)</a>\nが呼び出されます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "noDelay",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "request.setSocketKeepAlive([enable], [initialDelay])",
              "type": "method",
              "name": "setSocketKeepAlive",
              "desc": "<!--\nOnce a socket is assigned to this request and is connected \n[socket.setKeepAlive(enable, [initialDelay])](net.html#socket.setKeepAlive)\nwill be called.\n-->\n\n<p>このリクエストにソケットが割り当てられて接続した際に、\n<a href=\"net.html#socket.setKeepAlive\">socket.setKeepAlive(enable, [initialDelay])</a>\nが呼び出されます。\n\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "enable",
                      "optional": true
                    },
                    {
                      "name": "initialDelay",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "http.globalAgent",
          "name": "globalAgent",
          "desc": "<!--\nGlobal instance of Agent which is used as the default for all http client\nrequests.\n-->\n\n<p>全ての HTTP クライアントリクエストでデフォルトとして使用される、\nAgent のインスタンスです。\n\n\n</p>\n"
        },
        {
          "textRaw": "http.ClientResponse",
          "name": "ClientResponse",
          "desc": "<!--\nThis object is created when making a request with `http.request()`. It is\npassed to the `'response'` event of the request object.\n-->\n\n<p>このオブジェクトは <code>http.request()</code> によってリクエストと一緒に作成されます。\nこれはリクエストオブジェクトの <code>&apos;response&apos;</code> イベントに渡されます。\n\n</p>\n<!--\nThe response implements the [Readable Stream](stream.html#readable_stream)\ninterface. This is an `EventEmitter` with the following events:\n\n-->\n\n<p>レスポンスは <a href=\"stream.html#readable_Stream\">Readable Stream</a>\nインタフェースを実装します。\nこれは以下のイベントを持つ <code>EventEmitter</code> です:\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'data'",
              "type": "event",
              "name": "data",
              "desc": "<p><code>function (chunk) { }</code>\n\n</p>\n<!--\nEmitted when a piece of the message body is received.\n\nNote that the __data will be lost__ if there is no listener when a\n`ClientResponse` emits a `'data'` event.\n-->\n\n<p>メッセージボディの断片を受信した場合に生成されます。\n\n</p>\n<p><code>ClientResponse</code> が <code>&apos;data&apos;</code> イベントを生成した時にリスナが存在しなければ、\n<strong>データは失われる</strong>ことに注意してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'end'",
              "type": "event",
              "name": "end",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted exactly once for each message. No arguments. After\nemitted no other events will be emitted on the response.\n-->\n\n<p>メッセージごとに厳密に一回だけ生成されます。\nこのイベントが生成された後、このレスポンスはどんなイベントも生成しません。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function (err) { }</code>\n\n</p>\n<!--\nIndicates that the underlaying connection was terminated before\n`end` event was emitted.\nSee [http.ServerRequest](#http.ServerRequest)'s `'close'` event for more\ninformation.\n-->\n\n<p><code>&apos;end&apos;</code> イベントが生成される前に下層の接続が切断されたことを示します。\n<a href=\"#http.ServerRequest\">http.ServerRequest</a> の <code>&apos;close&apos;</code>\nイベントにより多くの情報があります。\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "response.statusCode",
              "name": "statusCode",
              "desc": "<!--\nThe 3-digit HTTP response status code. E.G. `404`.\n-->\n\n<p>3 桁の数字によるレスポンスのステータスコードです。例えば <code>404</code>。\n\n</p>\n"
            },
            {
              "textRaw": "response.httpVersion",
              "name": "httpVersion",
              "desc": "<!--\nThe HTTP version of the connected-to server. Probably either\n`'1.1'` or `'1.0'`.\nAlso `response.httpVersionMajor` is the first integer and\n`response.httpVersionMinor` is the second.\n-->\n\n<p>接続しているサーバとの HTTP のバージョンです。\nおそらく <code>&apos;1.1&apos;</code> または <code>&apos;1.0&apos;</code> のどちらかです。\n同様に <code>response.httpVersionMajor</code> は最初の整数、\n<code>response.httpVersionMinor</code> は 2 番目の整数です。\n\n</p>\n"
            },
            {
              "textRaw": "response.headers",
              "name": "headers",
              "desc": "<!--\nThe response headers object.\n-->\n\n<p>レスポンスヘッダオブジェクトです。\n\n</p>\n"
            },
            {
              "textRaw": "response.trailers",
              "name": "trailers",
              "desc": "<!--\nThe response trailers object. Only populated after the 'end' event.\n-->\n\n<p>レスポンスのトレーラオブジェクトです。\n&apos;end&apos; イベントの後にだけ発生します。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "response.setEncoding([encoding])",
              "type": "method",
              "name": "setEncoding",
              "desc": "<!--\nSet the encoding for the response body. Either `'utf8'`, `'ascii'`, or\n`'base64'`. Defaults to `null`, which means that the `'data'` event will emit\na `Buffer` object.\n-->\n\n<p>レスポンスボディのエンコーディングを設定します。\n<code>&apos;utf8&apos;</code>、<code>&apos;ascii&apos;</code>、あるいは <code>&apos;base64&apos;</code> のいずれかです。\nデフォルトは <code>null</code> で、\n<code>&apos;data&apos;</code> イベントが <code>Buffer</code> を生成することを意味します。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "response.pause()",
              "type": "method",
              "name": "pause",
              "desc": "<!--\nPauses response from emitting events.  Useful to throttle back a download.\n-->\n\n<p>イベントの生成によるレスポンスを中断します。ダウンロード速度を落とすのに便利です。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "response.resume()",
              "type": "method",
              "name": "resume",
              "desc": "<!--\nResumes a paused response.\n-->\n\n<p>中断されていたレスポンスを再開します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "HTTP"
    },
    {
      "textRaw": "HTTPS",
      "name": "https",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nHTTPS is the HTTP protocol over TLS/SSL. In Node this is implemented as a\nseparate module.\n-->\n\n<p>HTTPS は TLS/SSL 上の HTTP プロトコルです。\nNode ではこれらは別のモジュールとして実装されています。\n\n</p>\n",
      "classes": [
        {
          "textRaw": "Class: https.Server",
          "type": "class",
          "name": "https.Server",
          "desc": "<!--\nThis class is a subclass of `tls.Server` and emits events same as\n`http.Server`. See `http.Server` for more information.\n-->\n\n<p>このクラスは <code>tls.Server</code> のサブクラスで、<code>http.Server</code> と同様のイベントを生成します。\nより詳しくは <code>http.Server</code> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Class: https.Agent",
          "type": "class",
          "name": "https.Agent",
          "desc": "<!--\nAn Agent object for HTTPS similar to [http.Agent](http.html#http.Agent).\nSee [https.request()](#https.request) for more information.\n-->\n\n<p>HTTPS 用の Agent オブジェクトで，\n<a href=\"http.html#http.Agent\">http.Agent</a> と同様です。\n\n</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "https.createServer(options, [requestListener])",
          "type": "method",
          "name": "createServer",
          "desc": "<!--\nReturns a new HTTPS web server object. The `options` is similar to\n`tls.createServer()`. The `requestListener` is a function which is\nautomatically added to the `'request'` event.\n-->\n\n<p>新しい HTTPS Web サーバオブジェクトを返します。\n<code>option</code> は <code>tls.createServer()</code> と同じです。\n<code>requestListener</code> は関数で、 <code>&apos;request&apos;</code> イベントに自動的に追加されます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>// curl -k https://localhost:8000/\nvar https = require(&apos;https&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);</code></pre>\n<!--\nOr\n-->\n\n<p>または\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "requestListener",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "https.request(options, callback)",
          "type": "method",
          "name": "request",
          "desc": "<!--\nMakes a request to a secure web server.\nAll options from [http.request()](http.html#http.request) are valid.\n-->\n\n<p>セキュアな Web サーバへのリクエストを作成します。\n<a href=\"http.html#http.request\">http.request()</a> の全てと同様のオプションが指定できます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\n\nvar options = {\n  host: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;\n};\n\nvar req = https.request(options, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&apos;data&apos;, function(d) {\n    process.stdout.write(d);\n  });\n});\nreq.end();\n\nreq.on(&apos;error&apos;, function(e) {\n  console.error(e);\n});</code></pre>\n<!--\nThe options argument has the following options\n-->\n\n<p><code>options</code> 引数は以下のオプションを持ちます。\n\n</p>\n<!--\n- host: IP or domain of host to make request to. Defaults to `'localhost'`.\n- port: port of host to request to. Defaults to 443.\n- path: Path to request. Default `'/'`.\n- method: HTTP request method. Default `'GET'`.\n\n- `host`: A domain name or IP address of the server to issue the request to.\n  Defaults to `'localhost'`.\n- `hostname`: To support `url.parse()` `hostname` is preferred over `host`\n- `port`: Port of remote server. Defaults to 443.\n- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.\n- `path`: Request path. Defaults to `'/'`. Should include query string if any.\n  E.G. `'/index.html?page=12'`\n- `headers`: An object containing request headers.\n- `auth`: Basic authentication i.e. `'user:password'` to compute an\n  Authorization header.\n- `agent`: Controls [Agent](#https.Agent) behavior. When an Agent is\n  used request will default to `Connection: keep-alive`. Possible values:\n - `undefined` (default): use [globalAgent](#https.globalAgent) for this\n   host and port.\n - `Agent` object: explicitly use the passed in `Agent`.\n - `false`: opts out of connection pooling with an Agent, defaults request to\n   `Connection: close`.\n\nThe following options from [tls.connect()](tls.html#tls.connect) can also be\nspecified. However, a [globalAgent](#https.globalAgent) silently ignores these.\n\n- `pfx`: Certificate, Private key and CA certificates to use for SSL. Default `null`.\n- `key`: Private key to use for SSL. Default `null`.\n- `passphrase`: A string of passphrase for the private key or pfx. Default `null`.\n- `cert`: Public x509 certificate to use. Default `null`.\n- `ca`: An authority certificate or array of authority certificates to check\n  the remote host against.\n\nIn order to specify these options, use a custom `Agent`.\n\nExample:\n-->\n\n<ul>\n<li><code>host</code>: リクエストを発行するサーバのドメイン名または IP アドレス。\n デフォルトは <code>&apos;localhost&apos;</code> です。</li>\n<li><code>hostname</code>: <code>url.parse()</code> サポート。<code>hostname</code> は <code>host</code> を上書きします。</li>\n<li><code>port</code>: リモートサーバのポート。デフォルトは 443 です。</li>\n<li><code>method</code>: HTTPS リクエストのメソッドの文字列。デフォルトは <code>&apos;GET&apos;</code> です。</li>\n<li><code>path</code>: リクエストのパス。デフォルトは <code>&apos;/&apos;</code> です。\n必要なら問い合わせ文字列を含めるべきです．\n例 <code>&apos;/index.html?page=12&apos;</code></li>\n<li><code>headers</code>: リクエストヘッダを含むオブジェクト。</li>\n<li><code>auth</code>: べーしく認証すなわち Authorization ヘッダのための <code>&apos;user:password&apos;</code>。</li>\n<li><code>agent</code>: <a href=\"#https.Agent\">Agent</a> の振る舞いを制御します。\nエージェントが使われる場合、<code>Connection:keep-alive</code> がデフォルトになります。\n可能な値は:<ul>\n<li><code>undefined</code> (デフォルト): ホストとポートで\n<a href=\"#https.globalAgent\">グローバル Agent</a> を使用します。</li>\n<li><code>Agent</code> オブジェクト: 明示的に渡された <code>Agent</code> を使用します。</li>\n<li><code>false</code>: Agent によるコネクションプーリングを使用しません。\n<code>Connection:close</code> の場合のデフォルトです。</li>\n</ul>\n</li>\n</ul>\n<p>以下の <a href=\"tls.html#tls.connect\">tls.connect()</a> 由来のオプションを\n指定することもできますが、\nグローバル <a href=\"http.html#http.Agent\">エージェント</a> はこれらを無視します。\n\n</p>\n<ul>\n<li><code>pfx</code>: SSL で使用する証明書、秘密鍵、および認証局。デフォルトは <code>null</code> です。</li>\n<li><code>key</code>: SSL で使用する秘密鍵。デフォルトは <code>null</code> です。</li>\n<li><code>passphrase</code>: 秘密鍵または pfx のパスフレーズを表す文字列。\nデフォルトは <code>null</code> です。</li>\n<li><code>cert</code>: x509公開証明書。デフォルトは <code>null</code> です。</li>\n<li><code>ca</code>: リモートホストをチェックする信頼できる認証局または認証局の配列。</li>\n</ul>\n<p>これらのオプションを指定するには、カスタムエージェントを使用します。\n\n</p>\n<p>例:\n\n</p>\n<pre><code>var options = {\n  host: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, function(res) {\n  ...\n}</code></pre>\n<!--\nOr does not use an `Agent`.\n\nExample:\n-->\n\n<p>あるいは、エージェントを使用しません。\n\n</p>\n<pre><code>var options = {\n  host: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;),\n  agent: false\n};\n\nvar req = https.request(options, function(res) {\n  ...\n}</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "https.get(options, callback)",
          "type": "method",
          "name": "get",
          "desc": "<!--\nLike `http.get()` but for HTTPS.\n-->\n\n<p><code>http.get()</code> と同様ですが HTTPS です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\n\nhttps.get({ host: &apos;encrypted.google.com&apos;, path: &apos;/&apos; }, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&apos;data&apos;, function(d) {\n    process.stdout.write(d);\n  });\n\n}).on(&apos;error&apos;, function(e) {\n  console.error(e);\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "https.globalAgent",
          "name": "globalAgent",
          "desc": "<!--\nGlobal instance of [https.Agent](#https.Agent) which is used as the default\nfor all HTTPS client requests.\n-->\n\n<p>全ての HTTPS クライアントリクエストでデフォルトとして使用される、\n<a href=\"#https.Agent\">https.Agent</a> のインスタンスです。\n\n</p>\n"
        }
      ],
      "type": "module",
      "displayName": "HTTPS"
    },
    {
      "textRaw": "URL",
      "name": "url",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nThis module has utilities for URL resolution and parsing.\nCall `require('url')` to use it.\n-->\n\n<p>このモジュールはURLの解決や解析の為のユーティリティを持ちます。\n利用するには <code>require(&apos;url&apos;)</code> を呼び出してください。\n\n</p>\n<!--\nParsed URL objects have some or all of the following fields, depending on\nwhether or not they exist in the URL string. Any parts that are not in the URL\nstring will not be in the parsed object. Examples are shown for the URL\n-->\n\n<p>解析されたURLオブジェクトは、URL文字列の中に存在するかどうかに応じて\n次に示すフィールドをいくつかもしくは全てを持ちます。\nURL文字列に含まれないフィールドは解析結果のオブジェクトに含まれません。\n次のURLで例を示します。\n\n</p>\n<p><code>&apos;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&apos;</code>\n\n</p>\n<!--\n* `href`: The full URL that was originally parsed. Both the protocol and host are lowercased.\n\n    Example: `'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'`\n\n* `protocol`: The request protocol, lowercased.\n\n    Example: `'http:'`\n\n* `host`: The full lowercased host portion of the URL, including port\n  information.\n\n    Example: `'host.com:8080'`\n\n* `auth`: The authentication information portion of a URL.\n\n    Example: `'user:pass'`\n\n* `hostname`: Just the lowercased hostname portion of the host.\n\n    Example: `'host.com'`\n\n* `port`: The port number portion of the host.\n\n    Example: `'8080'`\n\n* `pathname`: The path section of the URL, that comes after the host and\n  before the query, including the initial slash if present.\n\n    Example: `'/p/a/t/h'`\n\n* `search`: The 'query string' portion of the URL, including the leading\n  question mark.\n\n    Example: `'?query=string'`\n\n* `path`: Concatenation of `pathname` and `search`.\n\n    Example: `'/p/a/t/h?query=string'`\n\n* `query`: Either the 'params' portion of the query string, or a\n  querystring-parsed object.\n\n    Example: `'query=string'` or `{'query':'string'}`\n\n* `hash`: The 'fragment' portion of the URL including the pound-sign.\n\n    Example: `'#hash'`\n-->\n\n<ul>\n<li><p><code>href</code>: 解析する前の完全な URL。protocol と host はどちらも小文字化されます。</p>\n<p>  例: <code>&apos;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&apos;</code></p>\n</li>\n<li><p><code>protocol</code>: リクエストのプロトコル。小文字化されます。</p>\n<p>  例: <code>&apos;http:&apos;</code></p>\n</li>\n<li><p><code>host</code>: URL の完全で小文字化されたホスト情報。認証情報を含みます。 </p>\n<p>  例: <code>&apos;host.com:8080&apos;</code></p>\n</li>\n<li><p><code>auth</code>: URL の認証情報。</p>\n<p>  例: <code>&apos;user:pass&apos;</code></p>\n</li>\n<li><p><code>hostname</code>: ホスト情報の中の小文字化されたホスト名。</p>\n<p>  例: <code>&apos;host.com&apos;</code></p>\n</li>\n<li><p><code>port</code>: ホスト情報の中のポート番号。</p>\n<p>  例: <code>&apos;8080&apos;</code></p>\n</li>\n<li><p><code>pathname</code>: URL のパス部分。ホスト情報からクエリまでの間に位置し、最初にスラッシュが存在する場合はそれも含みます。</p>\n<p>  例: <code>&apos;/p/a/t/h&apos;</code></p>\n</li>\n<li><p><code>search</code>: URL のクエリ文字列。先頭の ? マークも含みます。</p>\n<p>  例: <code>&apos;?query=string&apos;</code></p>\n</li>\n<li><p><code>path</code>: <code>pathname</code> と <code>search</code> を連結した文字列。</p>\n<p>  例: <code>&apos;/p/a/t/h?query=string&apos;</code></p>\n</li>\n<li><p><code>query</code>: クエリの変数部分の文字列、もしくはクエリ文字列を解析したオブジェクト。</p>\n<p>  例: <code>&apos;query=string&apos;</code> or <code>{&apos;query&apos;:&apos;string&apos;}</code></p>\n</li>\n<li><p><code>hash</code>: URL の # マークを含む部分。</p>\n<p>  例: <code>&apos;#hash&apos;</code></p>\n</li>\n</ul>\n<!--\nThe following methods are provided by the URL module:\n-->\n\n<p>以下のメソッドはURLモジュールにより提供されます:\n\n</p>\n",
      "methods": [
        {
          "textRaw": "url.parse(urlStr, [parseQueryString], [slashesDenoteHost])",
          "type": "method",
          "name": "parse",
          "desc": "<!--\nTake a URL string, and return an object.\n\nPass `true` as the second argument to also parse\nthe query string using the `querystring` module.\nDefaults to `false`.\n\nPass `true` as the third argument to treat `//foo/bar` as\n`{ host: 'foo', pathname: '/bar' }` rather than\n`{ pathname: '//foo/bar' }`. Defaults to `false`.\n-->\n\n<p>URL文字列を引数に取り、解析結果のオブジェクトを返します。\n\n</p>\n<p><code>querystring</code> モジュールを使ってクエリ文字列も解析したい場合は、\n第 2 引数に <code>true</code> を渡してください。\nデフォルトは <code>false</code> です。\n\n</p>\n<p><code>//foo/bar</code> を <code>{ pathname: &apos;//foo/bar&apos; }</code> ではなく\n<code>{ host: &apos;foo&apos;, pathname: &apos;/bar&apos; }</code> としたい場合は、\n第 3 引数に <code>true</code> を渡してください。\nデフォルトは <code>false</code> です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "urlStr"
                },
                {
                  "name": "parseQueryString",
                  "optional": true
                },
                {
                  "name": "slashesDenoteHost",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "url.format(urlObj)",
          "type": "method",
          "name": "format",
          "desc": "<!--\nTake a parsed URL object, and return a formatted URL string.\n-->\n\n<p>URL オブジェクトを引数に取り、フォーマットした URL 文字列を返します。\n\n</p>\n<!--\n* `href` will be ignored.\n* `protocol`is treated the same with or without the trailing `:` (colon).\n  * The protocols `http`, `https`, `ftp`, `gopher`, `file` will be\n    postfixed with `://` (colon-slash-slash).\n  * All other protocols `mailto`, `xmpp`, `aim`, `sftp`, `foo`, etc will\n    be postfixed with `:` (colon)\n* `auth` will be used if present.\n* `hostname` will only be used if `host` is absent.\n* `port` will only be used if `host` is absent.\n* `host` will be used in place of `auth`, `hostname`, and `port`\n* `pathname` is treated the same with or without the leading `/` (slash)\n* `search` will be used in place of `query`\n* `query` (object; see `querystring`) will only be used if `search` is absent.\n* `search` is treated the same with or without the leading `?` (question mark)\n* `hash` is treated the same with or without the leading `#` (pound sign, anchor)\n-->\n\n<ul>\n<li><code>href</code> は無視されます。</li>\n<li><code>protocol</code> の末尾に <code>:</code> (コロン) があってもなくても同じように扱われます。<ul>\n<li><code>http</code>、<code>https</code>、<code>ftp</code>、<code>gopher</code>、<code>file</code> は末尾に\n<code>://</code> (コロン、スラッシュ、スラッシュ) が付けられます。</li>\n<li><code>mailto</code>、<code>xmpp</code>、<code>aim</code>、<code>sftp</code>、<code>foo</code> など、その他のプロトコルは末尾に\n<code>:</code> (コロン) が付けられます。</li>\n</ul>\n</li>\n<li><code>auth</code> は <code>host</code> が与えられなかった場合だけ使われます。</li>\n<li><code>hostname</code> は <code>host</code> が与えられなかった場合だけ使われます。</li>\n<li><code>port</code> は <code>host</code> が与えられなかった場合だけ使われます。</li>\n<li><code>host</code> は <code>auth</code>、<code>hostname</code>、<code>port</code> の位置で使われます。</li>\n<li><code>pathname</code> の先頭に <code>/</code> (スラッシュ) があってもなくても同じように扱われます。</li>\n<li><code>search</code> は <code>query</code> の位置で使われます。</li>\n<li><code>query</code> (文字列ではなくオブジェクトです; <code>querystring</code> を参照してください) は <code>search</code> が与えられなかった場合だけ使われます。</li>\n<li><code>search</code> の先頭に <code>?</code> (クエスチョンマーク) があってもなくても同じように扱われます。</li>\n<li><code>hash</code> の先頭に <code>#</code> (シャープ, アンカー) があってもなくても同じように扱われます。</li>\n</ul>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "urlObj"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "url.resolve(from, to)",
          "type": "method",
          "name": "resolve",
          "desc": "<!--\nTake a base URL, and a href URL, and resolve them as a browser would for\nan anchor tag.\n-->\n\n<p>ベースとなる URL と相対 URL を引数に取り、ブラウザがアンカータグに対して\n行うのと同様に URL を解決します。\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "from"
                },
                {
                  "name": "to"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "URL"
    },
    {
      "textRaw": "Query String",
      "name": "querystring",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nThis module provides utilities for dealing with query strings.\nIt provides the following methods:\n-->\n\n<p>このモジュールはクエリ文字列を処理するユーティリティを提供します。 以下のメソッドから成ります:\n\n</p>\n",
      "methods": [
        {
          "textRaw": "querystring.stringify(obj, [sep], [eq])",
          "type": "method",
          "name": "stringify",
          "Serialize an object to a query string.\nOptionally override the default separator (`'&'`) and assignment (`'": "'`)\ncharacters.",
          "desc": "<p>クエリオブジェクトを文字列へ直列化します。\nオプションとしてデフォルトの区切り文字 (デフォルトは <code>&apos;&amp;&apos;</code>) と代入文字\n(デフォルトは <code>&apos;=&apos;</code>) を上書き指定できます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>querystring.stringify({ foo: &apos;bar&apos;, baz: [&apos;qux&apos;, &apos;quux&apos;], corge: &apos;&apos; })\n// returns\n&apos;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&apos;\n\nquerystring.stringify({foo: &apos;bar&apos;, baz: &apos;qux&apos;}, &apos;;&apos;, &apos;:&apos;)\n// returns\n&apos;foo:bar;baz:qux&apos;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "sep",
                  "optional": true
                },
                {
                  "name": "eq",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "querystring.parse(str, [sep], [eq])",
          "type": "method",
          "name": "parse",
          "Deserialize a query string to an object.\nOptionally override the default separator (`'&'`) and assignment (`'": "'`)\ncharacters.",
          "desc": "<p>クエリ文字列をオブジェクトに復元します。\nオプションとしてデフォルトの区切り文字 (<code>&apos;&amp;&apos;</code>) と代入文字 (<code>&apos;=&apos;</code>)\nを上書き指定できます。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>querystring.parse(&apos;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&apos;)\n// returns\n{ foo: &apos;bar&apos;, baz: [&apos;qux&apos;, &apos;quux&apos;], corge: &apos;&apos; }</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "str"
                },
                {
                  "name": "sep",
                  "optional": true
                },
                {
                  "name": "eq",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "querystring.escape",
          "name": "escape",
          "desc": "<!--\nThe escape function used by `querystring.stringify`,\nprovided so that it could be overridden if necessary.\n-->\n\n<p>escape 関数は <code>querystring.stringify</code> で使用されていて、必要な場合にオーバーライドできるよう提供されています。\n\n</p>\n"
        },
        {
          "textRaw": "querystring.unescape",
          "name": "unescape",
          "desc": "<!--\nThe unescape function used by `querystring.parse`,\nprovided so that it could be overridden if necessary.\n-->\n\n<p>unescape関数は <code>querystring.parse</code> で使用されていて、必要な場合にオーバーライドできるよう提供されています。\n\n</p>\n"
        }
      ],
      "type": "module",
      "displayName": "querystring"
    },
    {
      "textRaw": "Readline",
      "name": "readline",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nTo use this module, do `require('readline')`. Readline allows reading of a\nstream (such as STDIN) on a line-by-line basis.\n-->\n\n<p>このモジュールを使用するには、<code>require(&apos;readline&apos;)</code> をします。\nReadline はストリーム (たとえば標準入力) を行ごとに読み込むことを可能にします。\n\n</p>\n<!--\nNote that once you've invoked this module, your node program will not\nterminate until you've closed the interface, and the STDIN stream. Here's how\nto allow your program to gracefully terminate:\n-->\n\n<p>このモジュールを一度起動すると、このインタフェースと \n(標準入力などの) ストリームをクローズするまで node\nプログラムは終了しないことに注意してください。\nきれいに終了する方法を以下に示します:\n\n</p>\n<pre><code>var rl = require(&apos;readline&apos;);\n\nvar i = rl.createInterface(process.stdin, process.stdout, null);\ni.question(&quot;What do you think of node.js?&quot;, function(answer) {\n  // TODO: Log the answer in a database\n  console.log(&quot;Thank you for your valuable feedback.&quot;);\n\n  // These two lines together allow the program to terminate. Without\n  // them, it would run forever.\n  i.close();\n  process.stdin.destroy();\n});</code></pre>\n",
      "methods": [
        {
          "textRaw": "rl.createInterface(input, output, completer)",
          "type": "method",
          "name": "createInterface",
          "desc": "<!--\nTakes two streams and creates a readline interface. The `completer` function\nis used for autocompletion. When given a substring, it returns `[[substr1,\nsubstr2, ...], originalsubstring]`.\n-->\n\n<p>二つのストリームを受け取り、readline のインタフェースを作成します。\n<code>completer</code> 関数は補完のために使われます。\nそれは部分文字列を与えられると、<code>[[substr1, substr2, ...], originalsubstring]</code>\nを返します。\n\n</p>\n<!--\nAlso `completer` can be run in async mode if it accepts two arguments:\n-->\n\n<p><code>completer</code> が二つの引数を持つなら、それは非同期モードで実行されます。\n\n</p>\n<p>  function completer(linePartial, callback) {\n    callback(null, [[&apos;123&apos;], linePartial]);\n  }\n\n</p>\n<!--\n`createInterface` is commonly used with `process.stdin` and\n`process.stdout` in order to accept user input:\n-->\n\n<p><code>createInterface</code> には通常、ユーザからの入力を受け取るために <code>process.stdin</code> と\n<code>process.stdout</code> が使用されます。\n\n</p>\n<pre><code>var readline = require(&apos;readline&apos;),\n  rl = readline.createInterface(process.stdin, process.stdout);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "input"
                },
                {
                  "name": "output"
                },
                {
                  "name": "completer"
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Interface",
          "type": "class",
          "name": "Interface",
          "desc": "<!--\nThe class that represents a readline interface with a stdin and stdout\nstream.\n-->\n\n<p>標準入力と標準出力を持つ readline インタフェースを表現するクラス。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "rl.setPrompt(prompt, length)",
              "type": "method",
              "name": "setPrompt",
              "desc": "<!--\nSets the prompt, for example when you run `node` on the command line, you see\n`> `, which is node's prompt.\n-->\n\n<p>プロンプトを設定します。\nたとえば、コマンドプロンプトで <code>node</code> コマンドを実行すると、\n<code>&gt; </code> を見ることができます。これが Node のプロンプトです。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "prompt"
                    },
                    {
                      "name": "length"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rl.prompt()",
              "type": "method",
              "name": "prompt",
              "desc": "<!--\nReadies readline for input from the user, putting the current `setPrompt`\noptions on a new line, giving the user a new spot to write.\n-->\n\n<p>ユーザからの入力を 1 行読み込みます。\n現在の <code>setPrompt()</code> の値を新しい行に出力し、\nユーザに新しい入力エリアを与えます。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.question(query, callback)",
              "type": "method",
              "name": "question",
              "desc": "<!--\nPrepends the prompt with `query` and invokes `callback` with the user's\nresponse. Displays the query to the user, and then invokes `callback` with the\nuser's response after it has been typed.\n-->\n\n<p><code>query</code> をプロンプトとして、ユーザが応答すると <code>callback</code> を起動します。\nユーザに質問を表示し、ユーザが応答をタイプすると、<code>callback</code> が起動されます。\n\n</p>\n<!--\nExample usage:\n-->\n\n<p>使用例:\n\n</p>\n<pre><code>interface.question(&apos;What is your favorite food?&apos;, function(answer) {\n  console.log(&apos;Oh, so your favorite food is &apos; + answer);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "query"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rl.close()",
              "type": "method",
              "name": "close",
              "desc": "<!--\n  Closes tty.\n-->\n\n<p>tty をクローズします。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.pause()",
              "type": "method",
              "name": "pause",
              "desc": "<!--\n  Pauses tty.\n-->\n\n<p>tty からの入力を中断します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.resume()",
              "type": "method",
              "name": "resume",
              "desc": "<!--\n  Resumes tty.\n-->\n\n<p>tty からの入力を再開します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.write()",
              "type": "method",
              "name": "write",
              "desc": "<!--\n  Writes to tty.\n-->\n\n<p>tty へ出力します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "events": [
            {
              "textRaw": "Event: 'line'",
              "type": "event",
              "name": "line",
              "desc": "<p><code>function (line) {}</code>\n\n</p>\n<!--\nEmitted whenever the `in` stream receives a `\\n`, usually received when the\nuser hits enter, or return. This is a good hook to listen for user input.\n-->\n\n<p><code>in</code> ストリームから <code>\\n</code> を読み込むごとに生成されます。\n通常、ユーザがエンターまたはリターンを打つごとに受信します。\nこれはユーザ入浴のよいフックとなります。\n\n</p>\n<!--\nExample of listening for `line`:\n-->\n\n<p><code>line</code> を監視する例:\n\n</p>\n<pre><code>rl.on(&apos;line&apos;, function (cmd) {\n  console.log(&apos;You just typed: &apos;+cmd);\n});</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted whenever the `in` stream receives a `^C` or `^D`, respectively known\nas `SIGINT` and `EOT`. This is a good way to know the user is finished using\nyour program.\n-->\n\n<p><code>in</code> ストリームから <code>^C</code> または <code>^D</code> を受信すると生成されます。\nそれぞれ <code>SIGINT</code> および <code>EOT</code> として知られています。\nこれはユーザがプログラムの使用を終わらせようとしていることを知るよい方法です。\n\n</p>\n<!--\nExample of listening for `close`, and exiting the program afterward:\n-->\n\n<p><code>close</code> を監視し、その後プログラムを終了する例:\n\n</p>\n<pre><code>rl.on(&apos;close&apos;, function() {\n  console.log(&apos;goodbye!&apos;);\n  process.exit(0);\n});</code></pre>\n<!--\nHere's an example of how to use all these together to craft a tiny command\nline interface:\n-->\n\n<p>全てを一緒に使う、小さなコマンドラインインタフェースの例:\n\n</p>\n<pre><code>var readline = require(&apos;readline&apos;),\n  rl = readline.createInterface(process.stdin, process.stdout),\n  prefix = &apos;OHAI&gt; &apos;;\n\nrl.on(&apos;line&apos;, function(line) {\n  switch(line.trim()) {\n    case &apos;hello&apos;:\n      console.log(&apos;world!&apos;);\n  break;\n    default:\n      console.log(&apos;Say what? I might have heard `&apos; + line.trim() + &apos;`&apos;);\n      break;\n  }\n  rl.setPrompt(prefix, prefix.length);\n  rl.prompt();\n}).on(&apos;close&apos;, function() {\n  console.log(&apos;Have a great day!&apos;);\n  process.exit(0);\n});\nconsole.log(prefix + &apos;Good to see you. Try typing stuff.&apos;);\nrl.setPrompt(prefix, prefix.length);\nrl.prompt();</code></pre>\n<!--\nTake a look at this slightly more complicated\n[example](https://gist.github.com/901104), and\n[http-console](https://github.com/cloudhead/http-console) for a real-life use\ncase.\n-->\n\n<p>より複雑な <a href=\"https://gist.github.com/901104\">例</a> や、実践的なユースケースとして\n<a href=\"https://github.com/cloudhead/http-console\">http-console</a>\nを見ることが出来ます。\n\n</p>\n",
              "params": []
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Readline"
    },
    {
      "textRaw": "REPL",
      "name": "repl",
      "desc": "<!--\nA Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily\nincludable in other programs.  REPL provides a way to interactively run\nJavaScript and see the results.  It can be used for debugging, testing, or\njust trying things out.\n-->\n\n<p>Read-Eval-Print-Loop (REPL) は単独のプログラムとしても他のプログラムに手軽に取り込む形でも利用することができます。\nREPL は対話的に JavaScript を実行して結果を確認する手段を提供します。 \nデバッグやテストやその他の様々なことを試す用途で利用されます。\n\n</p>\n<!--\nBy executing `node` without any arguments from the command-line you will be\ndropped into the REPL. It has simplistic emacs line-editing.\n-->\n\n<p>コマンドラインから <code>node</code> を引数無しで実行することで、REPL プログラムに入ります。\nREPL は Emacs 風の簡易な行編集機能を備えています。\n\n</p>\n<pre><code>mjr:~$ node\nType &apos;.help&apos; for options.\n&gt; a = [ 1, 2, 3];\n[ 1, 2, 3 ]\n&gt; a.forEach(function (v) {\n...   console.log(v);\n...   });\n1\n2\n3</code></pre>\n<p>より進んだ行編集を行うには、環境変数に <code>NODE_NO_READLINE=1</code> を設定してnodeを起動してください。\nこれによって正規の端末設定で REPL を起動し、<code>rlwrap</code> を有効にした状態でREPLを利用することができます。\n\n</p>\n<!--\nFor example, you could add this to your bashrc file:\n-->\n\n<p>例として、bashrc ファイルに以下のように設定を追加します:\n\n</p>\n<pre><code>alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;</code></pre>\n",
      "For advanced line-editors, start node with the environmental variable `NODE_NO_READLINE": "1`.\nThis will start the REPL in canonical terminal settings which will allow you to use with `rlwrap`.",
      "methods": [
        {
          "textRaw": "repl.start([prompt], [stream], [eval], [useGlobal], [ignoreUndefined])",
          "type": "method",
          "name": "start",
          "desc": "<!--\nStarts a REPL with `prompt` as the prompt and `stream` for all I/O.  `prompt`\nis optional and defaults to `> `.  `stream` is optional and defaults to\n`process.stdin`. `eval` is optional too and defaults to async wrapper for\n`eval()`.\n\nIf `useGlobal` is set to true, then the repl will use the global object,\ninstead of running scripts in a separate context. Defaults to `false`.\n\nIf `ignoreUndefined` is set to true, then the repl will not output return value\nof command if it's `undefined`. Defaults to `false`.\n\nYou can use your own `eval` function if it has following signature:\n-->\n\n<p><code>prompt</code> でプロンプト記号を、 <code>stream</code> で I/O を引数に取って REPL を起動します。\n<code>prompt</code> は省略可能で、 デフォルトは <code>&gt; </code> です。\n<code>stream</code> は省略可能で、 デフォルトは <code>process.stdin</code> です。\n<code>eval</code> も省略可能で、デフォルトは <code>eval()</code> の非同期ラッパーです。\n\n</p>\n<p><code>useGlobal</code> を <code>true</code> に指定した場合、REPL は別のコンテキストでスクリプトを\n実行するのではなく、グローバルオブジェクトを使用します。\nデフォルトは <code>false</code> です。\n\n</p>\n<p><code>ignoreUndefined</code> を <code>true</code> に指定した場合、REPL はコマンドの戻り値が <code>undefined</code> だった場合にそれを出力しません。デフォルトは <code>false</code> です。\n\n</p>\n<p>独自の <code>eval()</code> 関数は以下のシグネチャを持ちます。\n\n</p>\n<pre><code>function eval(cmd, callback) {\n  callback(null, result);\n}</code></pre>\n<!--\nMultiple REPLs may be started against the same running instance of node.  Each\nwill share the same global object but will have unique I/O.\n-->\n\n<p>複数の REPL を起動した場合、同一の node インスタンスが実行されないことがあります。\nそれぞれの REPL はグローバルオブジェクトを共有しますが、I/O は固有のものを持ちます。\n\n</p>\n<!--\nHere is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n-->\n\n<p>REPL を標準入力、Unix ドメインソケット、TCP ソケットのもとで起動する例を示します:\n\n</p>\n<pre><code>var net = require(&quot;net&quot;),\n    repl = require(&quot;repl&quot;);\n\nconnections = 0;\n\nrepl.start(&quot;node via stdin&gt; &quot;);\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start(&quot;node via Unix socket&gt; &quot;, socket);\n}).listen(&quot;/tmp/node-repl-sock&quot;);\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start(&quot;node via TCP socket&gt; &quot;, socket);\n}).listen(5001);</code></pre>\n<!--\nRunning this program from the command line will start a REPL on stdin.  Other\nREPL clients may connect through the Unix socket or TCP socket. `telnet` is useful\nfor connecting to TCP sockets, and `socat` can be used to connect to both Unix and\nTCP sockets.\n-->\n\n<p>このプログラムをコマンドラインから実行すると、標準入力のもとで REPL が起動します。\n他の REPL クライアントは Unix ドメインソケットか TCP ソケットを介して接続することができます。\n<code>telnet</code> が TCP ソケットへの接続に便利です。\n<code>socat</code> は Unix ドメイン /TCP 両方のソケットへの接続に利用できます。\n\n</p>\n<!--\nBy starting a REPL from a Unix socket-based server instead of stdin, you can\nconnect to a long-running node process without restarting it.\n-->\n\n<p>標準入力の代わりに Unix ドメインソケットをベースとしたサーバから REPL を起動することによって、\n再起動することなく node の常駐プロセスへ接続することができます。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "prompt",
                  "optional": true
                },
                {
                  "name": "stream",
                  "optional": true
                },
                {
                  "name": "eval",
                  "optional": true
                },
                {
                  "name": "useGlobal",
                  "optional": true
                },
                {
                  "name": "ignoreUndefined",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "miscs": [
        {
          "textRaw": "REPL Features",
          "name": "REPL Features",
          "type": "misc",
          "desc": "<!--\nInside the REPL, Control+D will exit.  Multi-line expressions can be input.\nTab completion is supported for both global and local variables.\n-->\n\n<p>REPL の中で Control+D を実行すると終了します。複数行に渡る式を入力とすることができます。\n\n</p>\n<!--\nThe special variable `_` (underscore) contains the result of the last expression.\n-->\n\n<p>特別な変数である <code>_</code> (アンダースコア) は一番最後の式の結果を保持します。\n\n</p>\n<pre><code>&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\n[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]\n&gt; _.length\n3\n&gt; _ += 1\n4</code></pre>\n<!--\nThe REPL provides access to any variables in the global scope. You can expose\na variable to the REPL explicitly by assigning it to the `context` object\nassociated with each `REPLServer`.  For example:\n-->\n\n<p>REPL はグローバルスコープに存在する全ての変数にアクセス可能です。\nそれぞれの <code>REPLServer</code> に紐づく <code>context</code> オブジェクトに変数を付与することで、\n明示的に変数を公開させることが可能です。 例:\n\n</p>\n<pre><code>// repl_test.js\nvar repl = require(&quot;repl&quot;),\n    msg = &quot;message&quot;;\n\nrepl.start().context.m = msg;</code></pre>\n<!--\nThings in the `context` object appear as local within the REPL:\n-->\n\n<p><code>context</code> オブジェクトに設定された変数は、REPL の中ではローカルな変数として現れます:\n\n</p>\n<pre><code>mjr:~$ node repl_test.js\n&gt; m\n&apos;message&apos;</code></pre>\n<!--\nThere are a few special REPL commands:\n-->\n\n<p>特別な REPL コマンドがいくつかあります:\n\n</p>\n<!--\n  - `.break` - While inputting a multi-line expression, sometimes you get lost\n    or just don't care about completing it. `.break` will start over.\n  - `.clear` - Resets the `context` object to an empty object and clears any\n    multi-line expression.\n  - `.exit` - Close the I/O stream, which will cause the REPL to exit.\n  - `.help` - Show this list of special commands.\n  - `.save` - Save the current REPL session to a file\n    >.save ./file/to/save.js\n  - `.load` - Load a file into the current REPL session.\n    >.load ./file/to/load.js\n-->\n\n<ul>\n<li><code>.break</code> - 複数行に渡って式を入力している間に、途中で分からなくなったり完了させなくても良くなることがあります。<code>.break</code> で最初からやり直します。</li>\n<li><code>.clear</code> - <code>context</code> オブジェクトを空の状態にリセットし、複数行に入力している式をクリアします。</li>\n<li><code>.exit</code> - I/Oストリームを閉じ、REPLを終了させます。</li>\n<li><code>.help</code> - このコマンドの一覧を表示します。</li>\n<li><code>.save</code> - 現在の REPL セッションをファイルに保存します。<blockquote>\n<p>.save ./file/to/save.js</p>\n</blockquote>\n</li>\n<li><code>.load</code> - 現在の REPL セッションにファイルをロードします。<blockquote>\n<p>.load ./file/to/load.js</p>\n</blockquote>\n</li>\n</ul>\n<!--\nThe following key combinations in the REPL have these special effects:\n-->\n\n<p>REPL では、以下のキーコンビネーションは特別な効果を持ちます\n\n</p>\n<!--\n  - `<ctrl>C` - Similar to the `.break` keyword.  Terminates the current\n    command.  Press twice on a blank line to forcibly exit.\n  - `<ctrl>D` - Similar to the `.exit` keyword.\n-->\n\n<ul>\n<li><code>&lt;ctrl&gt;C</code> - <code>.break</code> キーワードと同様です。\n現在のコマンドを終了します。\n強制的に終了したければ空の行で 2 回押してください。</li>\n<li><code>&lt;ctrl&gt;D</code> - <code>.exit</code> キーワードと同様です。</li>\n</ul>\n"
        }
      ],
      "type": "module",
      "displayName": "REPL"
    },
    {
      "textRaw": "Executing JavaScript",
      "name": "vm",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nYou can access this module with:\n-->\n\n<p>次のようにすることで、このモジュールにアクセスすることができます:\n\n</p>\n<pre><code>var vm = require(&apos;vm&apos;);</code></pre>\n<!--\nJavaScript code can be compiled and run immediately or compiled, saved, and run later.\n-->\n\n<p>JavaScript コードは、コンパイルされてすぐに実行されるか、コンパイルおよび保存されて後から実行されます。\n\n\n</p>\n",
      "methods": [
        {
          "textRaw": "vm.runInThisContext(code, [filename])",
          "type": "method",
          "name": "runInThisContext",
          "desc": "<!--\n`vm.runInThisContext()` compiles `code`, runs it and returns the result. Running\ncode does not have access to local scope. `filename` is optional, it's used only\nin stack traces.\n-->\n\n<p><code>vm.runInThisContext()</code> は <code>code</code> をコンパイルして実行し、結果を返します。\n実行されるコードはローカルスコープにアクセスしません。\n<code>filename</code> はオプションで、スタックトレースでのみ使用されます。\n\n</p>\n<!--\nExample of using `vm.runInThisContext` and `eval` to run the same code:\n-->\n\n<p><code>vm.runInThisContext</code> と <code>eval</code> で同じコードを実行する例:\n\n</p>\n<pre><code>var localVar = 123,\n    usingscript, evaled,\n    vm = require(&apos;vm&apos;);\n\nusingscript = vm.runInThisContext(&apos;localVar = 1;&apos;,\n  &apos;myfile.vm&apos;);\nconsole.log(&apos;localVar: &apos; + localVar + &apos;, usingscript: &apos; +\n  usingscript);\nevaled = eval(&apos;localVar = 1;&apos;);\nconsole.log(&apos;localVar: &apos; + localVar + &apos;, evaled: &apos; +\n  evaled);\n\n// localVar: 123, usingscript: 1\n// localVar: 1, evaled: 1</code></pre>\n<!--\n`vm.runInThisContext` does not have access to the local scope, so `localVar` is unchanged.\n`eval` does have access to the local scope, so `localVar` is changed.\n-->\n\n<p><code>vm.runInThisContext</code> はローカルスコープにアクセスしないので、<code>localVar</code> は変更されません。\n<code>eval</code> はローカルスコープにアクセスするので、<code>localVar</code> は変更されます。\n\n</p>\n<!--\nIn case of syntax error in `code`, `vm.runInThisContext` emits the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>code</code> が文法エラーとなるケースでは、<code>vm.runInThisContext</code> は標準エラーに文法エラーを出力し、\n例外をスローします。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "filename",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "vm.runInNewContext(code, [sandbox], [filename])",
          "type": "method",
          "name": "runInNewContext",
          "desc": "<!--\n`vm.runInNewContext` compiles `code`, then runs it in `sandbox` and returns the\nresult. Running code does not have access to local scope. The object `sandbox`\nwill be used as the global object for `code`.\n`sandbox` and `filename` are optional, `filename` is only used in stack traces.\n-->\n\n<p><code>vm.runInNewContext</code> は <code>code</code> をコンパイルし、それを <code>sandbox</code> の中で実行して\n結果を返します。\n実行されるコードはローカルスコープにアクセスしません。\n<code>sandbox</code> が <code>code</code> にとってのグローバルオブジェクトとして使われます。\n<code>sandbox</code> および <code>filename</code> はオプションで、<code>filename</code> \nスタックトレースでのみ使用されます。\n\n</p>\n<!--\nExample: compile and execute code that increments a global variable and sets a new one.\nThese globals are contained in the sandbox.\n-->\n\n<p>例: グローバル変数をインクリメントして新しい値をセットするコードをコンパイルおよび実行します。\nこれらのグローバル変数はサンドボックスに含まれます。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;),\n    vm = require(&apos;vm&apos;),\n    sandbox = {\n      animal: &apos;cat&apos;,\n      count: 2\n    };\n\nvm.runInNewContext(&apos;count += 1; name = &quot;kitty&quot;&apos;, sandbox, &apos;myfile.vm&apos;);\nconsole.log(util.inspect(sandbox));\n\n// { animal: &apos;cat&apos;, count: 3, name: &apos;kitty&apos; }</code></pre>\n<!--\nNote that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, `vm.runInNewContext` is quite useful, but safely running untrusted code\nrequires a separate process.\n-->\n\n<p>慎重を要するビジネスでは、信頼できないコードの実行は細心の注意が求められることに注意してください。\n偶然グローバル変数が漏れてしまうことを防ぐために、<code>vm.runInNewContext</code> はとても役立ちますが、\n信頼できないコードを安全に実行するために別のプロセスを要求します。\n\n</p>\n<!--\nIn case of syntax error in `code`, `vm.runInNewContext` emits the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>code</code> が文法エラーとなるケースでは、\n<code>vm.runInNewContext</code> は標準エラーに文法エラーを出力し、例外をスローします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "sandbox",
                  "optional": true
                },
                {
                  "name": "filename",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "vm.runInContext(code, context, [filename])",
          "type": "method",
          "name": "runInContext",
          "desc": "<!--\n`vm.runInContext` compiles `code`, then runs it in `context` and returns the\nresult. A (V8) context comprises a global object, together with a set of\nbuilt-in objects and functions. Running code does not have access to local scope\nand the global object held within `context` will be used as the global object\nfor `code`.\n`filename` is optional, it's used only in stack traces.\n\nExample: compile and execute code in a existing context.\n-->\n\n<p><code>vm.runInContext</code> は <code>code</code> をコンパイルして、\n<code>context</code> をコンテキストとして実行し、その結果を返します。\n(V8 の) コンテキストは組み込みのオブジェクトと関数と共に、\nグローバルオブジェクトを含みます。\n実行されるコードはローカルスコープにアクセスせず、\n<code>context</code> が <code>code</code> にとってのグローバルオブジェクトとして使われます。\n<code>filename</code> はオプションで、スタックトレースでのみ使用されます。\n\n</p>\n<p>例: コードをコンパイルして既存のコンテキストで実行します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;),\n    vm = require(&apos;vm&apos;),\n    initSandbox = {\n      animal: &apos;cat&apos;,\n      count: 2\n    },\n    context = vm.createContext(initSandbox);\n\nvm.runInContext(&apos;count += 1; name = &quot;CATT&quot;&apos;, context, &apos;myfile.vm&apos;);\nconsole.log(util.inspect(context));\n\n// { animal: &apos;cat&apos;, count: 3, name: &apos;CATT&apos; }</code></pre>\n<!--\nNote that `createContext` will perform a shallow clone of the supplied sandbox object in order to\ninitialise the global object of the freshly constructed context.\n\nNote that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, `vm.runInContext` is quite useful, but safely running untrusted code\nrequires a separate process.\n\nIn case of syntax error in `code`, `vm.runInContext` emits the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>createContext</code> は、新たに構築されたコンテキストのグローバルオブジェクトを\n初期化するために、与えられた <code>context</code> オブジェクトの浅いクローンを\n作成することに注意してください。\n\n</p>\n<p>慎重を要するビジネスでは、信頼できないコードの実行は細心の注意が求められることに注意してください。\n偶然グローバル変数が漏れてしまうことを防ぐために、<code>vm.runInContext</code> はとても役立ちますが、\n信頼できないコードを安全に実行するために別のプロセスを要求します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "context"
                },
                {
                  "name": "filename",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "vm.createContext([initSandbox])",
          "type": "method",
          "name": "createContext",
          "desc": "<!--\n`vm.createContext` creates a new context which is suitable for use as the 2nd argument of a subsequent\ncall to `vm.runInContext`. A (V8) context comprises a global object together with a set of\nbuild-in objects and functions. The optional argument `initSandbox` will be shallow-copied\nto seed the initial contents of the global object used by the context.\n-->\n\n<p><code>vm.createContext</code> は、続けて呼び出される <code>vm.runInContext</code> の第 2 引数として\n使用するのに適した新しいコンテキストを作成します。\n(V8 の) コンテキストは組み込みのオブジェクトと関数と共に、\nグローバルオブジェクトを含みます。\nオプションの引数 <code>initSandbox</code> は、このコンテキストで使用される\nグローバルオブジェクトの初期値としてシャローコピーされます。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "initSandbox",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "vm.createScript(code, [filename])",
          "type": "method",
          "name": "createScript",
          "desc": "<!--\n`createScript` compiles `code` but does not run it. Instead, it returns a\n`vm.Script` object representing this compiled code. This script can be run\nlater many times using methods below. The returned script is not bound to any\nglobal object. It is bound before each run, just for that run. `filename` is\noptional, it's only used in stack traces.\n-->\n\n<p><code>createScript</code> は <code>code</code> をコンパイルしますが、実行はしません。\n代わりに、コンパイルされたコードを表現する <code>vm.Script</code> オブジェクトを返します。\nこのスクリプトは後述のメソッドを使って後から何度でも実行することができます。\n返されるスクリプトはどのグローバルオブジェクトとも結びつけられていません。\nそれぞれの実行前に結びつけることで、そのとおりに実行されます。\n<code>filename</code> はオプションで、スタックトレースでのみ使用されます。\n\n</p>\n<!--\nIn case of syntax error in `code`, `createScript` prints the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>code</code> が文法エラーとなるケースでは、\n<code>createScript</code> は標準エラーに文法エラーを出力して例外をスローします。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "filename",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Script",
          "type": "class",
          "name": "Script",
          "desc": "<!--\nA class for running scripts.  Returned by vm.createScript.\n-->\n\n<p>スクリプトを実行するクラスです。<code>vm.createScript()</code> によって返されます。\n\n</p>\n",
          "methods": [
            {
              "textRaw": "script.runInThisContext()",
              "type": "method",
              "name": "runInThisContext",
              "desc": "<!--\nSimilar to `vm.runInThisContext` but a method of a precompiled `Script` object.\n`script.runInThisContext` runs the code of `script` and returns the result.\nRunning code does not have access to local scope, but does have access to the `global` object\n(v8: in actual context).\n-->\n\n<p><code>vm.runInThisContext</code> と同様ですが、\nこちらはプリコンパイル済みの <code>Script</code> オブジェクトのメソッドです。\n<code>script.runInThisContext</code> は <code>script</code> のコードを実行してその結果を返します。\n実行されるコードはローカルスコープにアクセスしませんが、\n<code>global</code> オブジェクト (v8: 実際のコンテキスト) にはアクセスします。\n\n</p>\n<!--\nExample of using `script.runInThisContext` to compile code once and run it multiple times:\n-->\n\n<p><code>script.runInThisContext</code> を使ってコードを一度だけコンパイルし、複数回実行する例:\n\n</p>\n<pre><code>var vm = require(&apos;vm&apos;);\n\nglobalVar = 0;\n\nvar script = vm.createScript(&apos;globalVar += 1&apos;, &apos;myfile.vm&apos;);\n\nfor (var i = 0; i &lt; 1000 ; i += 1) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000</code></pre>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "script.runInNewContext([sandbox])",
              "type": "method",
              "name": "runInNewContext",
              "desc": "<!--\nSimilar to `vm.runInNewContext` a method of a precompiled `Script` object.\n`script.runInNewContext` runs the code of `script` with `sandbox` as the global object and returns the result.\nRunning code does not have access to local scope. `sandbox` is optional.\n-->\n\n<p><code>vm.runInNewContext</code> と同様ですが、\nこちらはプリコンパイル済みの <code>Script</code> オブジェクトのメソッドです。\n<code>script.runInNewContext</code> は <code>sandbox</code> がグローバルオブジェクトであるかのように\n<code>script</code> のコードを実行してその結果を返します。\n実行されるコードはローカルスコープにアクセスしません。\n<code>sandbox</code> はオプションです。\n\n</p>\n<!--\nExample: compile code that increments a global variable and sets one, then execute this code multiple times.\nThese globals are contained in the sandbox.\n-->\n\n<p>例: グローバル変数をインクリメントしてセットするコードをコンパイルして、このコードを複数回実行します。\nこれらのグローバル変数はサンドボックスに含まれます。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;),\n    vm = require(&apos;vm&apos;),\n    sandbox = {\n      animal: &apos;cat&apos;,\n      count: 2\n    };\n\nvar script = vm.createScript(&apos;count += 1; name = &quot;kitty&quot;&apos;, &apos;myfile.vm&apos;);\n\nfor (var i = 0; i &lt; 10 ; i += 1) {\n  script.runInNewContext(sandbox);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: &apos;cat&apos;, count: 12, name: &apos;kitty&apos; }</code></pre>\n<!--\nNote that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, `script.runInNewContext` is quite useful, but safely running untrusted code\nrequires a separate process.\n-->\n\n<p>慎重を要するビジネスでは、信頼できないコードの実行は細心の注意が求められることに注意してください。\n偶然グローバル変数が漏れてしまうことを防ぐために、<code>script.runInNewContext</code> はとても役立ちますが、\n信頼できないコードを安全に実行するために別のプロセスを要求します。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "sandbox",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "vm"
    },
    {
      "textRaw": "Child Process",
      "name": "child_process",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nNode provides a tri-directional `popen(3)` facility through the\n`child_process` module.\n-->\n\n<p>Nodeは <code>child_process</code> モジュールを通じて、3 方向の <code>popen(3)</code>\n機能を提供します。\n\n</p>\n<!--\nIt is possible to stream data through a child's `stdin`, `stdout`, and\n`stderr` in a fully non-blocking way.\n-->\n\n<p>これは完全にノンブロッキングな方法で子プロセスの <code>stdin</code>、<code>stdout</code>、\nそして <code>stderr</code> を通じたデータストリームを実現します。\n\n</p>\n<!--\nTo create a child process use `require('child_process').spawn()`.\nTo create a child process use `require('child_process').spawn()` or\n`require('child_process').fork()`.  The semantics of each are slightly\ndifferent, and explained below.\n-->\n\n<p>子プロセスの生成は <code>require(&apos;child_process&apos;).spawn()</code> または\n<code>require(&apos;child_process&apos;).fork()</code> を使います。\nそれぞれの意味論は以下で説明するようにわずかに異なります。\n\n</p>\n",
      "classes": [
        {
          "textRaw": "Class: ChildProcess",
          "type": "class",
          "name": "ChildProcess",
          "desc": "<!--\n`ChildProcess` is an `EventEmitter`.\n-->\n\n<p><code>ChildProcess</code> は <code>EventEmitter</code> です。\n\n</p>\n<!--\nChild processes always have three streams associated with them. `child.stdin`,\n`child.stdout`, and `child.stderr`.  These may be shared with the stdio\nstreams of the parent process, or they may be separate stream objects\nwhich can be piped to and from.\n\nThe ChildProcess class is not intended to be used directly.  Use the\n`spawn()` or `fork()` methods to create a Child Process instance.\n-->\n\n<p>子プロセスは常に 3 本のストリームと関連づけられています。\n<code>child.stdin</code>、<code>child.stdout</code>、そして <code>child.stderr</code> です。\nそれらは親プロセスの標準入出力ストリームを共有するかもしれませんし、\n独立したストリームオブジェクトにパイプでつながれているかもしれません。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event:  'exit'",
              "type": "event",
              "name": "exit",
              "desc": "<!--\n* `code` {Number} the exit code, if it exited normally.\n* `signal` {String} the signal passed to kill the child process, if it\n  was killed by the parent.\n-->\n\n<ul>\n<li><code>code</code> {Number} 通常に終了した場合は終了コード。</li>\n<li><code>signal</code> {String} 親プロセスによって終了させられた場合は、\n子プロセスを終了するために送られたシグナル。</li>\n</ul>\n<!--\nThis event is emitted after the child process ends. If the process terminated\nnormally, `code` is the final exit code of the process, otherwise `null`. If\nthe process terminated due to receipt of a signal, `signal` is the string name\nof the signal, otherwise `null`.\n-->\n\n<p>このイベントは子プロセスが終了した後で生成されます。\nプロセスが普通に終了した場合、<code>code</code> はプロセスの終了コードです。\nそれ以外の場合は <code>null</code> です。\nプロセスがシグナルを受け取って終了した場合、<code>signal</code> は文字列によるシグナルの名前です。\nそれ以外の場合は <code>null</code> です。\n\n</p>\n<!--\nSee `waitpid(2)`.\n-->\n\n<p><code>waitpid(2)</code> を参照してください。\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "`stdin` {Stream object} ",
              "name": "stdin",
              "desc": "<!--\nA `Writable Stream` that represents the child process's `stdin`.\nClosing this stream via `end()` often causes the child process to terminate.\n\nIf the child stdio streams are shared with the parent, then this will\nnot be set.\n-->\n\n<p>子プロセスの <code>stdin</code> を表現する <code>Writable Stream</code> です。\n多くの場合、<code>end()</code> を通じてこのストリームを閉じると子プロセスが終了する原因となります。\n\n</p>\n<p>子プロセスの標準入出力が親プロセスと共有されている場合は設定されません。\n\n</p>\n"
            },
            {
              "textRaw": "`stdout` {Stream object} ",
              "name": "stdout",
              "desc": "<!--\nA `Readable Stream` that represents the child process's `stdout`.\n\nIf the child stdio streams are shared with the parent, then this will\nnot be set.\n-->\n\n<p>子プロセスの <code>stdout</code> を表現する <code>Readable Stream</code> です。\n\n</p>\n<p>子プロセスの標準入出力が親プロセスと共有されている場合は設定されません。\n\n</p>\n"
            },
            {
              "textRaw": "`stderr` {Stream object} ",
              "name": "stderr",
              "desc": "<!--\nA `Readable Stream` that represents the child process's `stderr`.\n\nIf the child stdio streams are shared with the parent, then this will\nnot be set.\n-->\n\n<p>子プロセスの <code>stderr</code> を表現する <code>Readable Stream</code> です。\n\n</p>\n<p>子プロセスの標準入出力が親プロセスと共有されている場合は設定されません。\n\n</p>\n"
            },
            {
              "textRaw": "`pid` {Integer} ",
              "name": "pid",
              "desc": "<!--\nThe PID of the child process.\n-->\n\n<p>子プロセスの PID です。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\nconsole.log(&apos;Spawned child pid: &apos; + grep.pid);\ngrep.stdin.end();</code></pre>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "child.kill([signal])",
              "type": "method",
              "name": "kill",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`signal` {String} ",
                      "name": "signal",
                      "type": "String",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "signal",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nSend a signal to the child process. If no argument is given, the process will\nbe sent `'SIGTERM'`. See `signal(7)` for a list of available signals.\n-->\n\n<p>子プロセスにシグナルを送ります。\n引数が与えられない場合、子プロセスには <code>&apos;SIGTERM&apos;</code> が送られます。\n利用可能なシグナルの一覧は <code>signal(7)</code> を参照してください。\n\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\ngrep.on(&apos;exit&apos;, function (code, signal) {\n  console.log(&apos;child process terminated due to receipt of signal &apos;+signal);\n});\n\n// send SIGHUP to process\ngrep.kill(&apos;SIGHUP&apos;);</code></pre>\n<!--\nNote that while the function is called `kill`, the signal delivered to the child\nprocess may not actually kill it.  `kill` really just sends a signal to a process.\n-->\n\n<p>この関数は <code>kill</code> と呼ばれるものの、\n子プロセスに届けられるシグナルが実際には子プロセスを殺さないかもしれないことに注意してください。\n<code>kill</code> はただプロセスにシグナルを送るだけです。\n\n</p>\n<!--\nSee `kill(2)`\n-->\n\n<p><code>kill(2)</code> を参照してください。\n\n</p>\n"
            },
            {
              "textRaw": "child.send(message, [sendHandle])",
              "type": "method",
              "name": "send",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`message` {Object} ",
                      "name": "message",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`sendHandle` {Handle object} ",
                      "name": "sendHandle",
                      "type": "Handle object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "message"
                    },
                    {
                      "name": "sendHandle",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<!--\nSend a message (and, optionally, a handle object) to a child process.\n\nSee `child_process.fork()` for details.\n-->\n\n<p>子プロセスにメッセージ (もしあれば、オプションのハンドルオブジェクト)\nを送ります。詳細は <code>child_process.fork()</code> を参照してください。\n\n</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "child_process.spawn(command, [args], [options])",
          "type": "method",
          "name": "spawn",
          "desc": "<!--\n* `command` {String} The command to run\n* `args` {Array} List of string arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `customFds` {Array} **Deprecated** File descriptors for the child to use\n    for stdio.  (See below)\n  * `env` {Object} Environment key-value pairs\n* return: {ChildProcess object}\n-->\n\n<ul>\n<li><code>command</code> {String} 実行するコマンド</li>\n<li><code>args</code> {Array} 文字列による引数の配列</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} 子プロセスのカレントワーキングディレクトリ</li>\n<li><code>customFds</code> {Array} <strong>Deprecated</strong> 子プロセスが標準入出力として使用する\nファイル記述子の配列 (後述)</li>\n<li><code>env</code> {Object} 環境変数として与えるキー・値のペア</li>\n<li><code>setsid</code> {Boolean}</li>\n</ul>\n</li>\n<li>return: {ChildProcess object}</li>\n</ul>\n<!--\nLaunches a new process with the given `command`, with  command line arguments in `args`.\nIf omitted, `args` defaults to an empty Array.\n-->\n\n<p><code>args</code> をコマンドライン引数として、与えられた <code>command</code> で新しいプロセスを起動します。\n<code>args</code> が省略された場合、空の配列がデフォルトとなります。\n\n</p>\n<!--\nThe third argument is used to specify additional options, which defaults to:\n-->\n\n<p>第 3 引数は追加のオプションを指定するために使われ、そのデフォルトは:\n\n</p>\n<pre><code>{ cwd: undefined,\n  env: process.env\n}</code></pre>\n<!--\n`cwd` allows you to specify the working directory from which the process is spawned.\nUse `env` to specify environment variables that will be visible to the new process.\n-->\n\n<p><code>cwd</code> で起動されたプロセスのワーキングディレクトリを指定することができます。\n<code>env</code> は新しいプロセスに見える環境変数を指定するために使います。\n\n</p>\n<!--\nExample of running `ls -lh /usr`, capturing `stdout`, `stderr`, and the exit code:\n-->\n\n<p>ls -lh /usr<code> を実行して </code>stdout<code>、</code>stderr`、および終了コードを取得する例:\n\n</p>\n<pre><code>var util  = require(&apos;util&apos;),\n    spawn = require(&apos;child_process&apos;).spawn,\n    ls    = spawn(&apos;ls&apos;, [&apos;-lh&apos;, &apos;/usr&apos;]);\n\nls.stdout.on(&apos;data&apos;, function (data) {\n  console.log(&apos;stdout: &apos; + data);\n});\n\nls.stderr.on(&apos;data&apos;, function (data) {\n  console.log(&apos;stderr: &apos; + data);\n});\n\nls.on(&apos;exit&apos;, function (code) {\n  console.log(&apos;child process exited with code &apos; + code);\n});</code></pre>\n<!--\nExample: A very elaborate way to run 'ps ax | grep ssh'\n-->\n\n<p>とても手の込んだ方法で実行する &apos;ps ax | grep ssh&apos; の例:\n\n</p>\n<pre><code>var util  = require(&apos;util&apos;),\n    spawn = require(&apos;child_process&apos;).spawn,\n    ps    = spawn(&apos;ps&apos;, [&apos;ax&apos;]),\n    grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\nps.stdout.on(&apos;data&apos;, function (data) {\n  grep.stdin.write(data);\n});\n\nps.stderr.on(&apos;data&apos;, function (data) {\n  console.log(&apos;ps stderr: &apos; + data);\n});\n\nps.on(&apos;exit&apos;, function (code) {\n  if (code !== 0) {\n    console.log(&apos;ps process exited with code &apos; + code);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on(&apos;data&apos;, function (data) {\n  console.log(data);\n});\n\ngrep.stderr.on(&apos;data&apos;, function (data) {\n  console.log(&apos;grep stderr: &apos; + data);\n});\n\ngrep.on(&apos;exit&apos;, function (code) {\n  if (code !== 0) {\n    console.log(&apos;grep process exited with code &apos; + code);\n  }\n});</code></pre>\n<!--\nExample of checking for failed exec:\n-->\n\n<p>exec の失敗をチェックする例:\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    child = spawn(&apos;bad_command&apos;);\n\nchild.stderr.setEncoding(&apos;utf8&apos;);\nchild.stderr.on(&apos;data&apos;, function (data) {\n  if (/^execvp\\(\\)/.test(data)) {\n    console.log(&apos;Failed to start child process.&apos;);\n  }\n});</code></pre>\n<!--\nNote that if spawn receives an empty options object, it will result in\nspawning the process with an empty environment rather than using\n`process.env`. This due to backwards compatibility issues with a deprecated\nAPI.\n-->\n\n<p><code>spawn()</code> は空の <code>options</code> オブジェクトを受け取ると、\n<code>process.env</code> を使うのではなく，空の環境変数で子プロセスを起動します。\nこれは廃止された API との互換性のためです。\n\n</p>\n<!--\nThere is a deprecated option called `customFds` which allows one to specify\nspecific file descriptors for the stdio of the child process. This API was\nnot portable to all platforms and therefore removed.\nWith `customFds` it was possible to hook up the new process' `[stdin, stdout,\nstderr]` to existing streams; `-1` meant that a new stream should be created.\nUse at your own risk.\n\nThere are several internal options. In particular `stdinStream`,\n`stdoutStream`, `stderrStream`. They are for INTERNAL USE ONLY. As with all\nundocumented APIs in Node, they should not be used.\n\nSee also: `child_process.exec()` and `child_process.fork()`\n-->\n\n<p>指定のファイル記述子を子プロセスの標準入出力に指定することを可能にする、\n<code>customFds</code> と呼ばれる廃止されたオプションがありました。\nこの API は全てのプラットフォームに移植可能ではないために削除されました。\n<code>customFds</code> は新しいプロセスの <code>[stdin, stdout, stderr]</code> を既存のストリームに接続することを可能にしました;\n<code>-1</code> は新しいストリームが作られなければならないことを意味していました。\n使用する場合は自己責任で。\n\n</p>\n<p>よく似た内部的なオプションがあります。\n具体的には <code>stdinStream</code>、<code>stdoutStream</code>、<code>stderrStream</code> です。\nこれらは <strong>内部用途</strong>です。\nNode のドキュメント化されていない API と同様に、\nこれらを使用すべきではありません。\n\n</p>\n<p>関連項目: <code>child_process.exec()</code> および <code>child_process.fork()</code>\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "command"
                },
                {
                  "name": "args",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "child_process.exec(command, [options], callback)",
          "type": "method",
          "name": "exec",
          "desc": "<!--\n* `command` {String} The command to run, with space-separated arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `customFds` {Array} **Deprecated** File descriptors for the child to use\n    for stdio.  (See below)\n  * `env` {Object} Environment key-value pairs\n  * `encoding` {String} (Default: 'utf8')\n  * `timeout` {Number} (Default: 0)\n  * `maxBuffer` {Number} (Default: 200*1024)\n  * `killSignal` {String} (Default: 'SIGTERM')\n* `callback` {Function} called with the output when process terminates\n  * `error` {Error}\n  * `stdout` {Buffer}\n  * `stderr` {Buffer}\n* Return: ChildProcess object\n-->\n\n<ul>\n<li><code>command</code> {String} 実行するコマンド、空白で区切られた引数を持ちます</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} 子プロセスのカレントワーキングディレクトリ</li>\n<li><code>customFds</code> {Array} <strong>Deprecated</strong> 子プロセスが標準入出力として使用する\nファイル記述子の配列 (後述)</li>\n<li><code>env</code> {Object} 環境変数として与えるキー・値のペア</li>\n<li><code>setsid</code> {Boolean}</li>\n<li><code>encoding</code> {String} (Default: &apos;utf8&apos;)</li>\n<li><code>timeout</code> {Number} (Default: 0)</li>\n<li><code>maxBuffer</code> {Number} (Default: 200*1024)</li>\n<li><code>killSignal</code> {String} (Default: &apos;SIGTERM&apos;)</li>\n</ul>\n</li>\n<li><code>callback</code> {Function} プロセスが終了するとその出力を伴って呼び出されます<ul>\n<li><code>error</code> {Error}</li>\n<li><code>stdout</code> {Buffer}</li>\n<li><code>stderr</code> {Buffer}</li>\n</ul>\n</li>\n<li>Return: ChildProcess object</li>\n</ul>\n<!--\nRuns a command in a shell and buffers the output.\n-->\n\n<p>コマンドをシェルで実行し、その出力をバッファに格納します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;),\n    exec = require(&apos;child_process&apos;).exec,\n    child;\n\nchild = exec(&apos;cat *.js bad_file | wc -l&apos;,\n  function (error, stdout, stderr) {\n    console.log(&apos;stdout: &apos; + stdout);\n    console.log(&apos;stderr: &apos; + stderr);\n    if (error !== null) {\n      console.log(&apos;exec error: &apos; + error);\n    }\n});</code></pre>\n<!--\nThe callback gets the arguments `(error, stdout, stderr)`. On success, `error`\nwill be `null`.  On error, `error` will be an instance of `Error` and `err.code`\nwill be the exit code of the child process, and `err.signal` will be set to the\nsignal that terminated the process.\n-->\n\n<p>コールバックは引数 <code>(error, stdout, stderr)</code> を得ます。\n成功すると、<code>error</code> は <code>null</code> になります。\nエラーだと、<code>error</code> は <code>Error</code> のインスタンスとなり、\n<code>err.code</code> は子プロセスの終了コード、\n<code>err.signal</code> はプロセスを終了させたシグナルとなります。\n\n</p>\n<!--\nThere is a second optional argument to specify several options. The\ndefault options are\n-->\n\n<p>任意の第 2 引数でいくつかのオプションを指定することができます。\nオプションのデフォルトは\n\n</p>\n<pre><code>{ encoding: &apos;utf8&apos;,\n  timeout: 0,\n  maxBuffer: 200*1024,\n  killSignal: &apos;SIGTERM&apos;,\n  cwd: null,\n  env: null }</code></pre>\n<!--\nIf `timeout` is greater than 0, then it will kill the child process\nif it runs longer than `timeout` milliseconds. The child process is killed with\n`killSignal` (default: `'SIGTERM'`). `maxBuffer` specifies the largest\namount of data allowed on stdout or stderr - if this value is exceeded then\nthe child process is killed.\n-->\n\n<p>もし <code>timeout</code> が 0 より大きいと、\n子プロセスは実行時間が <code>timeout</code> ミリ秒よりも長くなると kill されます。\n子プロセスは <code>killSignal</code> で kill されます (デフォルト: <code>&apos;SIGTERM&apos;</code>)。\n<code>maxBuffer</code> は標準出力と標準エラーの最大のデータ量を指定します － この値を超えると子プロセスは kill されます。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "command"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "child_process.execFile(file, args, options, callback)",
          "type": "method",
          "name": "execFile",
          "desc": "<!--\n* `file` {String} The filename of the program to run\n* `args` {Array} List of string arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `customFds` {Array} **Deprecated** File descriptors for the child to use\n    for stdio.  (See below)\n  * `env` {Object} Environment key-value pairs\n  * `encoding` {String} (Default: 'utf8')\n  * `timeout` {Number} (Default: 0)\n  * `maxBuffer` {Number} (Default: 200*1024)\n  * `killSignal` {String} (Default: 'SIGTERM')\n* `callback` {Function} called with the output when process terminates\n  * `error` {Error}\n  * `stdout` {Buffer}\n  * `stderr` {Buffer}\n* Return: ChildProcess object\n-->\n\n<ul>\n<li><code>file</code> {String} 実行するプログラムのファイル名</li>\n<li><code>args</code> {Array} 文字列による引数の配列</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} 子プロセスのカレントワーキングディレクトリ</li>\n<li><code>customFds</code> {Array} <strong>Deprecated</strong> 子プロセスが標準入出力として使用する\nファイル記述子の配列 (後述)</li>\n<li><code>env</code> {Object} 環境変数として与えるキー・値のペア</li>\n<li><code>setsid</code> {Boolean}</li>\n<li><code>encoding</code> {String} (Default: &apos;utf8&apos;)</li>\n<li><code>timeout</code> {Number} (Default: 0)</li>\n<li><code>maxBuffer</code> {Number} (Default: 200*1024)</li>\n<li><code>killSignal</code> {String} (Default: &apos;SIGTERM&apos;)</li>\n</ul>\n</li>\n<li><code>callback</code> {Function} プロセスが終了するとその出力を伴って呼び出されます<ul>\n<li><code>error</code> {Error}</li>\n<li><code>stdout</code> {Buffer}</li>\n<li><code>stderr</code> {Buffer}</li>\n</ul>\n</li>\n<li>Return: ChildProcess object</li>\n</ul>\n<!--\nThis is similar to `child_process.exec()` except it does not execute a\nsubshell but rather the specified file directly. This makes it slightly\nleaner than `child_process.exec`. It has the same options.\n-->\n\n<p>子シェルで実行する代わりに指定されたファイルを直接実行することを除いて\n<code>child_process.exec()</code> と同様です。\nこれは <code>child_process.exec</code> より若干効率的で、同じオプションを持ちます。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "file"
                },
                {
                  "name": "args"
                },
                {
                  "name": "options"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "child_process.fork(modulePath, [args], [options])",
          "type": "method",
          "name": "fork",
          "desc": "<!--\n* `modulePath` {String} The module to run in the child\n* `args` {Array} List of string arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `customFds` {Array} **Deprecated** File descriptors for the child to use\n    for stdio.  (See below)\n  * `env` {Object} Environment key-value pairs\n  * `encoding` {String} (Default: 'utf8')\n  * `timeout` {Number} (Default: 0)\n* Return: ChildProcess object\n-->\n\n<ul>\n<li><code>modulePath</code> {String} 子プロセスで実行するモジュール</li>\n<li><code>args</code> {Array} 文字列による引数の配列</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} 子プロセスのカレントワーキングディレクトリ</li>\n<li><code>customFds</code> {Array} <strong>Deprecated</strong> 子プロセスが標準入出力として使用する\nファイル記述子の配列 (後述)</li>\n<li><code>env</code> {Object} 環境変数として与えるキー・値のペア</li>\n<li><code>setsid</code> {Boolean}</li>\n<li><code>encoding</code> {String} (Default: &apos;utf8&apos;)</li>\n<li><code>timeout</code> {Number} (Default: 0)</li>\n</ul>\n</li>\n<li>Return: ChildProcess object</li>\n</ul>\n<!--\nThis is a special case of the `spawn()` functionality for spawning Node\nprocesses. In addition to having all the methods in a normal ChildProcess\ninstance, the returned object has a communication channel built-in. The\nchannel is written to with `child.send(message, [sendHandle])` and messages\nare received by a `'message'` event on the child.\n-->\n\n<p>これは <code>spawn()</code> の特別版で、Node プロセスを起動します。\n返されるオブジェクトは通常の ChildProcess の全てのメソッドに加えて、\n組み込みの通信チャネルを持ちます。\nチャネルは <code>child.send(message, [sendHandle])</code> によって書き込まれ、\nメッセージを受信すると <code>child</code> 上で <code>&apos;message&apos;</code> イベントが生成されます。\n\n</p>\n<!--\nFor example:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var cp = require(&apos;child_process&apos;);\n\nvar n = cp.fork(__dirname + &apos;/sub.js&apos;);\n\nn.on(&apos;message&apos;, function(m) {\n  console.log(&apos;PARENT got message:&apos;, m);\n});\n\nn.send({ hello: &apos;world&apos; });</code></pre>\n<!--\nAnd then the child script, `'sub.js'` might look like this:\n-->\n\n<p>そして子スクリプトの <code>&apos;sub.js&apos;</code> は次のようになります:\n\n</p>\n<pre><code>process.on(&apos;message&apos;, function(m) {\n  console.log(&apos;CHILD got message:&apos;, m);\n});\n\nprocess.send({ foo: &apos;bar&apos; });</code></pre>\n<!--\nIn the child the `process` object will have a `send()` method, and `process`\nwill emit objects each time it receives a message on its channel.\n-->\n\n<p>子供の <code>process</code> オブジェクトは <code>send()</code> メソッドを持ち、\n<code>process</code> はチャネルでメッセージを受信するたびにイベントを生成します。\n\n</p>\n<!--\nBy default the spawned Node process will have the stdin, stdout, stderr\nassociated with the parent's.\n-->\n\n<p>デフォルトでは、起動された Node プロセスは親プロセスに関連づけられた標準入力、\n標準出力、標準エラー出力を持ちます。\n\n</p>\n<!--\nThese child Nodes are still whole new instances of V8. Assume at least 30ms\nstartup and 10mb memory for each new Node. That is, you cannot create many\nthousands of them.\n-->\n\n<p>これらの子 Node は、やはり V8 の新しいインスタンスです。\n新しい Node ごとに少なくとも 30 ミリ秒の起動時間と \n10MB のメモリを前提としてください。\nつまり、数千の子プロセスを作ることは出来ません。\n\n</p>\n<!--\nThe `sendHandle` option to `child.send()` is for sending a handle object to\nanother process. Child will receive the handle as as second argument to the\n`message` event. Here is an example of sending a handle:\n-->\n\n<p><code>child.send()</code> の <code>sendHandle</code> オプションはハンドルオブジェクトを別プロセスに\n送ります。\n子プロセスはそのハンドルを <code>message</code> イベントの第2引数として受け取ります。\nこれはハンドルを送信するサンプルです。\n\n\n</p>\n<pre><code>var server = require(&apos;net&apos;).createServer();\nvar child = require(&apos;child_process&apos;).fork(__dirname + &apos;/child.js&apos;);\n// Open up the server object and send the handle.\nserver.listen(1337, function() {\n  child.send({ server: true }, server._handle);\n});</code></pre>\n<!--\nHere is an example of receiving the server handle and sharing it between\nprocesses:\n-->\n\n<p>これはサーバのハンドルを受信してプロセス間で共有するサンプルです。\n\n\n</p>\n<pre><code>process.on(&apos;message&apos;, function(m, serverHandle) {\n  if (serverHandle) {\n    var server = require(&apos;net&apos;).createServer();\n    server.listen(serverHandle);\n  }\n});</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "modulePath"
                },
                {
                  "name": "args",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Child Process"
    },
    {
      "textRaw": "Assert",
      "name": "assert",
      "stability": 5,
      "stabilityText": "Locked",
      "desc": "<!--\nThis module is used for writing unit tests for your applications, you can\naccess it with `require('assert')`.\n-->\n\n<p>このモジュールはアプリケーションの単体テストを記述するために使用され、\n<code>require(&apos;assert&apos;)</code> でアクセスできます。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "assert.fail(actual, expected, message, operator)",
          "type": "method",
          "name": "fail",
          "desc": "<!--\nThrows an exception that displays the values for `actual` and `expected` separated by the provided operator.\n-->\n\n<p><code>actual</code> と <code>expected</code> を <code>operator</code> で区切ったメッセージを持つ例外を\nスローします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message"
                },
                {
                  "name": "operator"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert(value, message), assert.ok(value, [message])",
          "type": "method",
          "name": "ok",
          "desc": "<!--\nTests if value is a `true` value, it is equivalent to `assert.equal(true, value, message);`\n-->\n\n<p><code>value</code> が <code>true</code> かテストします、\nこれは <code>assert.equal(true, value, message);</code> と等価です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "message)"
                },
                {
                  "name": "assert.ok(value"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.equal(actual, expected, [message])",
          "type": "method",
          "name": "equal",
          "Tests shallow, coercive equality with the equal comparison operator ( `": "=` ).",
          "desc": "<p><code>==</code> 演算子を強制して浅い同値性をテストします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.notEqual(actual, expected, [message])",
          "type": "method",
          "name": "notEqual",
          "Tests shallow, coercive non-equality with the not equal comparison operator ( `!": "` ).",
          "desc": "<p><code>==</code> 演算子を強制して浅い非同値性をテストします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.deepEqual(actual, expected, [message])",
          "type": "method",
          "name": "deepEqual",
          "desc": "<!--\nTests for deep equality.\n-->\n\n<p>深い同値性をテストします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.notDeepEqual(actual, expected, [message])",
          "type": "method",
          "name": "notDeepEqual",
          "desc": "<!--\nTests for any deep inequality.\n-->\n\n<p>深い非同値性をテストします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.strictEqual(actual, expected, [message])",
          "type": "method",
          "name": "strictEqual",
          "Tests strict equality, as determined by the strict equality operator ( `": "==` )",
          "desc": "<p><code>===</code> 演算子で厳密な同値性をテストします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.notStrictEqual(actual, expected, [message])",
          "type": "method",
          "name": "notStrictEqual",
          "Tests strict non-equality, as determined by the strict not equal operator ( `!": "=` )",
          "desc": "<p><code>!==</code> 演算子で厳密な非同値性をテストします。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.throws(block, [error], [message])",
          "type": "method",
          "name": "throws",
          "desc": "<!--\nExpects `block` to throw an error. `error` can be constructor, regexp or \nvalidation function.\n-->\n\n<p><code>block</code> がエラーをスローすることを期待します。\n<code>error</code> はコンストラクタ、正規表現、または検証関数にすることができます。\n\n</p>\n<!--\nValidate instanceof using constructor:\n-->\n\n<p>コンストラクタを使って instanceof で検証:\n\n</p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  Error\n);</code></pre>\n<!--\nValidate error message using RegExp:\n-->\n\n<p>正規表現を使ってエラーメッセージを検証:\n\n</p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  /value/\n);</code></pre>\n<!--\nCustom error validation:\n-->\n\n<p>独自のエラー検証:\n\n</p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\n      return true;\n    }\n  },\n  &quot;unexpected error&quot;\n);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "block"
                },
                {
                  "name": "error",
                  "optional": true
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.doesNotThrow(block, [error], [message])",
          "type": "method",
          "name": "doesNotThrow",
          "desc": "<!--\nExpects `block` not to throw an error, see assert.throws for details.\n-->\n\n<p><code>block</code> がエラーをスローしないことを期待します。\n詳細は assert.throws を参照してください。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "block"
                },
                {
                  "name": "error",
                  "optional": true
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "assert.ifError(value)",
          "type": "method",
          "name": "ifError",
          "desc": "<!--\nTests if value is not a false value, throws if it is a true value. Useful when\ntesting the first argument, `error` in callbacks.\n-->\n\n<p><code>value</code> が false でないことをテストし、true だったらそれをスローします。\nコールバックの第 1 引数である <code>error</code> をテストするのに便利です。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "value"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Assert"
    },
    {
      "textRaw": "TTY",
      "name": "tty",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nUse `require('tty')` to access this module.\n-->\n\n<p><code>require(&apos;tty&apos;)</code> でこのモジュールにアクセスします。\n\n</p>\n<!--\nExample:\n-->\n\n<p>例:\n\n</p>\n<pre><code>var tty = require(&apos;tty&apos;);\nprocess.stdin.resume();\ntty.setRawMode(true);\nprocess.stdin.on(&apos;keypress&apos;, function(char, key) {\n  if (key &amp;&amp; key.ctrl &amp;&amp; key.name == &apos;c&apos;) {\n    console.log(&apos;graceful exit&apos;);\n    process.exit()\n  }\n});</code></pre>\n",
      "methods": [
        {
          "textRaw": "tty.isatty(fd)",
          "type": "method",
          "name": "isatty",
          "desc": "<!--\nReturns `true` or `false` depending on if the `fd` is associated with a\nterminal.\n-->\n\n<p><code>fd</code> が端末に関連づけられているかどうかを <code>true</code> または <code>false</code> で返します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "tty.setRawMode(mode)",
          "type": "method",
          "name": "setRawMode",
          "desc": "<!--\n`mode` should be `true` or `false`. This sets the properties of the current\nprocess's stdin fd to act either as a raw device or default.\n-->\n\n<p><code>mode</code> は <code>true</code> または <code>false</code> です。\nこれは現在のプロセスの標準入力ファイル記述子をローデバイスまたはデフォルトに振る舞うよう設定します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "mode"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "TTY"
    },
    {
      "textRaw": "Zlib",
      "name": "zlib",
      "stability": 3,
      "stabilityText": "Stable",
      "desc": "<!--\nYou can access this module with:\n-->\n\n<p>このモジュールは次のようにアクセスできます。\n\n</p>\n<pre><code>var zlib = require(&apos;zlib&apos;);</code></pre>\n<!--\nThis provides bindings to Gzip/Gunzip, Deflate/Inflate, and\nDeflateRaw/InflateRaw classes.  Each class takes the same options, and\nis a readable/writable Stream.\n-->\n\n<p>これは Gzip/Gunzip、Deflate/Inflate、そして DeflateRaw/InflateRaw\nへバインディングするクラスを提供します。\nどのクラスも同じオプションを持つ、読み込みと書き込みが可能なストリームです。\n\n</p>\n<h2>Examples</h2>\n<!--\nCompressing or decompressing a file can be done by piping an\nfs.ReadStream into a zlib stream, then into an fs.WriteStream.\n-->\n\n<p>ファイルを圧縮および解凍するには、fs.ReadStream から zlib へ、\nそして fs.WriteStream へパイプをつなぐだけです。\n\n</p>\n<pre><code>var gzip = zlib.createGzip();\nvar fs = require(&apos;fs&apos;);\nvar inp = fs.createReadStream(&apos;input.txt&apos;);\nvar out = fs.createWriteStream(&apos;input.txt.gz&apos;);\n\ninp.pipe(gzip).pipe(out);</code></pre>\n<!--\nCompressing or decompressing data in one step can be done by using\nthe convenience methods.\n-->\n\n<p>データの圧縮または解凍は <a href=\"#convenience_Methods\">簡易メソッド</a>\nを使うことにより、ワンステップで行うことができます。\n\n</p>\n<pre><code>var input = &apos;.................................&apos;;\nzlib.deflate(input, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString(&apos;base64&apos;));\n  }\n});\n\nvar buffer = new Buffer(&apos;eJzT0yMAAGTvBe8=&apos;, &apos;base64&apos;);\nzlib.unzip(buffer, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString());\n  }\n});</code></pre>\n<!--\nTo use this module in an HTTP client or server, use the\n[accept-encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3)\non requests, and the\n[content-encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11)\nheader on responses.\n\n**Note: these examples are drastically simplified to show\nthe basic concept.**  Zlib encoding can be expensive, and the results\nought to be cached.  See [Memory Usage Tuning](#memory_Usage_Tuning)\nbelow for more information on the speed/memory/compression\ntradeoffs involved in zlib usage.\n-->\n\n<p>このモジュールを HTTP クライアントとサーバで使うには、リクエストに\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\">accept-encoding</a>\nヘッダを、レスポンスに\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">content-encoding</a>\nヘッダを使用します。\n\n</p>\n<p><strong>注意:\nこれらのサンプルは基本コンセプトを見せるためにとても単純化されています。</strong>\nZlib エンコーディングは高価なので、結果はキャッシュされるべきです。\nzlibの使い方に関する速度／メモリ／圧縮率のトレードオフについてより詳しくは、\n後述の <a href=\"#memory_Usage_Tuning\">Memory Usage Tuning</a> を参照してください。\n\n</p>\n<pre><code>// client request example\nvar zlib = require(&apos;zlib&apos;);\nvar http = require(&apos;http&apos;);\nvar fs = require(&apos;fs&apos;);\nvar request = http.get({ host: &apos;izs.me&apos;,\n                         path: &apos;/&apos;,\n                         port: 80,\n                         headers: { &apos;accept-encoding&apos;: &apos;gzip,deflate&apos; } });\nrequest.on(&apos;response&apos;, function(response) {\n  var output = fs.createWriteStream(&apos;izs.me_index.html&apos;);\n\n  switch (response.headers[&apos;content-encoding&apos;]) {\n    // or, just use zlib.createUnzip() to handle both cases\n    case &apos;gzip&apos;:\n      response.pipe(zlib.createGunzip()).pipe(output);\n      break;\n    case &apos;deflate&apos;:\n      response.pipe(zlib.createInflate()).pipe(output);\n      break;\n    default:\n      response.pipe(output);\n      break;\n  }\n});\n\n// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nvar zlib = require(&apos;zlib&apos;);\nvar http = require(&apos;http&apos;);\nvar fs = require(&apos;fs&apos;);\nhttp.createServer(function(request, response) {\n  var raw = fs.createReadStream(&apos;index.html&apos;);\n  var acceptEncoding = request.headers[&apos;accept-encoding&apos;];\n  if (!acceptEncoding) {\n    acceptEncoding = &apos;&apos;;\n  }\n\n  // Note: this is not a conformant accept-encoding parser.\n  // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (acceptEncoding.match(/\\bdeflate\\b/)) {\n    response.writeHead(200, { &apos;content-encoding&apos;: &apos;deflate&apos; });\n    raw.pipe(zlib.createDeflate()).pipe(response);\n  } else if (acceptEncoding.match(/\\bgzip\\b/)) {\n    response.writeHead(200, { &apos;content-encoding&apos;: &apos;gzip&apos; });\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    response.writeHead(200, {});\n    raw.pipe(response);\n  }\n}).listen(1337);</code></pre>\n",
      "miscs": [
        {
          "textRaw": "Constants",
          "name": "Constants",
          "type": "misc",
          "desc": "<!--\nAll of the constants defined in zlib.h are also defined on\n`require('zlib')`.  They are described in more detail in the zlib\ndocumentation.  See <http://zlib.net/manual.html#Constants>\nfor more details.\n-->\n\n<p>zlib.h に定義された定数は <code>require(&apos;zlib&apos;)</code> でも定義されます。\nそれらは zlib のドキュメントでより詳しく説明されます。\n詳細は <a href=\"http://zlib.net/manual.html#Constants\">http://zlib.net/manual.html#Constants</a> を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Convenience Methods",
          "name": "Convenience Methods",
          "type": "misc",
          "desc": "<!--\nAll of these take a string or buffer as the first argument, and call the\nsupplied callback with `callback(error, result)`.  The\ncompression/decompression engine is created using the default settings\nin all convenience methods.  To supply different options, use the\nzlib classes directly.\n-->\n\n<p>これらは全て第 1 引数として文字列またはバッファを受け取り、\n与えられたコールバック <code>callback(error, result)</code> を呼び出します。\n全ての簡易メソッドで、圧縮・解凍エンジンはデフォルトの設定で作成されます。\n異なったオプションを与えるには、zlib のクラスを直接使用してください。\n\n</p>\n"
        },
        {
          "textRaw": "Options",
          "name": "Options",
          "type": "misc",
          "desc": "<!--\nEach class takes an options object.  All options are optional.  (The\nconvenience methods use the default settings for all options.)\n\nNote that some options are only\nrelevant when compressing, and are ignored by the decompression classes.\n\n* chunkSize (default: 16*1024)\n* windowBits\n* level (compression only)\n* memLevel (compression only)\n* strategy (compression only)\n\nSee the description of `deflateInit2` and `inflateInit2` at\n<http://zlib.net/manual.html#Advanced> for more information on these.\n-->\n\n<p>どのクラスもオプションオブジェクトを受け取ります。\n全てのオプションは任意です\n(簡易メソッドは全てのオプションでデフォルト値を使用します)。\n\n</p>\n<p>いくつかのオプションは圧縮にだけ関連し、\n解凍するクラスでは無視されることに注意してください。\n\n</p>\n<ul>\n<li>chunkSize (デフォルト: 16*1024)</li>\n<li>windowBits</li>\n<li>level (圧縮のみ)</li>\n<li>memLevel (圧縮のみ)</li>\n<li>strategy (圧縮のみ)</li>\n</ul>\n<p>これらの詳細は <a href=\"http://zlib.net/manual.html#Advanced\">http://zlib.net/manual.html#Advanced</a> の\n<code>deflateInit2</code> および <code>inflateInit2</code> の説明を参照してください。\n\n</p>\n"
        },
        {
          "textRaw": "Memory Usage Tuning",
          "name": "Memory Usage Tuning",
          "type": "misc",
          "desc": "<!--\nFrom `zlib/zconf.h`, modified to node's usage:\n\nThe memory requirements for deflate are (in bytes):\n-->\n\n<p>node は <code>zlib/zconf.h</code> を変更して使っています:\n\n</p>\n<pre><code>(1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))</code></pre>\n<p>すなわち: windowBits = 15 の場合 128K + \nmemLevel = 8 の場合 128K (デフォルト値) に加えて数キロバイトが\n小さなオブジェクトのために使われます。\n\n</p>\n<p>たとえば、デフォルトで要求されるメモリを 256K から 128K へ縮小したければ、\n次のオプションを設定します:\n\n</p>\n<pre><code>{ windowBits: 14, memLevel: 7 }</code></pre>\n<!--\nOf course this will generally degrade compression (there's no free lunch).\n\nThe memory requirements for inflate are (in bytes)\n-->\n\n<p>もちろん、これは圧縮率を悪化します (ただ飯ははありません)。\n\n\n</p>\n<pre><code>1 &lt;&lt; windowBits</code></pre>\n<p>この場合、windowBits=15 (デフォルト値) の場合 32K に加えて数キロバイトが\n小さなオブジェクトのために使われます。\n\n</p>\n<p>これは、デフォルト値 16K の <code>chunkSize</code> で指定されたサイズの内部バッファに加えられます。\n\n</p>\n<p>zlib の圧縮速度は <code>level</code> の設定で劇的に変化します\n高レベルにするとより圧縮できますが、完了までの時間が長くなります。\n低レベルにするとあまり圧縮されませんが、高速になります。\n\n</p>\n<p>一般的に、メモリをより多く使うオプションにすると node が zlib を呼び出す回数が\n少なくなることを意味し、\n一回の <code>write</code> 操作でより多くのデータを処理できることになります。\nこれはあスピードに影響するもう一つのファクタで、メモリ使用量を犠牲にします。\n\n</p>\n",
          "that is: 128K for windowBits": "15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.\n\nFor example, if you want to reduce\nthe default memory requirements from 256K to 128K, set the options to:",
          "that is, 32K for windowBits": "15 (default value) plus a few kilobytes\nfor small objects.\n\nThis is in addition to a single internal output slab buffer of size\n`chunkSize`, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the\n`level` setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.\n\nIn general, greater memory usage options will mean that node has to make\nfewer calls to zlib, since it'll be able to process more data in a\nsingle `write` operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage."
        }
      ],
      "methods": [
        {
          "textRaw": "zlib.createGzip([options])",
          "type": "method",
          "name": "createGzip",
          "desc": "<!--\nReturns a new [Gzip](#zlib.Gzip) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Gzip\">Gzip</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createGunzip([options])",
          "type": "method",
          "name": "createGunzip",
          "desc": "<!--\nReturns a new [Gunzip](#zlib.Gunzip) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Gunzip\">Gunzip</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createDeflate([options])",
          "type": "method",
          "name": "createDeflate",
          "desc": "<!--\nReturns a new [Deflate](#zlib.Deflate) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Deflate\">Deflate</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createInflate([options])",
          "type": "method",
          "name": "createInflate",
          "desc": "<!--\nReturns a new [Inflate](#zlib.Inflate) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Inflate\">Inflate</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createDeflateRaw([options])",
          "type": "method",
          "name": "createDeflateRaw",
          "desc": "<!--\nReturns a new [DeflateRaw](#zlib.DeflateRaw) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.DeflateRaw\">DeflateRaw</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createInflateRaw([options])",
          "type": "method",
          "name": "createInflateRaw",
          "desc": "<!--\nReturns a new [InflateRaw](#zlib.InflateRaw) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.InflateRaw\">InflateRaw</a>\nオブジェクトを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createUnzip([options])",
          "type": "method",
          "name": "createUnzip",
          "desc": "<!--\nReturns a new [Unzip](#zlib.Unzip) object with an [options](#options).\n-->\n\n<p><a href=\"#options\">options</a> によって作られた新しい <a href=\"#zlib.Unzip\">Unzip</a>\nオブジェクトを返します。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.deflate(buf, callback)",
          "type": "method",
          "name": "deflate",
          "desc": "<!--\nCompress a string with Deflate.\n-->\n\n<p>Deflate で文字列を圧縮します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.deflateRaw(buf, callback)",
          "type": "method",
          "name": "deflateRaw",
          "desc": "<!--\nCompress a string with DeflateRaw.\n-->\n\n<p>DeflateRaw で文字列を圧縮します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.gzip(buf, callback)",
          "type": "method",
          "name": "gzip",
          "desc": "<!--\nCompress a string with Gzip.\n-->\n\n<p>Gzip で文字列を圧縮します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.gunzip(buf, callback)",
          "type": "method",
          "name": "gunzip",
          "desc": "<!--\nDecompress a raw Buffer with Gunzip.\n-->\n\n<p>Gunzip で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.inflate(buf, callback)",
          "type": "method",
          "name": "inflate",
          "desc": "<!--\nDecompress a raw Buffer with Inflate.\n-->\n\n<p>Infrate で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.inflateRaw(buf, callback)",
          "type": "method",
          "name": "inflateRaw",
          "desc": "<!--\nDecompress a raw Buffer with InflateRaw.\n-->\n\n<p>InflateRaw で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.unzip(buf, callback)",
          "type": "method",
          "name": "unzip",
          "desc": "<!--\nDecompress a raw Buffer with Unzip.\n-->\n\n<p>Unzip で生のバッファを解凍します。\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "buf"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: zlib.Gzip",
          "type": "class",
          "name": "zlib.Gzip",
          "desc": "<!--\nCompress data using gzip.\n-->\n\n<p>gzip を使ってデータを圧縮します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Gunzip",
          "type": "class",
          "name": "zlib.Gunzip",
          "desc": "<!--\nDecompress a gzip stream.\n-->\n\n<p>gzip ストリームを解凍します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Deflate",
          "type": "class",
          "name": "zlib.Deflate",
          "desc": "<!--\nCompress data using deflate.\n-->\n\n<p>deflate を使ってデータを圧縮します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Inflate",
          "type": "class",
          "name": "zlib.Inflate",
          "desc": "<!--\nDecompress a deflate stream.\n-->\n\n<p>deflate ストリームを解凍します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.DeflateRaw",
          "type": "class",
          "name": "zlib.DeflateRaw",
          "desc": "<!--\nCompress data using deflate, and do not append a zlib header.\n-->\n\n<p>deflate を使ってデータを圧縮しますが、zlib ヘッダを付加しません。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.InflateRaw",
          "type": "class",
          "name": "zlib.InflateRaw",
          "desc": "<!--\nDecompress a raw deflate stream.\n-->\n\n<p>生の deflate ストリームを解凍します。\n\n</p>\n"
        },
        {
          "textRaw": "Class: zlib.Unzip",
          "type": "class",
          "name": "zlib.Unzip",
          "desc": "<!--\nDecompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.\n-->\n\n<p>Gzip または Deflate で圧縮されたストリームをヘッダで自動判別して解凍します。\n\n</p>\n"
        }
      ],
      "that is: 128K for windowBits": "15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.\n\nFor example, if you want to reduce\nthe default memory requirements from 256K to 128K, set the options to:",
      "that is, 32K for windowBits": "15 (default value) plus a few kilobytes\nfor small objects.\n\nThis is in addition to a single internal output slab buffer of size\n`chunkSize`, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the\n`level` setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.\n\nIn general, greater memory usage options will mean that node has to make\nfewer calls to zlib, since it'll be able to process more data in a\nsingle `write` operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage.",
      "type": "module",
      "displayName": "Zlib"
    },
    {
      "textRaw": "os",
      "name": "os",
      "stability": 4,
      "stabilityText": "API Frozen",
      "desc": "<p>Provides a few basic operating-system related utility functions.\n\n</p>\n<!--\nUse `require('os')` to access this module.\n-->\n\n<p><code>require(&apos;os&apos;)</code> によってこのモジュールにアクセスします。\n\n</p>\n",
      "methods": [
        {
          "textRaw": "os.hostname()",
          "type": "method",
          "name": "hostname",
          "desc": "<!--\nReturns the hostname of the operating system.\n-->\n\n<p>オペレーティングシステムのホスト名を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.type()",
          "type": "method",
          "name": "type",
          "desc": "<!--\nReturns the operating system name.\n-->\n\n<p>オペレーティングシステムの名前を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.platform()",
          "type": "method",
          "name": "platform",
          "desc": "<!--\nReturns the operating system platform.\n-->\n\n<p>プラットフォームのオペレーティングシステムを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.arch()",
          "type": "method",
          "name": "arch",
          "desc": "<!--\nReturns the operating system CPU architecture.\n-->\n\n<p>オペレーティングシステムの CPU アーキテクチャを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.release()",
          "type": "method",
          "name": "release",
          "desc": "<!--\nReturns the operating system release.\n-->\n\n<p>オペレーティングシステムのリリースを返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.uptime()",
          "type": "method",
          "name": "uptime",
          "desc": "<!--\nReturns the system uptime in seconds.\n-->\n\n<p>システムが起動してからの秒数を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.loadavg()",
          "type": "method",
          "name": "loadavg",
          "desc": "<!--\nReturns an array containing the 1, 5, and 15 minute load averages.\n-->\n\n<p>1 分、5 分、15 分間のロードアベレージを含んだ配列を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.totalmem()",
          "type": "method",
          "name": "totalmem",
          "desc": "<!--\nReturns the total amount of system memory in bytes.\n-->\n\n<p>システム全体が使用しているメモリのバイト数を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.freemem()",
          "type": "method",
          "name": "freemem",
          "desc": "<!--\nReturns the amount of free system memory in bytes.\n-->\n\n<p>システム全体で空いているメモリのバイト数を返します。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.cpus()",
          "type": "method",
          "name": "cpus",
          "desc": "<!--\nReturns an array of objects containing information about each CPU/core installed: model, speed (in MHz), and times (an object containing the number of CPU ticks spent in: user, nice, sys, idle, and irq).\n-->\n\n<p>インストールされている CPU/ コアごとの情報を含んだオブジェクトの配列を返します。\n情報はモデル、スピード (MHz)、そして時間 (CPU が使用した user, nice, sys, idle, irq 時間を含んだオブジェクト) です。\n\n</p>\n<!--\nExample inspection of os.cpus:\n-->\n\n<p>os.cpus の例:\n\n</p>\n<pre><code>[ { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 252020,\n       nice: 0,\n       sys: 30340,\n       idle: 1070356870,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 306960,\n       nice: 0,\n       sys: 26980,\n       idle: 1071569080,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 248450,\n       nice: 0,\n       sys: 21750,\n       idle: 1070919370,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 256880,\n       nice: 0,\n       sys: 19430,\n       idle: 1070905480,\n       irq: 20 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 511580,\n       nice: 20,\n       sys: 40900,\n       idle: 1070842510,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 291660,\n       nice: 0,\n       sys: 34360,\n       idle: 1070888000,\n       irq: 10 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 308260,\n       nice: 0,\n       sys: 55410,\n       idle: 1071129970,\n       irq: 880 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 266450,\n       nice: 1480,\n       sys: 34920,\n       idle: 1072572010,\n       irq: 30 } } ]</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "os.networkInterfaces()",
          "type": "method",
          "name": "networkInterfaces",
          "desc": "<!--\nGet a list of network interfaces:\n-->\n\n<p>ネットワークインタフェースの一覧を取得します。\n\n</p>\n<pre><code>{ lo0: \n   [ { address: &apos;::1&apos;, family: &apos;IPv6&apos;, internal: true },\n     { address: &apos;fe80::1&apos;, family: &apos;IPv6&apos;, internal: true },\n     { address: &apos;127.0.0.1&apos;, family: &apos;IPv4&apos;, internal: true } ],\n  en1: \n   [ { address: &apos;fe80::cabc:c8ff:feef:f996&apos;, family: &apos;IPv6&apos;,\n       internal: false },\n     { address: &apos;10.0.1.123&apos;, family: &apos;IPv4&apos;, internal: false } ],\n  vmnet1: [ { address: &apos;10.99.99.254&apos;, family: &apos;IPv4&apos;, internal: false } ],\n  vmnet8: [ { address: &apos;10.88.88.1&apos;, family: &apos;IPv4&apos;, internal: false } ],\n  ppp0: [ { address: &apos;10.2.0.231&apos;, family: &apos;IPv4&apos;, internal: false } ] }</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "os"
    },
    {
      "textRaw": "Cluster",
      "name": "cluster",
      "stability": 1,
      "stabilityText": "Experimental - Drastic changes in future versions",
      "desc": "<!--\nA single instance of Node runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node\nprocesses to handle the load.\n-->\n\n<p>一つの Node インスタンスは一つのスレッドで実行されます。\nマルチコアシステムのメリットを生かすために、\nユーザは時々 Node プロセスのクラスを起動して負荷を分散したくなります。\n\n</p>\n<!--\nThe cluster module allows you to easily create a network of processes that\nall share server ports.\n-->\n\n<p>クラスタモジュールは、サーバポートを共有するプロセスのネットワークを\n簡単に構築することを可能にします。\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\nvar numCPUs = require(&apos;os&apos;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&apos;death&apos;, function(worker) {\n    console.log(&apos;worker &apos; + worker.pid + &apos; died&apos;);\n  });\n} else {\n  // Worker processes have a http server.\n  http.Server(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n  }).listen(8000);\n}</code></pre>\n<!--\nRunning node will now share port 8000 between the workers:\n-->\n\n<p>Node は 8000 番ポートをワーカ間で共有します。\n\n</p>\n<pre><code>% node server.js\nWorker 2438 online\nWorker 2437 online</code></pre>\n<!--\nThe difference between `cluster.fork()` and `child_process.fork()` is simply\nthat cluster allows TCP servers to be shared between workers. `cluster.fork`\nis implemented on top of `child_process.fork`. The message passing API that\nis available with `child_process.fork` is available with `cluster` as well.\nAs an example, here is a cluster which keeps count of the number of requests\nin the master process via message passing:\n-->\n\n<p><code>cluster.fork()</code> と <code>child_process.fork()</code> の違いは単純で、\nクラスタはワーカ間で共有する TCP サーバを実現できることです。\n<code>cluster.fork()</code> は <code>child_process.fork()</code> 上に実装されています。\n<code>child_process.fork()</code> によって実現されるメッセージパッシング API は\n<code>cluseter</code> でも同様に利用できます。\n以下のクラスタの例は、メッセージパッシングを通じてマスタプロセスで\nリクエスト数をカウントします。\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\nvar numReqs = 0;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; 2; i++) {\n    var worker = cluster.fork();\n\n    worker.on(&apos;message&apos;, function(msg) {\n      if (msg.cmd &amp;&amp; msg.cmd == &apos;notifyRequest&apos;) {\n        numReqs++;\n      }\n    });\n  }\n\n  setInterval(function() {\n    console.log(&quot;numReqs =&quot;, numReqs);\n  }, 1000);\n} else {\n  // Worker processes have a http server.\n  http.Server(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n    // Send message to master process\n    process.send({ cmd: &apos;notifyRequest&apos; });\n  }).listen(8000);\n}</code></pre>\n",
      "methods": [
        {
          "textRaw": "cluster.fork()",
          "type": "method",
          "name": "fork",
          "desc": "<!--\nSpawn a new worker process. This can only be called from the master process.\n-->\n\n<p>新しいワーカプロセスを起動します。\nマスタプロセスから飲み呼び出すことができます。\n\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "cluster.isMaster",
          "name": "isMaster",
          "desc": "<!--\nBoolean flags to determine if the current process is a master or a worker\nprocess in a cluster. A process `isMaster` if `process.env.NODE_WORKER_ID`\nis undefined.\n-->\n\n<p>現在のプロセスがクラスタ内でマスタかワーカかを決定することができる\nBoolean 値です。\n<code>isMaster</code> は <code>process.env.NODE_WORKER_ID</code> が未定義かどうかです。\n\n\n</p>\n"
        },
        {
          "textRaw": "cluster.isWorker",
          "name": "isWorker",
          "desc": "<!--\nBoolean flags to determine if the current process is a master or a worker\nprocess in a cluster. A process `isMaster` if `process.env.NODE_WORKER_ID`\nis undefined.\n-->\n\n<p>現在のプロセスがクラスタ内でマスタかワーカかを決定することができる\nBoolean 値です。\n<code>isMaster</code> は <code>process.env.NODE_WORKER_ID</code> が未定義かどうかです。\n\n\n</p>\n"
        }
      ],
      "events": [
        {
          "textRaw": "Event: 'death'",
          "type": "event",
          "name": "death",
          "desc": "<!--\nWhen any of the workers die the cluster module will emit the 'death' event.\nThis can be used to restart the worker by calling `fork()` again.\n-->\n\n<p>ワーカが死ぬとクラスタモジュールは <code>&apos;deth&apos;</code> イベントを生成します。\nこれはワーカを再起動するために再び <code>fork()</code>\nを呼び出すことに使うことができます。\n\n</p>\n<pre><code>cluster.on(&apos;death&apos;, function(worker) {\n  console.log(&apos;worker &apos; + worker.pid + &apos; died. restart...&apos;);\n  cluster.fork();\n});</code></pre>\n<!--\nDifferent techniques can be used to restart the worker depending on the\napplication.\n-->\n\n<p>アプリケーションによっては、ワーカを再起動するために\n別のテクニックを使うこともできます。\n\n</p>\n",
          "params": []
        }
      ],
      "type": "module",
      "displayName": "Cluster"
    },
    {
      "textRaw": "Appendix 1 - Third Party Modules",
      "name": "appendix_1_-_third_party_modules",
      "desc": "<!--\nThere are many third party modules for Node. At the time of writing, August\n2010, the master repository of modules is\n[the wiki page](https://github.com/joyent/node/wiki/modules).\n-->\n\n<p>Node 向けにサードパーティ製のモジュールが数多くあります。\n執筆時点 (2010 年 8 月) では、モジュールのマスタリポジトリは\n<a href=\"http://github.com/ry/node/wiki/modules\">wiki ページ</a> です。\n\n</p>\n<!--\nThis appendix is intended as a SMALL guide to new-comers to help them\nquickly find what are considered to be quality modules. It is not intended\nto be a complete list.  There may be better more complete modules found\nelsewhere.\n-->\n\n<p>この付録は、良質だと考えられているモジュールを初心者が素早く見つけることを手助けする「小さな」ガイドを意図しています。\nこれは完全なリストは意図していません。\nどこかでより完全なモジュールが見つかるかもしれません。\n\n</p>\n<ul>\n<li><p>Module Installer: <a href=\"https://github.com/isaacs/npm\">npm</a></p>\n</li>\n<li><p>HTTP Middleware: <a href=\"https://github.com/senchalabs/connect\">Connect</a></p>\n</li>\n<li><p>Web Framework: <a href=\"https://github.com/visionmedia/express\">Express</a></p>\n</li>\n<li><p>Web Sockets: <a href=\"https://github.com/learnboost/socket.io\">Socket.IO</a></p>\n</li>\n<li><p>HTML Parsing: <a href=\"https://github.com/aredridel/html5\">HTML5</a></p>\n</li>\n<li><p><a href=\"https://github.com/agnat/node_mdns\">mDNS/Zeroconf/Bonjour</a></p>\n</li>\n<li><p><a href=\"https://github.com/postwait/node-amqp\">RabbitMQ, AMQP</a></p>\n</li>\n<li><p><a href=\"https://github.com/felixge/node-mysql\">mysql</a></p>\n</li>\n<li><p>Serialization: <a href=\"https://github.com/pgriess/node-msgpack\">msgpack</a></p>\n</li>\n<li><p>Scraping: <a href=\"https://github.com/silentrob/Apricot\">Apricot</a></p>\n</li>\n<li><p>Debugger: <a href=\"https://github.com/smtlaissezfaire/ndb\">ndb</a> is a CLI debugger\n<a href=\"https://github.com/dannycoates/node-inspector\">inspector</a> is a web based\ntool.</p>\n</li>\n<li><p><a href=\"https://github.com/mranney/node_pcap\">pcap binding</a></p>\n</li>\n<li><p><a href=\"https://github.com/mscdex/node-ncurses\">ncurses</a></p>\n</li>\n<li><p>Testing/TDD/BDD: <a href=\"http://vowsjs.org/\">vows</a>,\n<a href=\"https://github.com/visionmedia/mocha\">mocha</a>,\n<a href=\"https://github.com/tmpvar/mjsunit.runner\">mjsunit.runner</a></p>\n</li>\n</ul>\n<!--\nPatches to this list are welcome.\n-->\n\n<p>このリストへのパッチを歓迎します。\n\n</p>\n",
      "type": "module",
      "displayName": "Appendix 1 - Third Party Modules"
    }
  ],
  "stability": 3,
  "stabilityText": "Stable"
}
