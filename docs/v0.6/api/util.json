{
  "source": "doc/api/util.markdown",
  "modules": [
    {
      "textRaw": "util",
      "name": "util",
      "stability": 5,
      "stabilityText": "Locked",
      "desc": "<!--\nThese functions are in the module `'util'`. Use `require('util')` to access\nthem.\n-->\n\n<p>これらの関数はモジュール <code>&apos;util&apos;</code> 内にあります。\n<code>require(&apos;util&apos;)</code> を使うことでこれらにアクセスします。\n\n\n</p>\n",
      "methods": [
        {
          "textRaw": "util.format()",
          "type": "method",
          "name": "format",
          "desc": "<!--\nReturns a formatted string using the first argument as a `printf`-like format.\n-->\n\n<p>最初の引数を <code>printf</code> のようなフォーマットとして使用して、フォーマット化された\n文字列を返します。\n\n</p>\n<!--\nThe first argument is a string that contains zero or more *placeholders*.\nEach placeholder is replaced with the converted value from its corresponding\nargument. Supported placeholders are:\n-->\n\n<p>第一引数は文字列で、0 個以上の <em>プレースホルダ</em> を含みます。\nそれぞれのプレースホルダは対応する引数を変換した値で置換されます。\nサポートするプレースホルダは:\n\n</p>\n<!--\n* `%s` - String.\n* `%d` - Number (both integer and float).\n* `%j` - JSON.\n* `%%` - single percent sign (`'%'`). This does not consume an argument.\n-->\n\n<ul>\n<li><code>%s</code> - 文字列。</li>\n<li><code>%d</code> - 数値 (整数と浮動小数点数の両方)。</li>\n<li><code>%j</code> - JSON。</li>\n<li><code>%%</code> - 一つのパーセント記号 (<code>&apos;%&apos;</code>)。これは引数を消費しません。</li>\n</ul>\n<!--\nIf the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.\n-->\n\n<p>プレースホルダに対応する引数が無い場合、そのプレースホルダは置換されません。\n\n</p>\n<pre><code>util.format(&apos;%s:%s&apos;, &apos;foo&apos;); // &apos;foo:%s&apos;</code></pre>\n<!--\nIf there are more arguments than placeholders, the extra arguments are\nconverted to strings with `util.inspect()` and these strings are concatenated,\ndelimited by a space.\n-->\n\n<p>プレースホルダより多くの引数がある場合、余った引数は <code>util.inspect()</code> によって\n文字列化され、それらはスペース区切りで連結されます。\n\n</p>\n<pre><code>util.format(&apos;%s:%s&apos;, &apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;); // &apos;foo:bar baz&apos;</code></pre>\n<!--\nIf the first argument is not a format string then `util.format()` returns\na string that is the concatenation of all its arguments separated by spaces.\nEach argument is converted to a string with `util.inspect()`.\n-->\n\n<p>第一引数がフォーマット文字列ではない場合、<code>util.format()</code> は全ての引数を\nスペース区切りで連結して返します。\nここの引数は <code>util.inspect()</code> で文字列に変換されます。\n\n</p>\n<pre><code>util.format(1, 2, 3); // &apos;1 2 3&apos;</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "util.debug(string)",
          "type": "method",
          "name": "debug",
          "desc": "<!--\nA synchronous output function. Will block the process and\noutput `string` immediately to `stderr`.\n-->\n\n<p>同期的な出力関数です。プロセスをブロックして即座に <code>string</code> を <code>stderr</code> に出力します。\n\n</p>\n<pre><code>require(&apos;util&apos;).debug(&apos;message on stderr&apos;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.log(string)",
          "type": "method",
          "name": "log",
          "desc": "<!--\nOutput with timestamp on `stdout`.\n-->\n\n<p>タイムスタンプとともに <code>stdout</code> へ出力します。\n\n</p>\n<pre><code>require(&apos;util&apos;).log(&apos;Timestamped message.&apos;);</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.inspect(object, [showHidden], [depth], [colors])",
          "type": "method",
          "name": "inspect",
          "desc": "<!--\nReturn a string representation of `object`, which is useful for debugging.\n-->\n\n<p>デバッグで有用な、<code>object</code> の文字列表現を返します。\n\n</p>\n<!--\nIf `showHidden` is `true`, then the object's non-enumerable properties will be\nshown too. Defaults to `false`.\n-->\n\n<p><code>showHidden</code> が <code>true</code> の場合、\nオブジェクトの Enumerable でないプロパティも表示されます。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nIf `depth` is provided, it tells `inspect` how many times to recurse while\nformatting the object. This is useful for inspecting large complicated objects.\n-->\n\n<p><code>depth</code> が与えられた場合、\nオブジェクトをフォーマットするために何回再帰するかを <code>inspect</code> に伝えます。\nこれは巨大で複雑なオブジェクトを調査する場合に便利です。\n\n</p>\n<!--\nThe default is to only recurse twice.  To make it recurse indefinitely, pass\nin `null` for `depth`.\n-->\n\n<p>デフォルトでは 2 回だけ再帰します。\n無限に再帰するには、<code>depth</code> に <code>null</code> を渡します。\n\n</p>\n<!--\nIf `colors` is `true`, the output will be styled with ANSI color codes.\nDefaults to `false`.\n-->\n\n<p><code>colors</code> が <code>true</code> の場合、出力は ANSI カラーコードで色づけされます。\nデフォルトは <code>false</code> です。\n\n</p>\n<!--\nExample of inspecting all properties of the `util` object:\n-->\n\n<p><code>util</code> オブジェクトの全てのプロパティを調査する例:\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(util, true, null));</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "showHidden",
                  "optional": true
                },
                {
                  "name": "depth",
                  "optional": true
                },
                {
                  "name": "colors",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isArray(object)",
          "type": "method",
          "name": "isArray",
          "desc": "<!--\nReturns `true` if the given \"object\" is an `Array`. `false` otherwise.\n-->\n\n<p><code>object</code> が配列なら <code>true</code> を、それ以外は <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isArray([])\n  // true\nutil.isArray(new Array)\n  // true\nutil.isArray({})\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isRegExp(object)",
          "type": "method",
          "name": "isRegExp",
          "desc": "<!--\nReturns `true` if the given \"object\" is a `RegExp`. `false` otherwise.\n-->\n\n<p><code>object</code> が <code>RegExp</code> なら <code>true</code> を、それ以外なら <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isRegExp(/some regexp/)\n  // true\nutil.isRegExp(new RegExp(&apos;another regexp&apos;))\n  // true\nutil.isRegExp({})\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isDate(object)",
          "type": "method",
          "name": "isDate",
          "desc": "<!--\nReturns `true` if the given \"object\" is a `Date`. `false` otherwise.\n-->\n\n<p><code>object</code> が <code>Date</code> なら <code>true</code> を、それ以外なら <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isDate(new Date())\n  // true\nutil.isDate(Date())\n  // false (without &apos;new&apos; returns a String)\nutil.isDate({})\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.isError(object)",
          "type": "method",
          "name": "isError",
          "desc": "<!--\nReturns `true` if the given \"object\" is an `Error`. `false` otherwise.\n-->\n\n<p><code>object</code> が <code>Error</code> なら <code>true</code> を、それ以外なら <code>false</code> を返します。\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isError(new Error())\n  // true\nutil.isError(new TypeError())\n  // true\nutil.isError({ name: &apos;Error&apos;, message: &apos;an error occurred&apos; })\n  // false</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.pump(readableStream, writableStream, [callback])",
          "type": "method",
          "name": "pump",
          "desc": "<!--\nExperimental\n-->\n\n<p>実験的\n\n</p>\n<!--\nRead the data from `readableStream` and send it to the `writableStream`.\nWhen `writableStream.write(data)` returns `false` `readableStream` will be\npaused until the `drain` event occurs on the `writableStream`. `callback` gets\nan error as its only argument and is called when `writableStream` is closed or\nwhen an error occurs.\n-->\n\n<p><code>readableStream</code> からデータを読み、それ を<code>writableStream</code> に送ります。\n<code>writableStream.write(data)</code> が <code>false</code> を返す場合、\n<code>writableStream</code> が <code>drain</code> イベントを生成するまで、\n<code>readableStream</code> は中断します。\n<code>writableStream</code> がクローズされるかエラーが発生すると、<code>callback</code> は error を唯一の引数として呼び出されます。\n\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "readableStream"
                },
                {
                  "name": "writableStream"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.inherits(constructor, superConstructor)",
          "type": "method",
          "name": "inherits",
          "desc": "<!--\nInherit the prototype methods from one\n[constructor](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor)\ninto another.  The prototype of `constructor` will be set to a new\nobject created from `superConstructor`.\n-->\n\n<p>ある\n<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor\">コンストラクタ</a>\nからプロトタイプメソッドを継承します。\n<code>constructor</code> のプロトタイプは <code>superConstructor</code> から作られたオブジェクトに設定されます。\n\n</p>\n<!--\nAs an additional convenience, `superConstructor` will be accessible\nthrough the `constructor.super_` property.\n-->\n\n<p>さらなる利便性のために、<code>superConstructor</code> は <code>constructor.super_</code>\nプロパティを通じてアクセスすることができるようになります。\n\n</p>\n<pre><code>var util = require(&quot;util&quot;);\nvar events = require(&quot;events&quot;);\n\nfunction MyStream() {\n    events.EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, events.EventEmitter);\n\nMyStream.prototype.write = function(data) {\n    this.emit(&quot;data&quot;, data);\n}\n\nvar stream = new MyStream();\n\nconsole.log(stream instanceof events.EventEmitter); // true\nconsole.log(MyStream.super_ === events.EventEmitter); // true\n\nstream.on(&quot;data&quot;, function(data) {\n    console.log(&apos;Received data: &quot;&apos; + data + &apos;&quot;&apos;);\n})\nstream.write(&quot;It works!&quot;); // Received data: &quot;It works!&quot;</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "constructor"
                },
                {
                  "name": "superConstructor"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "util"
    }
  ]
}
