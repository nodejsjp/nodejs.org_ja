{
  "source": "doc/api/stream.markdown",
  "modules": [
    {
      "textRaw": "Stream",
      "name": "stream",
      "desc": "<!--\nA stream is an abstract interface implemented by various objects in Node.\nFor example a request to an HTTP server is a stream, as is stdout. Streams\nare readable, writable, or both. All streams are instances of `EventEmitter`.\n\nYou can load up the Stream base class by doing `require('stream')`.\n-->\n\n<p>ストリームは Node の様々なオブジェクトで実装される抽象的なインタフェースです。\n例えば HTTP サーバへのリクエストは標準出力と同様にストリームです。\nストリームは読み込み可能、書き込み可能、またはその両方です。\n全てのストリームは <code>EventEmitter</code> のインスタンスです。\n\n</p>\n<p>Stream のベースクラスは <code>require(&apos;stream&apos;)</code> でロードすることができます。\n\n</p>\n",
      "classes": [
        {
          "textRaw": "Readable Stream",
          "name": "Readable Stream",
          "type": "class",
          "desc": "<!--\nA `Readable Stream` has the following methods, members, and events.\n-->\n\n<p><code>Readable Stream</code> には以下のメソッド、メンバー、そしてイベントがあります。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'data'",
              "type": "event",
              "name": "data",
              "desc": "<p><code>function (data) { }</code>\n\n</p>\n<!--\nThe `'data'` event emits either a `Buffer` (by default) or a string if\n`setEncoding()` was used.\n\nNote that the __data will be lost__ if there is no listener when a\n`Readable Stream` emits a `'data'` event.\n-->\n\n<p><code>&apos;data&apos;</code> イベントは <code>Buffer</code> (デフォルト) または、\n<code>setEncoding()</code> された場合は文字列のどちらかを生成します\n\n</p>\n<p><code>Readable Stream</code> が <code>&apos;data&apos;</code> イベントを生成した時にリスナが存在しなければ、\n<strong>データは失われる</strong>ことに注意してください。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'end'",
              "type": "event",
              "name": "end",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the stream has received an EOF (FIN in TCP terminology).\nIndicates that no more `'data'` events will happen. If the stream is also\nwritable, it may be possible to continue writing.\n-->\n\n<p>ストリームが EOF (TCP 用語では FIN) を受信した時に生成されます。\n<code>&apos;data&apos;</code> イベントがもう発生しないことを示します。\nストリームがもし書き込み可能でもあるなら、書き込みを続けることは可能かもしれません。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "desc": "<p><code>function (exception) { }</code>\n\n</p>\n<!--\nEmitted if there was an error receiving data.\n-->\n\n<p>データ受信でエラーがあると生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the underlying file descriptor has been closed. Not all streams\nwill emit this.  (For example, an incoming HTTP request will not emit\n`'close'`.)\n-->\n\n<p>下層でファイル記述子がクローズされた時に生成されます。\n全てのストリームがこのイベントを発生するわけではありません。\n(例えば、インカミングの HTTP リクエストは <code>&apos;close&apos;</code> イベントを生成しません。)\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "stream.readable",
              "name": "readable",
              "desc": "<!--\nA boolean that is `true` by default, but turns `false` after an `'error'`\noccurred, the stream came to an `'end'`, or `destroy()` was called.\n-->\n\n<p>デフォルトでは <code>true</code> ですが、<code>&apos;error&apos;</code> が発生した後、\nストリームが <code>&apos;end&apos;</code> に達した後、または <code>destroy()</code> が呼ばれた後で、\n<code>false</code> に設定される boolean です。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "stream.setEncoding(encoding)",
              "type": "method",
              "name": "setEncoding",
              "desc": "<!--\nMakes the data event emit a string instead of a `Buffer`. `encoding` can be\n`'utf8'`, `'ascii'`, or `'base64'`.\n-->\n\n<p><code>&apos;data&apos;</code> イベントが <code>Buffer</code> ではなく文字列を生成するようにします。\n<code>encoding</code> には <code>&apos;utf8&apos;</code>、<code>&apos;ascii&apos;</code>、\nまたは <code>&apos;base64&apos;</code> を指定することができます。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "encoding"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.pause()",
              "type": "method",
              "name": "pause",
              "desc": "<!--\nPauses the incoming `'data'` events.\n-->\n\n<p><code>&apos;data&apos;</code> イベントの到着を中断します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.resume()",
              "type": "method",
              "name": "resume",
              "desc": "<!--\nResumes the incoming `'data'` events after a `pause()`.\n-->\n\n<p><code>pause()</code> の後で <code>&apos;data&apos;</code> イベントの到着を再開します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.destroy()",
              "type": "method",
              "name": "destroy",
              "desc": "<!--\nCloses the underlying file descriptor. Stream will not emit any more events.\n-->\n\n<p>下層のファイル記述子をクローズします。ストリームはそれ以上イベントを生成しなくなります。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.destroySoon()",
              "type": "method",
              "name": "destroySoon",
              "desc": "<!--\nAfter the write queue is drained, close the file descriptor.\n-->\n\n<p>書き込みキューが空になった後、ファイル記述子をクローズします。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.pipe(destination, [options])",
              "type": "method",
              "name": "pipe",
              "desc": "<!--\nThis is a `Stream.prototype` method available on all `Stream`s.\n-->\n\n<p>これは全ての <code>Stream</code> で利用可能な <code>Stream.prototype</code> メソッドです。\n\n</p>\n<!--\nConnects this read stream to `destination` WriteStream. Incoming\ndata on this stream gets written to `destination`. The destination and source\nstreams are kept in sync by pausing and resuming as necessary.\n-->\n\n<p>読み込みストリームを <code>destination</code> の書き込みストリームに接続します。\nこのストリームに入ってきたデータは <code>destination</code> に書き込まれます。\n接続先と接続元のストリームは、必要に応じて中断と再開することで同期を保ちます。\n\n</p>\n<!--\nThis function returns the `destination` stream.\n-->\n\n<p>この関数は <code>destination</code> ストリームを返します。\n\n</p>\n<!--\nEmulating the Unix `cat` command:\n-->\n\n<p>Unix の <code>cat</code> コマンドのエミュレート:\n\n</p>\n<pre><code>process.stdin.resume();\nprocess.stdin.pipe(process.stdout);</code></pre>\n<!--\nBy default `end()` is called on the destination when the source stream emits\n`end`, so that `destination` is no longer writable. Pass `{ end: false }` as\n`options` to keep the destination stream open.\n-->\n\n<p>デフォルトでは接続元ストリームで <code>end</code> イベントが生成されると、\n接続先の <code>end()</code> が呼ばれるので、もう書き込みはできません。\n<code>option</code> に <code>{ end: false }</code> を渡すと接続先はストリームはオープンされたままとなります。\n\n</p>\n<!--\nThis keeps `process.stdout` open so that \"Goodbye\" can be written at the end.\n-->\n\n<p>これは <code>process.stdout</code> をオープンしたままにして最後に &quot;Goodbye&quot; と出力します。\n\n</p>\n<pre><code>process.stdin.resume();\n\nprocess.stdin.pipe(process.stdout, { end: false });\n\nprocess.stdin.on(&quot;end&quot;, function() {\n  process.stdout.write(&quot;Goodbye\\n&quot;);\n});</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "destination"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Writable Stream",
          "name": "Writable Stream",
          "type": "class",
          "desc": "<!--\nA `Writable Stream` has the following methods, members, and events.\n-->\n\n<p><code>Writable Stream</code> には以下のメソッド、メンバー、そしてイベントがあります。\n\n</p>\n",
          "events": [
            {
              "textRaw": "Event: 'drain'",
              "type": "event",
              "name": "drain",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nAfter a `write()` method returned `false`, this event is emitted to\nindicate that it is safe to write again.\n-->\n\n<p><code>write()</code> メソッドが <code>false</code> でリターンした後、\n再び安全に書き込むことができるようになったことを示すために、\nこのイベントは生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "desc": "<p><code>function (exception) { }</code>\n\n</p>\n<!--\nEmitted on error with the exception `exception`.\n-->\n\n<p><code>exception</code> 例外によるエラーについて生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "desc": "<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the underlying file descriptor has been closed.\n-->\n\n<p>下層でファイル記述子がクローズされた時に生成されます。\n\n</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'pipe'",
              "type": "event",
              "name": "pipe",
              "desc": "<p><code>function (src) { }</code>\n\n</p>\n<!--\nEmitted when the stream is passed to a readable stream's pipe method.\n-->\n\n<p>このストリームが読み込み可能ストリームの pipe メソッドに渡された時に生成されます。\n\n</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "stream.writable",
              "name": "writable",
              "desc": "<!--\nA boolean that is `true` by default, but turns `false` after an `'error'`\noccurred or `end()` / `destroy()` was called.\n-->\n\n<p>デフォルトでは <code>true</code> ですが、<code>&apos;error&apos;</code> が発生した後、\n<code>end()</code> / <code>destroy()</code> が呼ばれた後で <code>false</code> に設定される boolean です。\n\n</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "stream.write(string, [encoding], [fd])",
              "type": "method",
              "name": "write",
              "desc": "<!--\nWrites `string` with the given `encoding` to the stream.  Returns `true` if\nthe string has been flushed to the kernel buffer.  Returns `false` to\nindicate that the kernel buffer is full, and the data will be sent out in\nthe future. The `'drain'` event will indicate when the kernel buffer is\nempty again. The `encoding` defaults to `'utf8'`.\n-->\n\n<p>与えられた <code>encoding</code> で <code>string</code> を書き込みます。\n文字列がカーネルバッファにフラッシュされた場合は <code>true</code> が返ります。\nカーネルバッファがいっぱいの場合は、データが将来カーネルバッファに送られることを示すために、\n<code>false</code> が返ります。\n<code>&apos;drain&apos;</code> イベントがカーネルバッファが再び空いたことを示します。\n<code>encoding</code> のデフォルトは <code>&apos;utf8&apos;</code> です。\n\n</p>\n<!--\nIf the optional `fd` parameter is specified, it is interpreted as an integral\nfile descriptor to be sent over the stream. This is only supported for UNIX\nstreams, and is silently ignored otherwise. When writing a file descriptor in\nthis manner, closing the descriptor before the stream drains risks sending an\ninvalid (closed) FD.\n-->\n\n<p>オプションの <code>fd</code> 引数が指定されると、\nストリームに送信するための基礎となるファイル記述子として解釈されます。\nこれは UNIX ストリームでのみサポートされており、その他では黙って無視されます。\nこのようにファイル記述子に書き込む場合、ストリームが流れきる前にファイル記述子をクローズすると、\nデータが不正な (クローズされた) ファイル記述子に送られるリスクがあります。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "fd",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.write(buffer)",
              "type": "method",
              "name": "write",
              "desc": "<!--\nSame as the above except with a raw buffer.\n-->\n\n<p>生のバッファを使うこと以外は上記と同じです。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.end()",
              "type": "method",
              "name": "end",
              "desc": "<!--\nTerminates the stream with EOF or FIN.\nThis call will allow queued write data to be sent before closing the stream.\n-->\n\n<p>ストリームを EOF または FIN で終了します。\nこの呼び出しは、ストリームがクローズされる前にキューイングされたデータが\n送信されることを許します。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.end(string, encoding)",
              "type": "method",
              "name": "end",
              "desc": "<!--\nSends `string` with the given `encoding` and terminates the stream with EOF\nor FIN. This is useful to reduce the number of packets sent.\n-->\n\n<p>与えられた <code>encoding</code> で <code>string</code> を送信してからEOFまたはFINでストリームを終了します。\nこれは送信するパケットの数を減らすために便利です。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "encoding"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.end(buffer)",
              "type": "method",
              "name": "end",
              "desc": "<!--\nSame as above but with a `buffer`.\n-->\n\n<p><code>buffer</code> であること以外は上記と同じです。\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "stream.destroy()",
              "type": "method",
              "name": "destroy",
              "desc": "<!--\nCloses the underlying file descriptor. Stream will not emit any more events.\nAny queued write data will not be sent.\n-->\n\n<p>下層のファイル記述子をクローズします。ストリームはそれ以上イベントを生成しなくなります。\nキューイングされたデータは送信されません。\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "stream.destroySoon()",
              "type": "method",
              "name": "destroySoon",
              "desc": "<!--\nAfter the write queue is drained, close the file descriptor. `destroySoon()`\ncan still destroy straight away, as long as there is no data left in the queue\nfor writes.\n-->\n\n<p>出力キューが空になった後、ファイル記述子をクローズします。\n出力キューにデータが存在しない場合、<code>destroySoon()</code> はすぐに破棄します。\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Stream"
    }
  ]
}
